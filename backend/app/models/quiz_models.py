"""
Quiz and question models for the Recall application
"""

from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from datetime import datetime
from enum import Enum


class QuestionType(str, Enum):
    MULTIPLE_CHOICE = "multiple_choice"
    TRUE_FALSE = "true_false"
    SHORT_ANSWER = "short_answer"
    FILL_BLANK = "fill_blank"


class DifficultyLevel(str, Enum):
    EASY = "easy"
    MEDIUM = "medium"
    HARD = "hard"


class QuestionBase(BaseModel):
    file_id: int = Field(..., description="Source file ID")
    question_type: QuestionType = Field(..., description="Type of question")
    question_text: str = Field(..., description="The question text")
    correct_answer: str = Field(..., description="Correct answer")
    options: Optional[List[str]] = Field(None, description="Multiple choice options")
    explanation: Optional[str] = Field(None, description="Explanation of the answer")
    difficulty: DifficultyLevel = Field(
        DifficultyLevel.MEDIUM, description="Question difficulty"
    )
    tags: Optional[List[str]] = Field(None, description="Question tags/categories")
    generated_by_llm: bool = Field(
        False, description="Whether question was generated by LLM"
    )
    generation_prompt: Optional[str] = Field(
        None, description="Prompt used to generate question"
    )
    confidence_score: Optional[float] = Field(None, description="LLM confidence score")
    kg_concept_ids: Optional[List[str]] = Field(
        None, description="Knowledge Graph concept IDs"
    )


class QuestionCreate(QuestionBase):
    pass


class Question(QuestionBase):
    id: int = Field(..., description="Unique question ID")
    created_at: datetime = Field(..., description="Creation timestamp")
    times_asked: int = Field(0, description="How many times this question was asked")
    times_correct: int = Field(0, description="How many times answered correctly")
    last_asked: Optional[datetime] = Field(
        None, description="Last time this question was asked"
    )

    class Config:
        from_attributes = True


class Answer(BaseModel):
    question_id: int = Field(..., description="Question ID")
    answer_text: str = Field(..., description="User's answer")
    is_correct: bool = Field(..., description="Whether the answer is correct")
    time_taken: int = Field(..., ge=0, description="Time taken to answer in seconds")
    confidence_level: Optional[int] = Field(
        None, ge=1, le=5, description="User's confidence (1-5)"
    )


class SpacedRepetitionData(BaseModel):
    id: Optional[int] = Field(None, description="Unique spaced repetition data ID")
    question_id: int = Field(..., description="Question ID")
    ease_factor: float = Field(2.5, description="SM-2 ease factor")
    interval_days: int = Field(1, description="Current interval in days")
    review_count: int = Field(0, description="Number of times reviewed")
    next_review: Optional[datetime] = Field(None, description="Next review date")
    kg_concept_id: Optional[str] = Field(None, description="Knowledge Graph concept ID")

    class Config:
        from_attributes = True


class QuizSessionBase(BaseModel):
    workspace_id: int = Field(..., description="Workspace ID for this session")
    file_ids: Optional[List[int]] = Field(None, description="Specific files to quiz on")
    question_count: int = Field(
        10, ge=1, le=50, description="Number of questions in session"
    )
    difficulty_filter: Optional[DifficultyLevel] = Field(
        None, description="Filter by difficulty"
    )
    question_types: Optional[List[QuestionType]] = Field(
        None, description="Filter by question types"
    )


class QuizSessionCreate(QuizSessionBase):
    pass


class QuizSession(QuizSessionBase):
    id: int = Field(..., description="Unique session ID")
    created_at: datetime = Field(..., description="Session creation timestamp")
    started_at: Optional[datetime] = Field(None, description="When session started")
    completed_at: Optional[datetime] = Field(None, description="When session completed")
    current_question_index: int = Field(0, description="Current question in session")
    total_questions: int = Field(0, description="Total questions in this session")
    correct_answers: int = Field(0, description="Number of correct answers")
    total_time: int = Field(0, description="Total time spent in seconds")
    status: str = Field(
        "created", description="Session status: created, active, completed"
    )

    class Config:
        from_attributes = True


class QuizResult(BaseModel):
    session_id: int
    total_questions: int
    correct_answers: int
    incorrect_answers: int
    score_percentage: float
    total_time: int
    average_time_per_question: float
    difficulty_breakdown: Dict[str, int]  # difficulty -> count
    question_results: List[Dict[str, Any]]  # detailed results per question


class QuizStats(BaseModel):
    total_sessions: int
    total_questions_answered: int
    total_correct: int
    average_score: float
    study_streak: int
    favorite_difficulty: DifficultyLevel
    most_difficult_topic: Optional[str]
    improvement_trend: str  # "improving", "stable", "declining"
