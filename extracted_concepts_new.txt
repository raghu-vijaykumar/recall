EXTRACTED CONCEPTS FROM FLATTENED WORKSPACE
==================================================

1. Generated
   Score: 1.000
   Type: single_word
   Line: 2
   Context: ================================================================================
FLATTENED WORKSPACE FILE
Generated from: .
Generated at: C:\workspace\recall\flattened_workspace.txt
==================...

2. Generated
   Score: 1.000
   Type: single_word
   Line: 3
   Context: FLATTENED WORKSPACE FILE
Generated from: .
Generated at: C:\workspace\recall\flattened_workspace.txt
================================================================================
...

3. Runtime
   Score: 1.000
   Type: single_word
   Line: 21
   Context: report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid...

4. Directory
   Score: 1.000
   Type: single_word
   Line: 27
   Context: *.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov
...

5. Coverage
   Score: 1.000
   Type: single_word
   Line: 30
   Context: lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov...

6. Compiled
   Score: 1.000
   Type: single_word
   Line: 46
   Context: .lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release
...

7. Release
   Score: 1.000
   Type: single_word
   Line: 47
   Context: 
# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories...

8. Dependency
   Score: 1.000
   Type: single_word
   Line: 49
   Context: build/Release

# Dependency directories
node_modules/
jspm_packages/...

9. Optional
   Score: 1.000
   Type: single_word
   Line: 59
   Context: *.tsbuildinfo

# Optional npm cache directory
.npm
...

10. Optional
   Score: 1.000
   Type: single_word
   Line: 62
   Context: .npm

# Optional eslint cache
.eslintcache
...

11. Optional
   Score: 1.000
   Type: single_word
   Line: 65
   Context: .eslintcache

# Optional stylelint cache
.stylelintcache
...

12. Optional
   Score: 1.000
   Type: single_word
   Line: 68
   Context: .stylelintcache

# Optional REPL history
.node_repl_history
...

13. Integrity
   Score: 1.000
   Type: single_word
   Line: 74
   Context: *.tgz

# Yarn Integrity file
.yarn-integrity
...

14. Renderer
   Score: 1.000
   Type: single_word
   Line: 173
   Context:     {
      "name": "Main + renderer",
      "configurations": ["Main", "Renderer"],
      "stopAll": true
    }...

15. Renderer
   Score: 1.000
   Type: single_word
   Line: 179
   Context:   "configurations": [
    {
      "name": "Renderer",
      "port": 9222,
      "request": "attach",...

16. Rebuild
   Score: 1.000
   Type: single_word
   Line: 255
   Context:     },
    {
      "label": "Clean, Rebuild, and Make",
      "type": "shell",
      "command": "npm run clean-rebuild-make",...

17. Rebuild
   Score: 1.000
   Type: single_word
   Line: 269
   Context:     },
    {
      "label": "Clean All, Rebuild, Make, and Run",
      "type": "shell",
      "command": "npm run full-clean-build-run",...

18. Default
   Score: 1.000
   Type: single_word
   Line: 293
   Context: .ONESHELL:

# Default target
help:
	@echo "Available commands:"...

19. Install
   Score: 1.000
   Type: single_word
   Line: 296
   Context: help:
	@echo "Available commands:"
	@echo "  setup      - Install dependencies and set up Python virtual environment"
	@echo "  build      - Build the application (runs tests first)"
	@echo "  dev    ...

20. Scripts
   Score: 1.000
   Type: single_word
   Line: 315
   Context: 	npm install
	cd backend && python -m venv .venv
	cd backend && .venv\Scripts\python.exe -m pip install -r requirements.txt
	cd backend && .venv\Scripts\python.exe -m pip install mkdocs
	for /f %%i in...

21. Scripts
   Score: 1.000
   Type: single_word
   Line: 316
   Context: 	cd backend && python -m venv .venv
	cd backend && .venv\Scripts\python.exe -m pip install -r requirements.txt
	cd backend && .venv\Scripts\python.exe -m pip install mkdocs
	for /f %%i in ('powershell...

22. Scripts
   Score: 1.000
   Type: single_word
   Line: 372
   Context: test-backend:
ifdef BYPASS_COVERAGE
	cd backend && .\.venv\Scripts\activate.bat && set PYTHONPATH=%cd% && python -m pytest tests/ -v
else
	cd backend && .\.venv\Scripts\activate.bat && set PYTHONPATH=...

23. Scripts
   Score: 1.000
   Type: single_word
   Line: 374
   Context: 	cd backend && .\.venv\Scripts\activate.bat && set PYTHONPATH=%cd% && python -m pytest tests/ -v
else
	cd backend && .\.venv\Scripts\activate.bat && set PYTHONPATH=%cd% && python -m pytest --cov=app -...

24. Scripts
   Score: 1.000
   Type: single_word
   Line: 394
   Context: # Build backend with PyInstaller
build-backend-pyinstaller:
	cd backend && python -m venv .venv-build && .\.venv-build\Scripts\python.exe -m ensurepip --default-pip && .\.venv-build\Scripts\pip.exe in...

25. Scripts
   Score: 1.000
   Type: single_word
   Line: 394
   Context: # Build backend with PyInstaller
build-backend-pyinstaller:
	cd backend && python -m venv .venv-build && .\.venv-build\Scripts\python.exe -m ensurepip --default-pip && .\.venv-build\Scripts\pip.exe in...

26. Scripts
   Score: 1.000
   Type: single_word
   Line: 394
   Context: # Build backend with PyInstaller
build-backend-pyinstaller:
	cd backend && python -m venv .venv-build && .\.venv-build\Scripts\python.exe -m ensurepip --default-pip && .\.venv-build\Scripts\pip.exe in...

27. Scripts
   Score: 1.000
   Type: single_word
   Line: 394
   Context: # Build backend with PyInstaller
build-backend-pyinstaller:
	cd backend && python -m venv .venv-build && .\.venv-build\Scripts\python.exe -m ensurepip --default-pip && .\.venv-build\Scripts\pip.exe in...

28. Electron
   Score: 1.000
   Type: single_word
   Line: 405
   Context: # Start development with cleanup
start: build
	@echo Starting Electron Forge...
	npx electron-forge start
...

29. Scripts
   Score: 1.000
   Type: single_word
   Line: 411
   Context: start-backend:
	@echo Starting backend server...
	cd backend && .\.venv\Scripts\activate.bat && set FLASK_DEBUG=1 && set PYTHONPATH=%cd% && python main.py

# Full clean, rebuild, and install...

30. Building
   Score: 1.000
   Type: single_word
   Line: 436
   Context: # Build wiki documentation site
wiki-build:
	@echo "Building wiki documentation..."
	cd backend && .\.venv\Scripts\activate.bat && cd .. && mkdocs build
...

31. Scripts
   Score: 1.000
   Type: single_word
   Line: 437
   Context: wiki-build:
	@echo "Building wiki documentation..."
	cd backend && .\.venv\Scripts\activate.bat && cd .. && mkdocs build

# Serve wiki documentation site locally...

32. Scripts
   Score: 1.000
   Type: single_word
   Line: 443
   Context: 	@echo "Serving wiki documentation on http://127.0.0.1:8000"
	@echo "Press Ctrl+C to stop the server"
	cd backend && .\.venv\Scripts\activate.bat && cd .. && mkdocs serve --dev-addr=127.0.0.1:8000

...

33. Features
   Score: 1.000
   Type: single_word
   Line: 454
   Context: Recall is an application designed to help users learn and retain information from their files by generating quizzes and tracking progress.

## Features

*   **Workspace Management:** Organize your fil...

34. Workspace Management
   Score: 1.000
   Type: multi_word
   Line: 456
   Context: ## Features

*   **Workspace Management:** Organize your files into workspaces for focused learning.
*   **File Analysis:** Analyze various file types to extract key information.
*   **Quiz Generation...

35. Workspace
   Score: 1.000
   Type: single_word
   Line: 456
   Context: ## Features

*   **Workspace Management:** Organize your files into workspaces for focused learning.
*   **File Analysis:** Analyze various file types to extract key information.
*   **Quiz Generation...

36. Analysis
   Score: 1.000
   Type: single_word
   Line: 457
   Context: 
*   **Workspace Management:** Organize your files into workspaces for focused learning.
*   **File Analysis:** Analyze various file types to extract key information.
*   **Quiz Generation:** Automati...

37. Analyze
   Score: 1.000
   Type: single_word
   Line: 457
   Context: 
*   **Workspace Management:** Organize your files into workspaces for focused learning.
*   **File Analysis:** Analyze various file types to extract key information.
*   **Quiz Generation:** Automati...

38. Quiz Generation
   Score: 1.000
   Type: multi_word
   Line: 458
   Context: *   **Workspace Management:** Organize your files into workspaces for focused learning.
*   **File Analysis:** Analyze various file types to extract key information.
*   **Quiz Generation:** Automatic...

39. Generation
   Score: 1.000
   Type: single_word
   Line: 458
   Context: *   **Workspace Management:** Organize your files into workspaces for focused learning.
*   **File Analysis:** Analyze various file types to extract key information.
*   **Quiz Generation:** Automatic...

40. Automatically
   Score: 1.000
   Type: single_word
   Line: 458
   Context: *   **Workspace Management:** Organize your files into workspaces for focused learning.
*   **File Analysis:** Analyze various file types to extract key information.
*   **Quiz Generation:** Automatic...

41. Progress Tracking
   Score: 1.000
   Type: multi_word
   Line: 459
   Context: *   **File Analysis:** Analyze various file types to extract key information.
*   **Quiz Generation:** Automatically generate quizzes based on the content of your files.
*   **Progress Tracking:** Mon...

42. Progress
   Score: 1.000
   Type: single_word
   Line: 459
   Context: *   **File Analysis:** Analyze various file types to extract key information.
*   **Quiz Generation:** Automatically generate quizzes based on the content of your files.
*   **Progress Tracking:** Mon...

43. Tracking
   Score: 1.000
   Type: single_word
   Line: 459
   Context: *   **File Analysis:** Analyze various file types to extract key information.
*   **Quiz Generation:** Automatically generate quizzes based on the content of your files.
*   **Progress Tracking:** Mon...

44. Monitor
   Score: 1.000
   Type: single_word
   Line: 459
   Context: *   **File Analysis:** Analyze various file types to extract key information.
*   **Quiz Generation:** Automatically generate quizzes based on the content of your files.
*   **Progress Tracking:** Mon...

45. Electron
   Score: 1.000
   Type: single_word
   Line: 465
   Context: ### Prerequisites

*   Node.js (for frontend and Electron)
*   Python 3.x (for backend)
*   npm or yarn (for frontend dependencies)...

46. Backend
   Score: 1.000
   Type: single_word
   Line: 478
   Context:     ```

2.  **Backend Setup:**
    ```bash
    cd backend...

47. Frontend
   Score: 1.000
   Type: single_word
   Line: 485
   Context:     ```

3.  **Frontend Setup:**
    ```bash
    cd .....

48. Contains
   Score: 1.000
   Type: single_word
   Line: 494
   Context: ## Project Structure

*   [`backend/`](backend/): Contains the Python Flask backend application.
*   [`electron/`](electron/): Contains the Electron-specific code for the desktop application.
*   [`fr...

49. Contains
   Score: 1.000
   Type: single_word
   Line: 495
   Context: 
*   [`backend/`](backend/): Contains the Python Flask backend application.
*   [`electron/`](electron/): Contains the Electron-specific code for the desktop application.
*   [`frontend/`](frontend/):...

50. Electron
   Score: 1.000
   Type: single_word
   Line: 495
   Context: 
*   [`backend/`](backend/): Contains the Python Flask backend application.
*   [`electron/`](electron/): Contains the Electron-specific code for the desktop application.
*   [`frontend/`](frontend/):...

51. Contains
   Score: 1.000
   Type: single_word
   Line: 496
   Context: *   [`backend/`](backend/): Contains the Python Flask backend application.
*   [`electron/`](electron/): Contains the Electron-specific code for the desktop application.
*   [`frontend/`](frontend/): ...

52. Contains
   Score: 1.000
   Type: single_word
   Line: 497
   Context: *   [`electron/`](electron/): Contains the Electron-specific code for the desktop application.
*   [`frontend/`](frontend/): Contains the React/TypeScript frontend application.
*   [`database/`](datab...

53. Contains
   Score: 1.000
   Type: single_word
   Line: 498
   Context: *   [`frontend/`](frontend/): Contains the React/TypeScript frontend application.
*   [`database/`](database/): Contains database schema and migration scripts.
*   [`wiki/`](wiki/): Contains documenta...

54. License
   Score: 1.000
   Type: single_word
   Line: 505
   Context: We welcome contributions! Please see our `TODO.md` for areas of improvement and feel free to submit pull requests.

## License

This project is licensed under the MIT License....

55. License
   Score: 1.000
   Type: single_word
   Line: 507
   Context: ## License

This project is licensed under the MIT License.

================================================================================...

56. Features
   Score: 1.000
   Type: single_word
   Line: 515
   Context: # 📌 Project Improvements and TODOs

This document categorizes the planned features, improvements, and ideas for the app into **Core Features**, **Building Blocks**, **Tech Quality**, and **Future Enha...

57. Building
   Score: 1.000
   Type: single_word
   Line: 515
   Context: # 📌 Project Improvements and TODOs

This document categorizes the planned features, improvements, and ideas for the app into **Core Features**, **Building Blocks**, **Tech Quality**, and **Future Enha...

58. Enhancements
   Score: 1.000
   Type: single_word
   Line: 515
   Context: # 📌 Project Improvements and TODOs

This document categorizes the planned features, improvements, and ideas for the app into **Core Features**, **Building Blocks**, **Tech Quality**, and **Future Enha...

59. Features
   Score: 1.000
   Type: single_word
   Line: 520
   Context: ---

## 🟢 Core Features (User-facing functionality)

These are the features that directly add value to users and shape the main experience of the app....

60. Generation
   Score: 1.000
   Type: single_word
   Line: 524
   Context: These are the features that directly add value to users and shape the main experience of the app.

- [ ] **Improve Quiz Generation** – Refine the algorithm to produce diverse and challenging quizzes. ...

61. Generation
   Score: 1.000
   Type: single_word
   Line: 525
   Context: 
- [ ] **Improve Quiz Generation** – Refine the algorithm to produce diverse and challenging quizzes.  
- [ ] **Advanced Quiz Generation (LLM-powered)** – Use LLMs to create dynamic Q&A, spaced repeti...

62. Knowledge Graph
   Score: 1.000
   Type: multi_word
   Line: 526
   Context: - [ ] **Improve Quiz Generation** – Refine the algorithm to produce diverse and challenging quizzes.  
- [ ] **Advanced Quiz Generation (LLM-powered)** – Use LLMs to create dynamic Q&A, spaced repetit...

63. Knowledge
   Score: 1.000
   Type: single_word
   Line: 526
   Context: - [ ] **Improve Quiz Generation** – Refine the algorithm to produce diverse and challenging quizzes.  
- [ ] **Advanced Quiz Generation (LLM-powered)** – Use LLMs to create dynamic Q&A, spaced repetit...

64. Progress
   Score: 1.000
   Type: single_word
   Line: 526
   Context: - [ ] **Improve Quiz Generation** – Refine the algorithm to produce diverse and challenging quizzes.  
- [ ] **Advanced Quiz Generation (LLM-powered)** – Use LLMs to create dynamic Q&A, spaced repetit...

65. Rich Content Display
   Score: 1.000
   Type: multi_word
   Line: 528
   Context: - [ ] **Knowledge Graph in Progress View** – Build a graph (RAG-based) to map relationships between studied topics and suggest related material.  
- [ ] **File Tree & Tabbed Views** – Add a file explo...

66. Content
   Score: 1.000
   Type: single_word
   Line: 528
   Context: - [ ] **Knowledge Graph in Progress View** – Build a graph (RAG-based) to map relationships between studied topics and suggest related material.  
- [ ] **File Tree & Tabbed Views** – Add a file explo...

67. Display
   Score: 1.000
   Type: single_word
   Line: 528
   Context: - [ ] **Knowledge Graph in Progress View** – Build a graph (RAG-based) to map relationships between studied topics and suggest related material.  
- [ ] **File Tree & Tabbed Views** – Add a file explo...

68. Expanded
   Score: 1.000
   Type: single_word
   Line: 530
   Context: - [ ] **Rich Content Display** – Embed URLs, YouTube, images, and GIFs (similar to Notion/Jupyter).  
- [ ] **Basic File Operations** – Enable create, rename, move, copy, and delete for files/folders....

69. Convert
   Score: 1.000
   Type: single_word
   Line: 531
   Context: - [ ] **Basic File Operations** – Enable create, rename, move, copy, and delete for files/folders.  
- [ ] **Expanded File Format Support** – Add support for DOCX, PDFs, and other popular study materi...

70. Version
   Score: 1.000
   Type: single_word
   Line: 534
   Context: - [ ] **Advanced Search** – Provide powerful search across files, tags, and workspaces.  
- [ ] **Collaboration (Future)** – Real-time multi-user editing and workspace sharing.  
- [ ] **Version Contr...

71. Integration
   Score: 1.000
   Type: single_word
   Line: 534
   Context: - [ ] **Advanced Search** – Provide powerful search across files, tags, and workspaces.  
- [ ] **Collaboration (Future)** – Real-time multi-user editing and workspace sharing.  
- [ ] **Version Contr...

72. Settings
   Score: 1.000
   Type: single_word
   Line: 535
   Context: - [ ] **Collaboration (Future)** – Real-time multi-user editing and workspace sharing.  
- [ ] **Version Control Integration (Future)** – Pull content directly from Git repositories.  
- [ ] **Customi...

73. Content
   Score: 1.000
   Type: single_word
   Line: 537
   Context: - [ ] **Customizable Quiz Settings (Future)** – Allow control over quiz difficulty, types, and formats.  
- [ ] **LLM Research Chat Mode (Future)** – Summarize, condense, and document material via LLM...

74. Building
   Score: 1.000
   Type: single_word
   Line: 541
   Context: ---

## 🟡 Building Blocks / Overhead (Infrastructure)

These are necessary for a production-grade desktop application but don’t directly add user-facing value....

75. Automatic
   Score: 1.000
   Type: single_word
   Line: 546
   Context: 
- [ ] **User Authentication** – Enable personalized workspaces and progress tracking.  
- [ ] **Automatic App Updates** – Add seamless update and download mechanisms.  
- [ ] **Automatic Database Mig...

76. Database Migrations
   Score: 1.000
   Type: multi_word
   Line: 547
   Context: - [ ] **User Authentication** – Enable personalized workspaces and progress tracking.  
- [ ] **Automatic App Updates** – Add seamless update and download mechanisms.  
- [ ] **Automatic Database Migr...

77. Automatic
   Score: 1.000
   Type: single_word
   Line: 547
   Context: - [ ] **User Authentication** – Enable personalized workspaces and progress tracking.  
- [ ] **Automatic App Updates** – Add seamless update and download mechanisms.  
- [ ] **Automatic Database Migr...

78. Database
   Score: 1.000
   Type: single_word
   Line: 547
   Context: - [ ] **User Authentication** – Enable personalized workspaces and progress tracking.  
- [ ] **Automatic App Updates** – Add seamless update and download mechanisms.  
- [ ] **Automatic Database Migr...

79. Migrations
   Score: 1.000
   Type: single_word
   Line: 547
   Context: - [ ] **User Authentication** – Enable personalized workspaces and progress tracking.  
- [ ] **Automatic App Updates** – Add seamless update and download mechanisms.  
- [ ] **Automatic Database Migr...

80. Enhancements
   Score: 1.000
   Type: single_word
   Line: 548
   Context: - [ ] **Automatic App Updates** – Add seamless update and download mechanisms.  
- [ ] **Automatic Database Migrations** – Handle schema changes safely without data loss.  
- [ ] **UI/UX Enhancements*...

81. Handling
   Score: 1.000
   Type: single_word
   Line: 556
   Context: Improvements to stability, maintainability, and performance.

- [ ] **Robust Error Handling** – Implement consistent error capture across frontend and backend.  
- [ ] **Code Refactoring** – Improve r...

82. Implement
   Score: 1.000
   Type: single_word
   Line: 556
   Context: Improvements to stability, maintainability, and performance.

- [ ] **Robust Error Handling** – Implement consistent error capture across frontend and backend.  
- [ ] **Code Refactoring** – Improve r...

83. Performance
   Score: 1.000
   Type: single_word
   Line: 558
   Context: - [ ] **Robust Error Handling** – Implement consistent error capture across frontend and backend.  
- [ ] **Code Refactoring** – Improve readability, maintainability, and modularity of the codebase.  ...

84. Optimization
   Score: 1.000
   Type: single_word
   Line: 558
   Context: - [ ] **Robust Error Handling** – Implement consistent error capture across frontend and backend.  
- [ ] **Code Refactoring** – Improve readability, maintainability, and modularity of the codebase.  ...

85. Testing
   Score: 1.000
   Type: single_word
   Line: 559
   Context: - [ ] **Code Refactoring** – Improve readability, maintainability, and modularity of the codebase.  
- [ ] **Performance Optimization** – Scale to handle large workspaces and heavy datasets smoothly. ...

86. Enhancements
   Score: 1.000
   Type: single_word
   Line: 563
   Context: ---

## 💡 Future Enhancements & Ideas

These are forward-looking ideas that can elevate the app significantly over time....

87. Security
   Score: 1.000
   Type: single_word
   Line: 567
   Context: These are forward-looking ideas that can elevate the app significantly over time.

### 🔐 Security & Privacy
- [ ] **Encryption at Rest & In Transit** – Secure local database and synced data.  
- [ ] *...

88. Transit
   Score: 1.000
   Type: single_word
   Line: 568
   Context: 
### 🔐 Security & Privacy
- [ ] **Encryption at Rest & In Transit** – Secure local database and synced data.  
- [ ] **Role-Based Access Control (RBAC)** – Permissions for collaborative workspaces.  
...

89. Logging
   Score: 1.000
   Type: single_word
   Line: 570
   Context: - [ ] **Encryption at Rest & In Transit** – Secure local database and synced data.  
- [ ] **Role-Based Access Control (RBAC)** – Permissions for collaborative workspaces.  
- [ ] **Audit Logging** – ...

90. Optional
   Score: 1.000
   Type: single_word
   Line: 571
   Context: - [ ] **Role-Based Access Control (RBAC)** – Permissions for collaborative workspaces.  
- [ ] **Audit Logging** – Track activity for debugging and security compliance.  
- [ ] **End-to-End Encryption...

91. Analytics
   Score: 1.000
   Type: single_word
   Line: 573
   Context: - [ ] **End-to-End Encryption (Optional)** – Full privacy for sensitive study data.  
- [ ] **Local-Only Mode** – Allow offline usage without cloud sync.  
- [ ] **Anonymized Analytics** – Opt-in tele...

92. Developer
   Score: 1.000
   Type: single_word
   Line: 575
   Context: - [ ] **Anonymized Analytics** – Opt-in telemetry with strong privacy safeguards.  

### ⚙️ Developer Productivity
- [ ] **CI/CD Pipeline Setup** – Automated builds, tests, and releases.  
- [ ] **Cod...

93. Pipeline
   Score: 1.000
   Type: single_word
   Line: 576
   Context: 
### ⚙️ Developer Productivity
- [ ] **CI/CD Pipeline Setup** – Automated builds, tests, and releases.  
- [ ] **Code Quality Gates** – Enforce linting, typing, and static analysis in PRs.  
- [ ] **D...

94. Developer
   Score: 1.000
   Type: single_word
   Line: 578
   Context: - [ ] **CI/CD Pipeline Setup** – Automated builds, tests, and releases.  
- [ ] **Code Quality Gates** – Enforce linting, typing, and static analysis in PRs.  
- [ ] **Developer Documentation** – Add ...

95. Documentation
   Score: 1.000
   Type: single_word
   Line: 578
   Context: - [ ] **CI/CD Pipeline Setup** – Automated builds, tests, and releases.  
- [ ] **Code Quality Gates** – Enforce linting, typing, and static analysis in PRs.  
- [ ] **Developer Documentation** – Add ...

96. Architecture
   Score: 1.000
   Type: single_word
   Line: 579
   Context: - [ ] **Code Quality Gates** – Enforce linting, typing, and static analysis in PRs.  
- [ ] **Developer Documentation** – Add contributor guides, API docs, and architecture diagrams.  
- [ ] **Modular...

97. Analytics
   Score: 1.000
   Type: single_word
   Line: 583
   Context: - [ ] **Theming/Customization** – Allow users and developers to style and extend UI.  

### 📊 Analytics & Observability
- [ ] **In-App Telemetry (Opt-in)** – Collect usage patterns to guide improvemen...

98. Collect
   Score: 1.000
   Type: single_word
   Line: 584
   Context: 
### 📊 Analytics & Observability
- [ ] **In-App Telemetry (Opt-in)** – Collect usage patterns to guide improvements.  
- [ ] **Error/Crash Reporting** – Integrate tools like Sentry or Bugsnag.  
- [ ]...

99. Integrate
   Score: 1.000
   Type: single_word
   Line: 585
   Context: ### 📊 Analytics & Observability
- [ ] **In-App Telemetry (Opt-in)** – Collect usage patterns to guide improvements.  
- [ ] **Error/Crash Reporting** – Integrate tools like Sentry or Bugsnag.  
- [ ] ...

100. Performance
   Score: 1.000
   Type: single_word
   Line: 586
   Context: - [ ] **In-App Telemetry (Opt-in)** – Collect usage patterns to guide improvements.  
- [ ] **Error/Crash Reporting** – Integrate tools like Sentry or Bugsnag.  
- [ ] **Performance Metrics** – Track ...

101. Metrics
   Score: 1.000
   Type: single_word
   Line: 586
   Context: - [ ] **In-App Telemetry (Opt-in)** – Collect usage patterns to guide improvements.  
- [ ] **Error/Crash Reporting** – Integrate tools like Sentry or Bugsnag.  
- [ ] **Performance Metrics** – Track ...

102. Extension
   Score: 1.000
   Type: single_word
   Line: 589
   Context: 
### 🌐 Extensibility
- [ ] **Plugin/Extension Framework** – Let the community build new quiz types and content integrations.  
- [ ] **API/SDK for Developers** – Reuse the core quiz engine in other ap...

103. Framework
   Score: 1.000
   Type: single_word
   Line: 589
   Context: 
### 🌐 Extensibility
- [ ] **Plugin/Extension Framework** – Let the community build new quiz types and content integrations.  
- [ ] **API/SDK for Developers** – Reuse the core quiz engine in other ap...

104. Developers
   Score: 1.000
   Type: single_word
   Line: 590
   Context: ### 🌐 Extensibility
- [ ] **Plugin/Extension Framework** – Let the community build new quiz types and content integrations.  
- [ ] **API/SDK for Developers** – Reuse the core quiz engine in other app...

105. Platform
   Score: 1.000
   Type: single_word
   Line: 592
   Context: - [ ] **API/SDK for Developers** – Reuse the core quiz engine in other apps or scripts.  

### ☁️ Cross-Platform & Sync
- [ ] **Sync Across Devices** – Cloud sync for user data.  
- [ ] **Offline-Firs...

106. Offline
   Score: 1.000
   Type: single_word
   Line: 594
   Context: ### ☁️ Cross-Platform & Sync
- [ ] **Sync Across Devices** – Cloud sync for user data.  
- [ ] **Offline-First Support** – Ensure the app works fully offline with later sync.  
- [ ] **Backup & Restor...

107. Restore
   Score: 1.000
   Type: single_word
   Line: 595
   Context: - [ ] **Sync Across Devices** – Cloud sync for user data.  
- [ ] **Offline-First Support** – Ensure the app works fully offline with later sync.  
- [ ] **Backup & Restore** – Local export/import or ...

108. Desktop
   Score: 1.000
   Type: single_word
   Line: 596
   Context: - [ ] **Offline-First Support** – Ensure the app works fully offline with later sync.  
- [ ] **Backup & Restore** – Local export/import or cloud backups.  
- [ ] **Mobile/Desktop Sync** – Seamless ha...

109. Seamless
   Score: 1.000
   Type: single_word
   Line: 596
   Context: - [ ] **Offline-First Support** – Ensure the app works fully offline with later sync.  
- [ ] **Backup & Restore** – Local export/import or cloud backups.  
- [ ] **Mobile/Desktop Sync** – Seamless ha...

110. Import Workspaces
   Score: 1.000
   Type: multi_word
   Line: 598
   Context: - [ ] **Mobile/Desktop Sync** – Seamless handoff between devices.  
- [ ] **Progressive Web App (PWA)** – Lightweight browser-based version.  
- [ ] **Export/Import Workspaces** – Share study content ...

111. Workspaces
   Score: 1.000
   Type: single_word
   Line: 598
   Context: - [ ] **Mobile/Desktop Sync** – Seamless handoff between devices.  
- [ ] **Progressive Web App (PWA)** – Lightweight browser-based version.  
- [ ] **Export/Import Workspaces** – Share study content ...

112. Knowledge
   Score: 1.000
   Type: single_word
   Line: 600
   Context: - [ ] **Export/Import Workspaces** – Share study content easily.  

### 🧠 Knowledge & Learning Enhancements
- [ ] **Adaptive Learning Paths** – Adjust quizzes/content automatically based on progress. ...

113. Learning
   Score: 1.000
   Type: single_word
   Line: 600
   Context: - [ ] **Export/Import Workspaces** – Share study content easily.  

### 🧠 Knowledge & Learning Enhancements
- [ ] **Adaptive Learning Paths** – Adjust quizzes/content automatically based on progress. ...

114. Enhancements
   Score: 1.000
   Type: single_word
   Line: 600
   Context: - [ ] **Export/Import Workspaces** – Share study content easily.  

### 🧠 Knowledge & Learning Enhancements
- [ ] **Adaptive Learning Paths** – Adjust quizzes/content automatically based on progress. ...

115. Adaptive
   Score: 1.000
   Type: single_word
   Line: 601
   Context: 
### 🧠 Knowledge & Learning Enhancements
- [ ] **Adaptive Learning Paths** – Adjust quizzes/content automatically based on progress.  
- [ ] **Progress Insights Dashboard** – Visualize weak areas, tim...

116. Learning
   Score: 1.000
   Type: single_word
   Line: 601
   Context: 
### 🧠 Knowledge & Learning Enhancements
- [ ] **Adaptive Learning Paths** – Adjust quizzes/content automatically based on progress.  
- [ ] **Progress Insights Dashboard** – Visualize weak areas, tim...

117. Progress
   Score: 1.000
   Type: single_word
   Line: 602
   Context: ### 🧠 Knowledge & Learning Enhancements
- [ ] **Adaptive Learning Paths** – Adjust quizzes/content automatically based on progress.  
- [ ] **Progress Insights Dashboard** – Visualize weak areas, time...

118. Insights
   Score: 1.000
   Type: single_word
   Line: 602
   Context: ### 🧠 Knowledge & Learning Enhancements
- [ ] **Adaptive Learning Paths** – Adjust quizzes/content automatically based on progress.  
- [ ] **Progress Insights Dashboard** – Visualize weak areas, time...

119. Recommendation
   Score: 1.000
   Type: single_word
   Line: 604
   Context: - [ ] **Progress Insights Dashboard** – Visualize weak areas, time spent, and learning curves.  
- [ ] **Gamification** – Add badges, streaks, or XP to motivate learners.  
- [ ] **Recommendation Engi...

120. Metadata
   Score: 1.000
   Type: single_word
   Line: 607
   Context: 
### 🗂 Data Management
- [ ] **Tagging & Metadata** – Add flexible categorization for notes and media.  
- [ ] **Archive/Trash System** – Allow safe recovery of deleted items.  
...

121. History
   Score: 1.000
   Type: single_word
   Line: 610
   Context: - [ ] **Archive/Trash System** – Allow safe recovery of deleted items.  

### 📝 Versioning & History
- [ ] **Versioning for Notes** – Track all changes with rollback support.  
- [ ] **Versioning for ...

122. History
   Score: 1.000
   Type: single_word
   Line: 613
   Context: - [ ] **Versioning for Notes** – Track all changes with rollback support.  
- [ ] **Versioning for Media** – Keep history of attached files like images and PDFs.  
- [ ] **Change History / Diff View**...

123. Version
   Score: 1.000
   Type: single_word
   Line: 614
   Context: - [ ] **Versioning for Media** – Keep history of attached files like images and PDFs.  
- [ ] **Change History / Diff View** – Visualize differences between versions.  
- [ ] **Version Metadata** – Re...

124. Metadata
   Score: 1.000
   Type: single_word
   Line: 614
   Context: - [ ] **Versioning for Media** – Keep history of attached files like images and PDFs.  
- [ ] **Change History / Diff View** – Visualize differences between versions.  
- [ ] **Version Metadata** – Re...

125. Conflict
   Score: 1.000
   Type: single_word
   Line: 616
   Context: - [ ] **Version Metadata** – Record author, timestamp, and reason for changes.  
- [ ] **Auto-Save & Drafts** – Save user work continuously with revert-to-last option.  
- [ ] **Conflict Resolution** ...

126. Resolution
   Score: 1.000
   Type: single_word
   Line: 616
   Context: - [ ] **Version Metadata** – Record author, timestamp, and reason for changes.  
- [ ] **Auto-Save & Drafts** – Save user work continuously with revert-to-last option.  
- [ ] **Conflict Resolution** ...

127. Workspaces
   Score: 1.000
   Type: single_word
   Line: 619
   Context: 
### 🌍 Ecosystem & Community
- [ ] **Community-Shared Workspaces** – Enable sharing of flashcards or curated content.  
- [ ] **Import from External Tools** – Support importing from Notion, Obsidian, ...

128. Features
   Score: 1.000
   Type: single_word
   Line: 627
   Context: # ✅ Summary

- **Core Features** → What makes the app useful.  
- **Building Blocks** → Necessary infrastructure for production.  
- **Tech Quality** → Stability, testing, and performance.  ...

129. Building
   Score: 1.000
   Type: single_word
   Line: 628
   Context: 
- **Core Features** → What makes the app useful.  
- **Building Blocks** → Necessary infrastructure for production.  
- **Tech Quality** → Stability, testing, and performance.  
- **Future Enhancemen...

130. Enhancements
   Score: 1.000
   Type: single_word
   Line: 630
   Context: - **Building Blocks** → Necessary infrastructure for production.  
- **Tech Quality** → Stability, testing, and performance.  
- **Future Enhancements** → Security, extensibility, collaboration, analy...

131. Security
   Score: 1.000
   Type: single_word
   Line: 630
   Context: - **Building Blocks** → Necessary infrastructure for production.  
- **Tech Quality** → Stability, testing, and performance.  
- **Future Enhancements** → Security, extensibility, collaboration, analy...

132. Backend
   Score: 1.000
   Type: single_word
   Line: 639
   Context: ================================================================================

# Backend README

This document provides instructions for setting up, building, and packaging the backend of the Recal...

133. Windows
   Score: 1.000
   Type: single_word
   Line: 656
   Context:    ```sh
   python -m venv venv
   # On Windows:
   venv\Scripts\activate
   # On macOS/Linux:...

134. Scripts
   Score: 1.000
   Type: single_word
   Line: 657
   Context:    python -m venv venv
   # On Windows:
   venv\Scripts\activate
   # On macOS/Linux:
   source venv/bin/activate...

135. Install
   Score: 1.000
   Type: single_word
   Line: 661
   Context:    source venv/bin/activate
   ```
3. **Install dependencies:**
   ```sh
   pip install -r requirements.txt...

136. Backend
   Score: 1.000
   Type: single_word
   Line: 666
   Context:    ```

## Running the Backend
- To start the backend server (replace `app.py` with your main file if different):
  ```sh...

137. Packaging
   Score: 1.000
   Type: single_word
   Line: 672
   Context:   ```

## Build & Packaging
1. **Freeze dependencies:**
   ```sh...

138. Backend
   Score: 1.000
   Type: single_word
   Line: 697
   Context: ================================================================================

# Recall Backend API

...

139. Backend
   Score: 1.000
   Type: single_word
   Line: 705
   Context: 
"""
Recall Study App Backend
FastAPI application for managing workspaces, files, and quiz generation
"""...

140. Initialize
   Score: 1.000
   Type: single_word
   Line: 738
   Context:     logger.info("Starting up Recall API...")

    # Initialize database service singleton on startup
    logger.info("Initializing database service...")
    db_service = DatabaseService()...

141. Initializing
   Score: 1.000
   Type: single_word
   Line: 739
   Context: 
    # Initialize database service singleton on startup
    logger.info("Initializing database service...")
    db_service = DatabaseService()
    logger.info("Database service initialized successfull...

142. Database
   Score: 1.000
   Type: single_word
   Line: 741
   Context:     logger.info("Initializing database service...")
    db_service = DatabaseService()
    logger.info("Database service initialized successfully")

    yield...

143. Shutdown
   Score: 1.000
   Type: single_word
   Line: 752
   Context:             task.cancel()
        await asyncio.gather(*tasks, return_exceptions=True)
    logger.info("Shutdown complete.")

...

144. Backend
   Score: 1.000
   Type: single_word
   Line: 758
   Context: app = FastAPI(
    title="Recall API",
    description="Backend API for the Recall study application",
    version="1.0.0",
    lifespan=lifespan,...

145. Configure
   Score: 1.000
   Type: single_word
   Line: 763
   Context: )

# Configure CORS for Electron app
app.add_middleware(
    CORSMiddleware,...

146. Electron
   Score: 1.000
   Type: single_word
   Line: 763
   Context: )

# Configure CORS for Electron app
app.add_middleware(
    CORSMiddleware,...

147. Electron
   Score: 1.000
   Type: single_word
   Line: 766
   Context: app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # In production, restrict to your Electron app URL
    allow_credentials=True,
    allow_methods=["*"],...

148. Database
   Score: 1.000
   Type: single_word
   Line: 811
   Context: 
"""
Database connection and session management for FastAPI
"""
...

149. Database
   Score: 1.000
   Type: single_word
   Line: 819
   Context: from pathlib import Path

# Database path configuration
DATABASE_PATH = os.getenv("DATABASE_PATH", str(Path.home() / ".recall" / "recall.db"))
...

150. Convert
   Score: 1.000
   Type: single_word
   Line: 822
   Context: DATABASE_PATH = os.getenv("DATABASE_PATH", str(Path.home() / ".recall" / "recall.db"))

# Convert SQLite path to async URL
DATABASE_URL = f"sqlite+aiosqlite:///{DATABASE_PATH}"
...

151. Dependency
   Score: 1.000
   Type: single_word
   Line: 842
   Context: async def get_db() -> AsyncSession:
    """
    Dependency function to get database session for FastAPI routes
    """
    async with async_session() as session:...

152. Optional
   Score: 1.000
   Type: single_word
   Line: 895
   Context: 
import abc
from typing import Any, Dict, List, Optional

...

153. Abstract
   Score: 1.000
   Type: single_word
   Line: 899
   Context: 
class LLMClient(abc.ABC):
    """Abstract Base Class for all LLM clients."""

    def __init__(self, api_key: Optional[str] = None, **kwargs):...

154. Optional
   Score: 1.000
   Type: single_word
   Line: 901
   Context:     """Abstract Base Class for all LLM clients."""

    def __init__(self, api_key: Optional[str] = None, **kwargs):
        self._api_key = api_key
...

155. Potentially
   Score: 1.000
   Type: single_word
   Line: 916
   Context:         pass

    # Potentially other common methods like embedding generation, etc.

...

156. Optional
   Score: 1.000
   Type: single_word
   Line: 924
   Context: 
import os
from typing import Dict, Any, Optional

...

157. Unknown
   Score: 1.000
   Type: single_word
   Line: 962
   Context:             self._config[provider]["api_key"] = api_key
        else:
            raise ValueError(f"Unknown LLM provider: {provider}")

    def get_api_key(self, provider: str) -> Optional[str]:...

158. Optional
   Score: 1.000
   Type: single_word
   Line: 964
   Context:             raise ValueError(f"Unknown LLM provider: {provider}")

    def get_api_key(self, provider: str) -> Optional[str]:
        """Retrieves the API key for a specific LLM provider."""
        r...

159. Warning
   Score: 1.000
   Type: single_word
   Line: 977
   Context:                 else:
                    print(
                        f"Warning: Attempted to set unknown setting '{key}' for provider '{provider}'. Ignoring."
                    )
        else:...

160. Unknown
   Score: 1.000
   Type: single_word
   Line: 980
   Context:                     )
        else:
            raise ValueError(f"Unknown LLM provider: {provider}")

    def get_llm_config(...

161. Exception
   Score: 1.000
   Type: single_word
   Line: 1010
   Context: ================================================================================

class LLMClientsError(Exception):
    """Base exception for LLM Clients package."""
...

162. Clients
   Score: 1.000
   Type: single_word
   Line: 1011
   Context: 
class LLMClientsError(Exception):
    """Base exception for LLM Clients package."""

    pass...

163. Returns
   Score: 1.000
   Type: single_word
   Line: 1067
   Context:     def get_client(self, provider: str) -> LLMClient:
        """
        Returns a singleton instance of the LLM client for the given provider.
        Initializes the client if it doesn't already ex...

164. Unsupported
   Score: 1.000
   Type: single_word
   Line: 1071
   Context:         """
        if provider not in self._client_map:
            raise InvalidLLMProviderError(f"Unsupported LLM provider: {provider}")

        if provider not in self._clients:...

165. Optional
   Score: 1.000
   Type: single_word
   Line: 1096
   Context: from .utils.retry_mechanism import retry
from .config import get_llm_config_value
from typing import Any, Dict, List, Optional
import asyncio
...

166. Optional
   Score: 1.000
   Type: single_word
   Line: 1104
   Context: 
    def __init__(
        self, api_key: Optional[str] = None, model_name: str = "gemini-pro", **kwargs
    ):
        super().__init__(api_key, **kwargs)...

167. Exception
   Score: 1.000
   Type: single_word
   Line: 1134
   Context:             )
            return response.text
        except Exception as e:
            raise LLMServiceError(f"Gemini text generation failed: {e}")
...

168. Exception
   Score: 1.000
   Type: single_word
   Line: 1166
   Context:             )
            return response.text
        except Exception as e:
            raise LLMServiceError(f"Gemini chat generation failed: {e}")
...

169. Optional
   Score: 1.000
   Type: single_word
   Line: 1180
   Context: from .utils.retry_mechanism import retry
from .config import get_llm_config_value
from typing import Any, Dict, List, Optional
import asyncio
...

170. Optional
   Score: 1.000
   Type: single_word
   Line: 1189
   Context:     def __init__(
        self,
        api_key: Optional[str] = None,
        model_name: str = "llama2",
        host: str = "http://localhost:11434",...

171. Exception
   Score: 1.000
   Type: single_word
   Line: 1217
   Context:             )
            return response["response"]
        except Exception as e:
            raise LLMServiceError(f"Ollama text generation failed: {e}")
...

172. Exception
   Score: 1.000
   Type: single_word
   Line: 1238
   Context:             )
            return response["message"]["content"]
        except Exception as e:
            raise LLMServiceError(f"Ollama chat generation failed: {e}")
...

173. Calculate
   Score: 1.000
   Type: single_word
   Line: 1282
   Context:             now = time.monotonic()
            if now > self._last_refill[key]:
                # Calculate how many tokens should have been added since last refill
                tokens_to_add = (no...

174. Exception
   Score: 1.000
   Type: single_word
   Line: 1330
   Context:     delay: float = 1.0,
    backoff_factor: float = 2.0,
    exceptions: Tuple[Type[Exception], ...] = (LLMServiceError, RateLimitExceededError),
):
    """...

175. Maximum
   Score: 1.000
   Type: single_word
   Line: 1336
   Context: 
    Args:
        attempts: Maximum number of retry attempts.
        delay: Initial delay in seconds between retries.
        backoff_factor: Factor by which the delay increases after each retry....

176. Attempt
   Score: 1.000
   Type: single_word
   Line: 1351
   Context:                 except exceptions as e:
                    logger.warning(
                        f"Attempt {attempt}/{attempts} failed for {func.__name__}: {e}"
                    )
              ...

177. Workspace
   Score: 1.000
   Type: single_word
   Line: 1372
   Context: ================================================================================

from .workspace import Workspace, WorkspaceCreate, WorkspaceUpdate
from .file import FileItem, FileCreate, FileUpdate
...

178. Concept
   Score: 1.000
   Type: single_word
   Line: 1382
   Context: )
from .knowledge_graph import (
    Concept,
    Relationship,
    ConceptFile,...

179. Relationship
   Score: 1.000
   Type: single_word
   Line: 1383
   Context: from .knowledge_graph import (
    Concept,
    Relationship,
    ConceptFile,
    ConceptCreate,...

180. Progress
   Score: 1.000
   Type: single_word
   Line: 1398
   Context:     WorkspaceTopicAnalysis,
)
from .progress import Progress, UserStats

__all__ = [...

181. Workspace
   Score: 1.000
   Type: single_word
   Line: 1401
   Context: 
__all__ = [
    "Workspace",
    "WorkspaceCreate",
    "WorkspaceUpdate",...

182. Concept
   Score: 1.000
   Type: single_word
   Line: 1412
   Context:     "Answer",
    "SpacedRepetitionData",
    "Concept",
    "Relationship",
    "ConceptFile",...

183. Relationship
   Score: 1.000
   Type: single_word
   Line: 1413
   Context:     "SpacedRepetitionData",
    "Concept",
    "Relationship",
    "ConceptFile",
    "ConceptCreate",...

184. Progress
   Score: 1.000
   Type: single_word
   Line: 1427
   Context:     "LearningRecommendationCreate",
    "WorkspaceTopicAnalysis",
    "Progress",
    "UserStats",
]...

185. Optional
   Score: 1.000
   Type: single_word
   Line: 1441
   Context: 
from pydantic import BaseModel, Field
from typing import Optional, List
from datetime import datetime
from enum import Enum...

186. Optional
   Score: 1.000
   Type: single_word
   Line: 1465
   Context: 
class FileCreate(FileBase):
    content: Optional[str] = Field(None, description="File content for text files")

...

187. Optional
   Score: 1.000
   Type: single_word
   Line: 1469
   Context: 
class FileUpdate(BaseModel):
    name: Optional[str] = Field(None, min_length=1, max_length=255)
    path: Optional[str] = Field(None)
    content: Optional[str] = Field(None, description="Updated fi...

188. Optional
   Score: 1.000
   Type: single_word
   Line: 1470
   Context: class FileUpdate(BaseModel):
    name: Optional[str] = Field(None, min_length=1, max_length=255)
    path: Optional[str] = Field(None)
    content: Optional[str] = Field(None, description="Updated fil...

189. Optional
   Score: 1.000
   Type: single_word
   Line: 1471
   Context:     name: Optional[str] = Field(None, min_length=1, max_length=255)
    path: Optional[str] = Field(None)
    content: Optional[str] = Field(None, description="Updated file content")

...

190. Creation
   Score: 1.000
   Type: single_word
   Line: 1476
   Context: class FileItem(FileBase):
    id: int = Field(..., description="Unique file ID")
    created_at: datetime = Field(..., description="Creation timestamp")
    updated_at: datetime = Field(..., descripti...

191. Optional
   Score: 1.000
   Type: single_word
   Line: 1478
   Context:     created_at: datetime = Field(..., description="Creation timestamp")
    updated_at: datetime = Field(..., description="Last update timestamp")
    content_hash: Optional[str] = Field(
        None...

192. Content
   Score: 1.000
   Type: single_word
   Line: 1479
   Context:     updated_at: datetime = Field(..., description="Last update timestamp")
    content_hash: Optional[str] = Field(
        None, description="Content hash for change detection"
    )
    question_cou...

193. Optional
   Score: 1.000
   Type: single_word
   Line: 1484
   Context:         0, description="Number of questions generated from this file"
    )
    last_processed: Optional[datetime] = Field(
        None, description="Last time file was processed for questions"
    )...

194. Optional
   Score: 1.000
   Type: single_word
   Line: 1498
   Context:     incorrect_answers: int
    difficulty_score: float  # 0-1 scale
    last_studied: Optional[datetime]

...

195. Optional
   Score: 1.000
   Type: single_word
   Line: 1505
   Context:     path: str
    type: str  # "file" or "directory"
    children: Optional[List["FileTreeNode"]] = None
    file_info: Optional[FileItem] = None
...

196. Optional
   Score: 1.000
   Type: single_word
   Line: 1506
   Context:     type: str  # "file" or "directory"
    children: Optional[List["FileTreeNode"]] = None
    file_info: Optional[FileItem] = None

...

197. Knowledge Graph
   Score: 1.000
   Type: multi_word
   Line: 1518
   Context: 
"""
Knowledge Graph models for the Recall application
"""
...

198. Knowledge
   Score: 1.000
   Type: single_word
   Line: 1518
   Context: 
"""
Knowledge Graph models for the Recall application
"""
...

199. Optional
   Score: 1.000
   Type: single_word
   Line: 1522
   Context: 
from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from datetime import datetime
import uuid...

200. Concept
   Score: 1.000
   Type: single_word
   Line: 1528
   Context: 
class ConceptBase(BaseModel):
    name: str = Field(..., description="Concept name")
    description: Optional[str] = Field(None, description="Concept description")
...

