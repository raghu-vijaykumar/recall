================================================================================
FLATTENED WORKSPACE FILE
Generated from: .
Generated at: C:\workspace\recall\flattened_workspace.txt
================================================================================

================================================================================
FILE: .gitignore
================================================================================

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.*
!.env.example

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist
.output

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Sveltekit cache directory
.svelte-kit/

# vitepress build output
**/.vitepress/dist

# vitepress cache directory
**/.vitepress/cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# Firebase cache directory
.firebase/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v3
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/sdks
!.yarn/versions

# Vite files
vite.config.js.timestamp-*
vite.config.ts.timestamp-*
.vite/
*.pyc
__pycache__/



backend/.venv/
backend/.venv-build/
backend/dist/
backend/build/
backend/recall-backend.spec
backend/.coverage
site/

================================================================================
FILE: .vscode/launch.json
================================================================================

{
  "version": "0.2.0",
  "compounds": [
    {
      "name": "Main + renderer",
      "configurations": ["Main", "Renderer"],
      "stopAll": true
    }
  ],
  "configurations": [
    {
      "name": "Renderer",
      "port": 9222,
      "request": "attach",
      "type": "chrome",
      "webRoot": "${workspaceFolder}"
    },
    {
      "name": "Main",
      "type": "node",
      "request": "launch",
      "cwd": "${workspaceFolder}",
      "runtimeExecutable": "${workspaceFolder}/node_modules/.bin/electron",
      "windows": {
        "runtimeExecutable": "${workspaceFolder}/node_modules/.bin/electron.cmd"
      },
      "args": [".", "--remote-debugging-port=9222"],
      "outputCapture": "std",
      "console": "integratedTerminal"
    }
  ]
}


================================================================================
FILE: .vscode/tasks.json
================================================================================

{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Build and Start Recall",
      "type": "shell",
      "command": "cmd.exe",
      "args": ["/c", "npm run build && npm run start"],
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Build and Make",
      "type": "shell",
      "command": "cmd.exe",
      "args": ["/c", "npm run build && npm run make"],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Start Recall",
      "type": "shell",
      "command": "cmd.exe",
      "args": ["/c", "npm run start"],
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Clean, Rebuild, and Make",
      "type": "shell",
      "command": "npm run clean-rebuild-make",
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    },
    {
      "label": "Clean All, Rebuild, Make, and Run",
      "type": "shell",
      "command": "npm run full-clean-build-run",
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": []
    }
  ]
}


================================================================================
FILE: Makefile
================================================================================

.PHONY: help setup build dev dist test clean start install build-frontend build-electron build-backend-pyinstaller wiki-build wiki-serve
.ONESHELL:

# Default target
help:
	@echo "Available commands:"
	@echo "  setup      - Install dependencies and set up Python virtual environment"
	@echo "  build      - Build the application (runs tests first)"
	@echo "  dev        - Run in development mode"
	@echo "  dist       - Create distributable package"
	@echo "  test       - Run backend tests only"
	@echo "  clean      - Clean build artifacts"
	@echo "  start      - Start development with process cleanup"
	@echo "  install    - Full clean, rebuild, and install"
	@echo "  wiki-build - Build the wiki documentation site"
	@echo "  wiki-serve - Serve the wiki documentation site locally"
	@echo "  help       - Show this help message"

# Setup dependencies
setup:
	@echo off
	setlocal enabledelayedexpansion
	for /f %%i in ('powershell -command "Get-Date -UFormat %%s"') do set start=%%i
	npm install
	cd backend && python -m venv .venv
	cd backend && .venv\Scripts\python.exe -m pip install -r requirements.txt
	cd backend && .venv\Scripts\python.exe -m pip install mkdocs
	for /f %%i in ('powershell -command "Get-Date -UFormat %%s"') do set end=%%i
	set /a duration=!end! - !start!
	set /a minutes=!duration! / 60
	set /a seconds=!duration! % 60
	echo setup took !minutes! minutes and !seconds! seconds

# Build the application
build: test kill
	@echo off
	setlocal enabledelayedexpansion
	for /f %%i in ('powershell -command "Get-Date -UFormat %%s"') do set start=%%i
	make build-frontend
	make build-electron
	make build-backend-pyinstaller
	npx copyfiles -u 1 "frontend/components/**/*.html" dist/frontend
	npx copyfiles -u 1 "backend/dist/recall-backend.exe" dist/backend
	for /f %%i in ('powershell -command "Get-Date -UFormat %%s"') do set end=%%i
	set /a duration=!end! - !start!
	set /a minutes=!duration! / 60
	set /a seconds=!duration! % 60
	echo build took !minutes! minutes and !seconds! seconds

# Run in development mode
dev:
	@echo off
	setlocal enabledelayedexpansion
	for /f %%i in ('powershell -command "Get-Date -UFormat %%s"') do set start=%%i
	@taskkill /IM recall-backend.exe /F >nul 2>&1 || echo recall-backend.exe not running
	npx concurrently "npm run dev:frontend" "make build-electron && npx electron-forge start"
	for /f %%i in ('powershell -command "Get-Date -UFormat %%s"') do set end=%%i
	set /a duration=!end! - !start!
	set /a minutes=!duration! / 60
	set /a seconds=!duration! % 60
	echo dev took !minutes! minutes and !seconds! seconds

# Create distributable package
dist: clean build
	@echo off
	setlocal enabledelayedexpansion
	for /f %%i in ('powershell -command "Get-Date -UFormat %%s"') do set start=%%i
	npx electron-forge make
	for /f %%i in ('powershell -command "Get-Date -UFormat %%s"') do set end=%%i
	set /a duration=!end! - !start!
	set /a minutes=!duration! / 60
	set /a seconds=!duration! % 60
	echo dist took !minutes! minutes and !seconds! seconds

# Run tests only
test:
	make test-backend
	make test-frontend

# Run backend tests only
test-backend:
ifdef BYPASS_COVERAGE
	cd backend && .\.venv\Scripts\activate.bat && set PYTHONPATH=%cd% && python -m pytest tests/ -v
else
	cd backend && .\.venv\Scripts\activate.bat && set PYTHONPATH=%cd% && python -m pytest --cov=app --cov-fail-under=69 tests/ -v
endif
# Run frontend tests only
test-frontend:
ifdef BYPASS_COVERAGE
	npm run test:frontend
else
	npm run test:frontend:coverage
endif

# Build frontend
build-frontend:
	npx vite build

# Build electron
build-electron:
	npx tsc -p tsconfig.electron.json

# Build backend with PyInstaller
build-backend-pyinstaller:
	cd backend && python -m venv .venv-build && .\.venv-build\Scripts\python.exe -m ensurepip --default-pip && .\.venv-build\Scripts\pip.exe install pyinstaller && .\.venv-build\Scripts\pip.exe install -r requirements.txt && .\.venv-build\Scripts\python.exe -m PyInstaller --onefile --name recall-backend main.py --hidden-import uvicorn --hidden-import aiosqlite --collect-all uvicorn --add-data "app/static;app/static" --add-data "migrations;migrations"

# Clean build artifacts
clean:
	npx rimraf dist
	npx rimraf backend/dist
	npx rimraf backend/build
	npx rimraf backend/.venv-build

# Start development with cleanup
start: build
	@echo Starting Electron Forge...
	npx electron-forge start

# Start backend only
start-backend:
	@echo Starting backend server...
	cd backend && .\.venv\Scripts\activate.bat && set FLASK_DEBUG=1 && set PYTHONPATH=%cd% && python main.py

# Full clean, rebuild, and install
install: dist
	@echo Removing old app data...
	@npx rimraf "C:\Users\%USERNAME%\AppData\Local\recall"
	@npx rimraf "C:\Users\%USERNAME%\AppData\Roaming\recall"
	@echo Build successful. Launching installer...
	@start "" "out\make\squirrel.windows\x64\recall-1.0.0 Setup.exe"


kill:
	@echo Killing processes...
	-@taskkill /IM recall.exe /F >nul 2>&1
	-@taskkill /IM electron.exe /F >nul 2>&1
	-@taskkill /IM recall-backend.exe /F >nul 2>&1
	-@for %%p in (8000 8001 8002) do ( \
		for /f "tokens=5" %%a in ('netstat -ano ^| findstr :%%p') do ( \
			taskkill /PID %%a /F >nul 2>&1 \
		) \
	)
	@echo Process cleanup complete

# Build wiki documentation site
wiki-build:
	@echo "Building wiki documentation..."
	cd backend && .\.venv\Scripts\activate.bat && cd .. && mkdocs build

# Serve wiki documentation site locally
wiki-serve:
	@echo "Serving wiki documentation on http://127.0.0.1:8000"
	@echo "Press Ctrl+C to stop the server"
	cd backend && .\.venv\Scripts\activate.bat && cd .. && mkdocs serve --dev-addr=127.0.0.1:8000


================================================================================
FILE: README.md
================================================================================

# Recall

Recall is an application designed to help users learn and retain information from their files by generating quizzes and tracking progress.

## Features

*   **Workspace Management:** Organize your files into workspaces for focused learning.
*   **File Analysis:** Analyze various file types to extract key information.
*   **Quiz Generation:** Automatically generate quizzes based on the content of your files.
*   **Progress Tracking:** Monitor your learning progress and identify areas for improvement.

## Getting Started

### Prerequisites

*   Node.js (for frontend and Electron)
*   Python 3.x (for backend)
*   npm or yarn (for frontend dependencies)
*   pip (for backend dependencies)

### Installation

1.  **Clone the repository:**
    ```bash
    git clone https://github.com/your-repo/recall.git
    cd recall
    ```

2.  **Backend Setup:**
    ```bash
    cd backend
    pip install -r requirements.txt
    python main.py
    ```

3.  **Frontend Setup:**
    ```bash
    cd ..
    npm install
    npm run dev
    ```

## Project Structure

*   [`backend/`](backend/): Contains the Python Flask backend application.
*   [`electron/`](electron/): Contains the Electron-specific code for the desktop application.
*   [`frontend/`](frontend/): Contains the React/TypeScript frontend application.
*   [`database/`](database/): Contains database schema and migration scripts.
*   [`wiki/`](wiki/): Contains documentation on building and packaging.
*   [`TODO.md`](TODO.md): A list of improvements and future tasks.

## Contributing

We welcome contributions! Please see our `TODO.md` for areas of improvement and feel free to submit pull requests.

## License

This project is licensed under the MIT License.

================================================================================
FILE: TODO.md
================================================================================

# 📌 Project Improvements and TODOs

This document categorizes the planned features, improvements, and ideas for the app into **Core Features**, **Building Blocks**, **Tech Quality**, and **Future Enhancements**.  
Each section includes short explanations for clarity.

---

## 🟢 Core Features (User-facing functionality)

These are the features that directly add value to users and shape the main experience of the app.

- [ ] **Improve Quiz Generation** – Refine the algorithm to produce diverse and challenging quizzes.  
- [ ] **Advanced Quiz Generation (LLM-powered)** – Use LLMs to create dynamic Q&A, spaced repetition, weak-area analysis, and voice/flashcard modes.  
- [ ] **Knowledge Graph in Progress View** – Build a graph (RAG-based) to map relationships between studied topics and suggest related material.  
- [ ] **File Tree & Tabbed Views** – Add a file explorer with tab support for recently opened documents.  
- [ ] **Rich Content Display** – Embed URLs, YouTube, images, and GIFs (similar to Notion/Jupyter).  
- [ ] **Basic File Operations** – Enable create, rename, move, copy, and delete for files/folders.  
- [ ] **Expanded File Format Support** – Add support for DOCX, PDFs, and other popular study materials.  
- [ ] **Convert Text to Rich View** – Let users upgrade plain text into formatted, interactive content.  
- [ ] **Advanced Search** – Provide powerful search across files, tags, and workspaces.  
- [ ] **Collaboration (Future)** – Real-time multi-user editing and workspace sharing.  
- [ ] **Version Control Integration (Future)** – Pull content directly from Git repositories.  
- [ ] **Customizable Quiz Settings (Future)** – Allow control over quiz difficulty, types, and formats.  
- [ ] **LLM Research Chat Mode (Future)** – Summarize, condense, and document material via LLM chat.  
- [ ] **Curated Content Marketplace (Future)** – Users can import curated subjects or curricula.  

---

## 🟡 Building Blocks / Overhead (Infrastructure)

These are necessary for a production-grade desktop application but don’t directly add user-facing value.

- [ ] **User Authentication** – Enable personalized workspaces and progress tracking.  
- [ ] **Automatic App Updates** – Add seamless update and download mechanisms.  
- [ ] **Automatic Database Migrations** – Handle schema changes safely without data loss.  
- [ ] **UI/UX Enhancements** – Improve polish with splash screens, onboarding flows, and better defaults.  

---

## 🔵 Tech Quality & Maintenance

Improvements to stability, maintainability, and performance.

- [ ] **Robust Error Handling** – Implement consistent error capture across frontend and backend.  
- [ ] **Code Refactoring** – Improve readability, maintainability, and modularity of the codebase.  
- [ ] **Performance Optimization** – Scale to handle large workspaces and heavy datasets smoothly.  
- [ ] **Automated Testing** – Expand test coverage (unit, integration, end-to-end).  

---

## 💡 Future Enhancements & Ideas

These are forward-looking ideas that can elevate the app significantly over time.

### 🔐 Security & Privacy
- [ ] **Encryption at Rest & In Transit** – Secure local database and synced data.  
- [ ] **Role-Based Access Control (RBAC)** – Permissions for collaborative workspaces.  
- [ ] **Audit Logging** – Track activity for debugging and security compliance.  
- [ ] **End-to-End Encryption (Optional)** – Full privacy for sensitive study data.  
- [ ] **Local-Only Mode** – Allow offline usage without cloud sync.  
- [ ] **Anonymized Analytics** – Opt-in telemetry with strong privacy safeguards.  

### ⚙️ Developer Productivity
- [ ] **CI/CD Pipeline Setup** – Automated builds, tests, and releases.  
- [ ] **Code Quality Gates** – Enforce linting, typing, and static analysis in PRs.  
- [ ] **Developer Documentation** – Add contributor guides, API docs, and architecture diagrams.  
- [ ] **Modular Architecture** – Prepare the codebase for plugins and extensions.  
- [ ] **Internationalization (i18n)** – Multi-language support for UI and quizzes.  
- [ ] **Theming/Customization** – Allow users and developers to style and extend UI.  

### 📊 Analytics & Observability
- [ ] **In-App Telemetry (Opt-in)** – Collect usage patterns to guide improvements.  
- [ ] **Error/Crash Reporting** – Integrate tools like Sentry or Bugsnag.  
- [ ] **Performance Metrics** – Track latency, memory use, and database health.  

### 🌐 Extensibility
- [ ] **Plugin/Extension Framework** – Let the community build new quiz types and content integrations.  
- [ ] **API/SDK for Developers** – Reuse the core quiz engine in other apps or scripts.  

### ☁️ Cross-Platform & Sync
- [ ] **Sync Across Devices** – Cloud sync for user data.  
- [ ] **Offline-First Support** – Ensure the app works fully offline with later sync.  
- [ ] **Backup & Restore** – Local export/import or cloud backups.  
- [ ] **Mobile/Desktop Sync** – Seamless handoff between devices.  
- [ ] **Progressive Web App (PWA)** – Lightweight browser-based version.  
- [ ] **Export/Import Workspaces** – Share study content easily.  

### 🧠 Knowledge & Learning Enhancements
- [ ] **Adaptive Learning Paths** – Adjust quizzes/content automatically based on progress.  
- [ ] **Progress Insights Dashboard** – Visualize weak areas, time spent, and learning curves.  
- [ ] **Gamification** – Add badges, streaks, or XP to motivate learners.  
- [ ] **Recommendation Engine** – Suggest next topics using ML models.  

### 🗂 Data Management
- [ ] **Tagging & Metadata** – Add flexible categorization for notes and media.  
- [ ] **Archive/Trash System** – Allow safe recovery of deleted items.  

### 📝 Versioning & History
- [ ] **Versioning for Notes** – Track all changes with rollback support.  
- [ ] **Versioning for Media** – Keep history of attached files like images and PDFs.  
- [ ] **Change History / Diff View** – Visualize differences between versions.  
- [ ] **Version Metadata** – Record author, timestamp, and reason for changes.  
- [ ] **Auto-Save & Drafts** – Save user work continuously with revert-to-last option.  
- [ ] **Conflict Resolution** – Handle version conflicts in multi-device or collaborative setups.  

### 🌍 Ecosystem & Community
- [ ] **Community-Shared Workspaces** – Enable sharing of flashcards or curated content.  
- [ ] **Import from External Tools** – Support importing from Notion, Obsidian, Google Docs, etc.  
- [ ] **Marketplace for Add-ons** – Distribute extensions, new quiz formats, and study packs.  

---

# ✅ Summary

- **Core Features** → What makes the app useful.  
- **Building Blocks** → Necessary infrastructure for production.  
- **Tech Quality** → Stability, testing, and performance.  
- **Future Enhancements** → Security, extensibility, collaboration, analytics, sync, and community ecosystem.  

This structure keeps the TODO list actionable, while also showing a **visionary path forward**.


================================================================================
FILE: backend/README.md
================================================================================

# Backend README

This document provides instructions for setting up, building, and packaging the backend of the Recall project.

## Prerequisites
- Python 3.8 or higher
- pip (Python package manager)

## Setup
1. **Clone the repository:**
   ```sh
   git clone https://github.com/raghu-vijaykumar/recall.git
   cd recall/backend
   ```
2. **Create a virtual environment (recommended):**
   ```sh
   python -m venv venv
   # On Windows:
   venv\Scripts\activate
   # On macOS/Linux:
   source venv/bin/activate
   ```
3. **Install dependencies:**
   ```sh
   pip install -r requirements.txt
   ```

## Running the Backend
- To start the backend server (replace `app.py` with your main file if different):
  ```sh
  python app.py
  ```

## Build & Packaging
1. **Freeze dependencies:**
   ```sh
   pip freeze > requirements.txt
   ```
2. **Create a distributable package:**
   - If using setuptools, ensure you have a `setup.py` file. Then run:
     ```sh
     python setup.py sdist bdist_wheel
     ```
   - The built packages will be in the `dist/` directory.

3. **Distribute or deploy:**
   - Share the `requirements.txt` and your source code, or
   - Upload the package to PyPI (if public) or your private repository.

## Notes
- Update this README with any additional environment variables, configuration, or special instructions as your backend evolves.
- For troubleshooting, consult the error messages or open an issue in the repository.


================================================================================
FILE: backend/app/__init__.py
================================================================================

# Recall Backend API


================================================================================
FILE: backend/app/app.py
================================================================================

"""
Recall Study App Backend
FastAPI application for managing workspaces, files, and quiz generation
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
import uvicorn
import os
import sys
import asyncio
import logging
from pathlib import Path
from contextlib import asynccontextmanager

from app.routes.workspaces import router as workspaces_router
from app.routes.files import router as files_router
from app.routes.quiz import router as quiz_router
from app.routes.progress import router as progress_router
from app.routes.search import router as search_router
from app.routes.knowledge_graph import router as knowledge_graph_router
from app.routes.quiz_improvements import router as quiz_improvements_router
from app.routes.workspace_topics import router as workspace_topics_router
from app.services.database import DatabaseService

logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Handle application startup and shutdown events."""
    logger.info("Starting up Recall API...")

    # Initialize database service singleton on startup
    logger.info("Initializing database service...")
    db_service = DatabaseService()
    logger.info("Database service initialized successfully")

    yield
    logger.info("Shutting down Recall API...")
    # Cancel all pending tasks to ensure clean shutdown
    tasks = [t for t in asyncio.all_tasks() if t is not asyncio.current_task()]
    if tasks:
        logger.info(f"Cancelling {len(tasks)} pending tasks...")
        for task in tasks:
            task.cancel()
        await asyncio.gather(*tasks, return_exceptions=True)
    logger.info("Shutdown complete.")


# Create FastAPI app
app = FastAPI(
    title="Recall API",
    description="Backend API for the Recall study application",
    version="1.0.0",
    lifespan=lifespan,
)

# Configure CORS for Electron app
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # In production, restrict to your Electron app URL
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Mount static files directory for file serving
if getattr(sys, "frozen", False) and hasattr(sys, "_MEIPASS"):
    # Running in a PyInstaller bundle
    static_dir = Path(sys._MEIPASS) / "static"
else:
    # Running in normal Python environment
    static_dir = Path(__file__).parent / "static"

static_dir.mkdir(exist_ok=True)
app.mount("/static", StaticFiles(directory=str(static_dir)), name="static")

# Include routers
app.include_router(workspaces_router, prefix="/api/workspaces", tags=["workspaces"])
app.include_router(files_router, prefix="/api/files", tags=["files"])
app.include_router(quiz_router, prefix="/api/quiz", tags=["quiz"])
app.include_router(progress_router, prefix="/api/progress", tags=["progress"])
app.include_router(search_router, prefix="/api/search", tags=["search"])
app.include_router(knowledge_graph_router, tags=["knowledge-graph"])
app.include_router(quiz_improvements_router, tags=["quiz-improvements"])
app.include_router(workspace_topics_router, tags=["workspace-topics"])


@app.get("/")
async def root():
    """Root endpoint"""
    return {"message": "Recall API is running", "version": "1.0.0"}


@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy"}


================================================================================
FILE: backend/app/database.py
================================================================================

"""
Database connection and session management for FastAPI
"""

from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
import os
from pathlib import Path

# Database path configuration
DATABASE_PATH = os.getenv("DATABASE_PATH", str(Path.home() / ".recall" / "recall.db"))

# Convert SQLite path to async URL
DATABASE_URL = f"sqlite+aiosqlite:///{DATABASE_PATH}"

# Create async engine
engine = create_async_engine(
    DATABASE_URL,
    echo=False,  # Set to True for SQL query logging
    future=True,
)

# Create async session factory
async_session = sessionmaker(
    bind=engine,
    class_=AsyncSession,
    expire_on_commit=False,
)


async def get_db() -> AsyncSession:
    """
    Dependency function to get database session for FastAPI routes
    """
    async with async_session() as session:
        try:
            yield session
        finally:
            await session.close()


================================================================================
FILE: backend/app/llm_clients/__init__.py
================================================================================

from .base import LLMClient
from .gemini import GeminiClient
from .ollama import OllamaClient
from .factory import llm_client_factory
from .config import (
    llm_config,
    set_llm_api_key,
    set_llm_provider_settings,
    get_llm_config_value,
)
from .exceptions import (
    LLMClientsError,
    APIKeyError,
    RateLimitExceededError,
    LLMServiceError,
    InvalidLLMProviderError,
)

__all__ = [
    "LLMClient",
    "GeminiClient",
    "OllamaClient",
    "llm_client_factory",
    "llm_config",
    "set_llm_api_key",
    "set_llm_provider_settings",
    "get_llm_config_value",
    "LLMClientsError",
    "APIKeyError",
    "RateLimitExceededError",
    "LLMServiceError",
    "InvalidLLMProviderError",
]


================================================================================
FILE: backend/app/llm_clients/base.py
================================================================================

import abc
from typing import Any, Dict, List, Optional


class LLMClient(abc.ABC):
    """Abstract Base Class for all LLM clients."""

    def __init__(self, api_key: Optional[str] = None, **kwargs):
        self._api_key = api_key

    @abc.abstractmethod
    async def generate_text(self, prompt: str, **kwargs) -> str:
        """Generates text based on a given prompt."""
        pass

    @abc.abstractmethod
    async def generate_chat_response(
        self, messages: List[Dict[str, str]], **kwargs
    ) -> str:
        """Generates a chat response based on a list of messages."""
        pass

    # Potentially other common methods like embedding generation, etc.


================================================================================
FILE: backend/app/llm_clients/config.py
================================================================================

import os
from typing import Dict, Any, Optional


class LLMConfig:
    _instance = None
    _config: Dict[str, Any] = {
        "gemini": {
            "api_key": os.getenv("GEMINI_API_KEY"),
            "model_name": "gemini-pro",
            "rate_limit_rate": 10,
            "rate_limit_period": 60,
            "retry_attempts": 3,
            "retry_delay": 1.0,
            "retry_backoff_factor": 2.0,
        },
        "ollama": {
            "api_key": None,  # Ollama typically doesn't use an API key in the same way
            "model_name": "llama2",
            "host": os.getenv("OLLAMA_HOST", "http://localhost:11434"),
            "rate_limit_rate": 20,
            "rate_limit_period": 60,
            "retry_attempts": 3,
            "retry_delay": 1.0,
            "retry_backoff_factor": 2.0,
        },
        # Add other LLMs here
    }

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(LLMConfig, cls).__new__(cls)
        return cls._instance

    def set_api_key(self, provider: str, api_key: str):
        """Sets the API key for a specific LLM provider."""
        if provider in self._config:
            self._config[provider]["api_key"] = api_key
        else:
            raise ValueError(f"Unknown LLM provider: {provider}")

    def get_api_key(self, provider: str) -> Optional[str]:
        """Retrieves the API key for a specific LLM provider."""
        return self._config.get(provider, {}).get("api_key")

    def set_llm_settings(self, provider: str, settings: Dict[str, Any]):
        """Sets multiple settings for a specific LLM provider."""
        if provider in self._config:
            # Only update known settings to prevent arbitrary config injection
            for key, value in settings.items():
                if key in self._config[provider]:  # Ensure key exists in default config
                    self._config[provider][key] = value
                else:
                    print(
                        f"Warning: Attempted to set unknown setting '{key}' for provider '{provider}'. Ignoring."
                    )
        else:
            raise ValueError(f"Unknown LLM provider: {provider}")

    def get_llm_config(
        self, provider: str, setting_name: str, default: Any = None
    ) -> Any:
        """Retrieves a specific setting for an LLM provider."""
        return self._config.get(provider, {}).get(setting_name, default)


# Global instance for easy access
llm_config = LLMConfig()


# Helper function for external access
def get_llm_config_value(provider: str, setting_name: str, default: Any = None) -> Any:
    return llm_config.get_llm_config(provider, setting_name, default)


def set_llm_api_key(provider: str, api_key: str):
    llm_config.set_api_key(provider, api_key)


def set_llm_provider_settings(provider: str, settings: Dict[str, Any]):
    llm_config.set_llm_settings(provider, settings)


================================================================================
FILE: backend/app/llm_clients/exceptions.py
================================================================================

class LLMClientsError(Exception):
    """Base exception for LLM Clients package."""

    pass


class APIKeyError(LLMClientsError):
    """Raised when an API key is missing or invalid."""

    pass


class RateLimitExceededError(LLMClientsError):
    """Raised when a rate limit is exceeded."""

    pass


class LLMServiceError(LLMClientsError):
    """Raised for errors originating from the LLM service itself."""

    pass


class InvalidLLMProviderError(LLMClientsError):
    """Raised when an unsupported LLM provider is requested."""

    pass


================================================================================
FILE: backend/app/llm_clients/factory.py
================================================================================

from typing import Dict, Type
from .base import LLMClient
from .gemini import GeminiClient
from .ollama import OllamaClient
from .exceptions import InvalidLLMProviderError
from .config import llm_config  # Import the global config instance


class LLMClientFactory:
    _instance = None
    _clients: Dict[str, LLMClient] = {}
    _client_map: Dict[str, Type[LLMClient]] = {
        "gemini": GeminiClient,
        "ollama": OllamaClient,
    }

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super(LLMClientFactory, cls).__new__(cls)
        return cls._instance

    def get_client(self, provider: str) -> LLMClient:
        """
        Returns a singleton instance of the LLM client for the given provider.
        Initializes the client if it doesn't already exist.
        """
        if provider not in self._client_map:
            raise InvalidLLMProviderError(f"Unsupported LLM provider: {provider}")

        if provider not in self._clients:
            client_class = self._client_map[provider]
            api_key = llm_config.get_api_key(provider)
            # Pass all relevant config settings to the client
            provider_settings = llm_config._config.get(provider, {})
            self._clients[provider] = client_class(api_key=api_key, **provider_settings)
        return self._clients[provider]


# Global instance for easy access
llm_client_factory = LLMClientFactory()


================================================================================
FILE: backend/app/llm_clients/gemini.py
================================================================================

import google.generativeai as genai
from .base import LLMClient
from .exceptions import APIKeyError, LLMServiceError, RateLimitExceededError
from .utils.rate_limiter import RateLimiter
from .utils.retry_mechanism import retry
from .config import get_llm_config_value
from typing import Any, Dict, List, Optional
import asyncio


class GeminiClient(LLMClient):
    """Concrete implementation of LLMClient for Google Gemini."""

    def __init__(
        self, api_key: Optional[str] = None, model_name: str = "gemini-pro", **kwargs
    ):
        super().__init__(api_key, **kwargs)
        if not self._api_key:
            raise APIKeyError("Gemini API key is required.")
        genai.configure(api_key=self._api_key)
        self._model = genai.GenerativeModel(model_name)
        self._generation_config = kwargs.get("generation_config", {})
        self._safety_settings = kwargs.get("safety_settings", [])

    @retry(
        attempts=get_llm_config_value("gemini", "retry_attempts", 3),
        delay=get_llm_config_value("gemini", "retry_delay", 1.0),
        backoff_factor=get_llm_config_value("gemini", "retry_backoff_factor", 2.0),
        exceptions=(LLMServiceError, RateLimitExceededError),
    )
    @RateLimiter(
        rate=get_llm_config_value("gemini", "rate_limit_rate", 10),
        period=get_llm_config_value("gemini", "rate_limit_period", 60),
    )
    async def generate_text(self, prompt: str, **kwargs) -> str:
        try:
            response = await asyncio.to_thread(
                self._model.generate_content,
                prompt,
                generation_config=self._generation_config,
                safety_settings=self._safety_settings,
                **kwargs,
            )
            return response.text
        except Exception as e:
            raise LLMServiceError(f"Gemini text generation failed: {e}")

    @retry(
        attempts=get_llm_config_value("gemini", "retry_attempts", 3),
        delay=get_llm_config_value("gemini", "retry_delay", 1.0),
        backoff_factor=get_llm_config_value("gemini", "retry_backoff_factor", 2.0),
        exceptions=(LLMServiceError, RateLimitExceededError),
    )
    @RateLimiter(
        rate=get_llm_config_value("gemini", "rate_limit_rate", 10),
        period=get_llm_config_value("gemini", "rate_limit_period", 60),
    )
    async def generate_chat_response(
        self, messages: List[Dict[str, str]], **kwargs
    ) -> str:
        try:
            # Gemini's chat expects roles 'user' and 'model'
            formatted_messages = []
            for msg in messages:
                role = "user" if msg["role"] == "user" else "model"
                formatted_messages.append({"role": role, "parts": [msg["content"]]})

            chat = self._model.start_chat(history=formatted_messages[:-1])
            response = await asyncio.to_thread(
                chat.send_message,
                formatted_messages[-1]["parts"],  # Send only the last message
                generation_config=self._generation_config,
                safety_settings=self._safety_settings,
                **kwargs,
            )
            return response.text
        except Exception as e:
            raise LLMServiceError(f"Gemini chat generation failed: {e}")


================================================================================
FILE: backend/app/llm_clients/ollama.py
================================================================================

import ollama
from .base import LLMClient
from .exceptions import LLMServiceError, RateLimitExceededError
from .utils.rate_limiter import RateLimiter
from .utils.retry_mechanism import retry
from .config import get_llm_config_value
from typing import Any, Dict, List, Optional
import asyncio


class OllamaClient(LLMClient):
    """Concrete implementation of LLMClient for Ollama."""

    def __init__(
        self,
        api_key: Optional[str] = None,
        model_name: str = "llama2",
        host: str = "http://localhost:11434",
        **kwargs,
    ):
        super().__init__(
            api_key, **kwargs
        )  # API key might not be directly used by Ollama, but kept for consistency
        self._model_name = model_name
        self._host = host
        self._client = ollama.Client(host=self._host)  # Ollama client instance

    @retry(
        attempts=get_llm_config_value("ollama", "retry_attempts", 3),
        delay=get_llm_config_value("ollama", "retry_delay", 1.0),
        backoff_factor=get_llm_config_value("ollama", "retry_backoff_factor", 2.0),
        exceptions=(LLMServiceError, RateLimitExceededError),
    )
    @RateLimiter(
        rate=get_llm_config_value("ollama", "rate_limit_rate", 20),
        period=get_llm_config_value("ollama", "rate_limit_period", 60),
    )
    async def generate_text(self, prompt: str, **kwargs) -> str:
        try:
            response = await asyncio.to_thread(
                self._client.generate, model=self._model_name, prompt=prompt, **kwargs
            )
            return response["response"]
        except Exception as e:
            raise LLMServiceError(f"Ollama text generation failed: {e}")

    @retry(
        attempts=get_llm_config_value("ollama", "retry_attempts", 3),
        delay=get_llm_config_value("ollama", "retry_delay", 1.0),
        backoff_factor=get_llm_config_value("ollama", "retry_backoff_factor", 2.0),
        exceptions=(LLMServiceError, RateLimitExceededError),
    )
    @RateLimiter(
        rate=get_llm_config_value("ollama", "rate_limit_rate", 20),
        period=get_llm_config_value("ollama", "rate_limit_period", 60),
    )
    async def generate_chat_response(
        self, messages: List[Dict[str, str]], **kwargs
    ) -> str:
        try:
            response = await asyncio.to_thread(
                self._client.chat, model=self._model_name, messages=messages, **kwargs
            )
            return response["message"]["content"]
        except Exception as e:
            raise LLMServiceError(f"Ollama chat generation failed: {e}")


================================================================================
FILE: backend/app/llm_clients/utils/__init__.py
================================================================================

# llm_clients/utils/__init__.py


================================================================================
FILE: backend/app/llm_clients/utils/rate_limiter.py
================================================================================

import asyncio
import time
from collections import defaultdict
from functools import wraps
from ..exceptions import RateLimitExceededError
import logging

logger = logging.getLogger(__name__)


class RateLimiter:
    """
    A simple asynchronous rate limiter using a token bucket algorithm.
    Allows 'rate' calls per 'period' seconds.
    """

    _tokens = defaultdict(float)
    _last_refill = defaultdict(float)
    _lock = asyncio.Lock()  # For thread-safe token management

    def __init__(self, rate: int, period: int = 60):
        self.rate = rate
        self.period = period
        self.interval = period / rate  # Time between tokens

    async def _refill_tokens(self, key: str):
        async with self._lock:
            now = time.monotonic()
            if now > self._last_refill[key]:
                # Calculate how many tokens should have been added since last refill
                tokens_to_add = (now - self._last_refill[key]) / self.interval
                self._tokens[key] = min(self.rate, self._tokens[key] + tokens_to_add)
                self._last_refill[key] = now

    async def wait_for_token(self, key: str):
        while True:
            await self._refill_tokens(key)
            async with self._lock:
                if self._tokens[key] >= 1:
                    self._tokens[key] -= 1
                    return
            await asyncio.sleep(self.interval / 2)  # Wait a bit before checking again

    def __call__(self, func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            # A unique key for this rate limit, e.g., based on LLM provider
            # For simplicity, let's assume a single global rate limit for now,
            # or a key passed in kwargs.
            # A more robust solution would derive the key from the client instance or config.
            rate_limit_key = kwargs.pop("rate_limit_key", "default")
            logger.debug(f"Waiting for token for key: {rate_limit_key}")
            await self.wait_for_token(rate_limit_key)
            logger.debug(f"Token acquired for key: {rate_limit_key}")
            return await func(*args, **kwargs)

        return wrapper


================================================================================
FILE: backend/app/llm_clients/utils/retry_mechanism.py
================================================================================

import asyncio
import logging
from functools import wraps
from typing import Callable, Tuple, Type

from ..exceptions import LLMServiceError, RateLimitExceededError

logger = logging.getLogger(__name__)


def retry(
    attempts: int = 3,
    delay: float = 1.0,
    backoff_factor: float = 2.0,
    exceptions: Tuple[Type[Exception], ...] = (LLMServiceError, RateLimitExceededError),
):
    """
    An asynchronous retry decorator with exponential backoff.

    Args:
        attempts: Maximum number of retry attempts.
        delay: Initial delay in seconds between retries.
        backoff_factor: Factor by which the delay increases after each retry.
        exceptions: A tuple of exception types to catch and retry on.
    """

    def decorator(func: Callable):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            current_delay = delay
            for attempt in range(1, attempts + 1):
                try:
                    return await func(*args, **kwargs)
                except exceptions as e:
                    logger.warning(
                        f"Attempt {attempt}/{attempts} failed for {func.__name__}: {e}"
                    )
                    if attempt < attempts:
                        logger.info(f"Retrying in {current_delay:.2f} seconds...")
                        await asyncio.sleep(current_delay)
                        current_delay *= backoff_factor
                    else:
                        logger.error(
                            f"All {attempts} attempts failed for {func.__name__}."
                        )
                        raise  # Re-raise the last exception if all attempts fail

        return wrapper

    return decorator


================================================================================
FILE: backend/app/models/__init__.py
================================================================================

from .workspace import Workspace, WorkspaceCreate, WorkspaceUpdate
from .file import FileItem, FileCreate, FileUpdate
from .quiz import (
    Question,
    QuestionCreate,
    QuizSession,
    Answer,
    SpacedRepetitionData,
)
from .knowledge_graph import (
    Concept,
    Relationship,
    ConceptFile,
    ConceptCreate,
    RelationshipCreate,
    ConceptFileCreate,
    TopicArea,
    TopicAreaCreate,
    TopicConceptLink,
    TopicConceptLinkCreate,
    LearningPath,
    LearningPathCreate,
    LearningRecommendation,
    LearningRecommendationCreate,
    WorkspaceTopicAnalysis,
)
from .progress import Progress, UserStats

__all__ = [
    "Workspace",
    "WorkspaceCreate",
    "WorkspaceUpdate",
    "FileItem",
    "FileCreate",
    "FileUpdate",
    "Question",
    "QuestionCreate",
    "QuizSession",
    "Answer",
    "SpacedRepetitionData",
    "Concept",
    "Relationship",
    "ConceptFile",
    "ConceptCreate",
    "RelationshipCreate",
    "ConceptFileCreate",
    "TopicArea",
    "TopicAreaCreate",
    "TopicConceptLink",
    "TopicConceptLinkCreate",
    "LearningPath",
    "LearningPathCreate",
    "LearningRecommendation",
    "LearningRecommendationCreate",
    "WorkspaceTopicAnalysis",
    "Progress",
    "UserStats",
]


================================================================================
FILE: backend/app/models/file.py
================================================================================

"""
File models for the Recall application
"""

from pydantic import BaseModel, Field
from typing import Optional, List
from datetime import datetime
from enum import Enum
import os


class FileType(str, Enum):
    TEXT = "text"
    MARKDOWN = "markdown"
    CODE = "code"
    PDF = "pdf"
    IMAGE = "image"
    OTHER = "other"


class FileBase(BaseModel):
    name: str = Field(..., min_length=1, max_length=255, description="File name")
    path: str = Field(..., description="File path relative to workspace")
    file_type: FileType = Field(..., description="Type of file")
    size: int = Field(..., ge=0, description="File size in bytes")
    workspace_id: int = Field(..., description="Parent workspace ID")


class FileCreate(FileBase):
    content: Optional[str] = Field(None, description="File content for text files")


class FileUpdate(BaseModel):
    name: Optional[str] = Field(None, min_length=1, max_length=255)
    path: Optional[str] = Field(None)
    content: Optional[str] = Field(None, description="Updated file content")


class FileItem(FileBase):
    id: int = Field(..., description="Unique file ID")
    created_at: datetime = Field(..., description="Creation timestamp")
    updated_at: datetime = Field(..., description="Last update timestamp")
    content_hash: Optional[str] = Field(
        None, description="Content hash for change detection"
    )
    question_count: int = Field(
        0, description="Number of questions generated from this file"
    )
    last_processed: Optional[datetime] = Field(
        None, description="Last time file was processed for questions"
    )

    class Config:
        from_attributes = True


class FileStats(BaseModel):
    file_id: int
    total_questions: int
    correct_answers: int
    incorrect_answers: int
    difficulty_score: float  # 0-1 scale
    last_studied: Optional[datetime]


class FileTreeNode(BaseModel):
    name: str
    path: str
    type: str  # "file" or "directory"
    children: Optional[List["FileTreeNode"]] = None
    file_info: Optional[FileItem] = None


# Update forward reference
FileTreeNode.model_rebuild()


================================================================================
FILE: backend/app/models/knowledge_graph.py
================================================================================

"""
Knowledge Graph models for the Recall application
"""

from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from datetime import datetime
import uuid


class ConceptBase(BaseModel):
    name: str = Field(..., description="Concept name")
    description: Optional[str] = Field(None, description="Concept description")


class ConceptCreate(ConceptBase):
    concept_id: str = Field(
        default_factory=lambda: str(uuid.uuid4()), description="Unique concept ID"
    )


class Concept(ConceptBase):
    concept_id: str = Field(..., description="Unique concept ID")
    created_at: datetime = Field(..., description="Creation timestamp")
    updated_at: datetime = Field(..., description="Last update timestamp")

    class Config:
        from_attributes = True


class RelationshipBase(BaseModel):
    source_concept_id: str = Field(..., description="Source concept ID")
    target_concept_id: str = Field(..., description="Target concept ID")
    type: str = Field(
        ..., description="Relationship type (relates_to, dives_deep_to, etc.)"
    )
    strength: Optional[float] = Field(
        None, description="Relationship strength/relevance score"
    )


class RelationshipCreate(RelationshipBase):
    relationship_id: str = Field(
        default_factory=lambda: str(uuid.uuid4()), description="Unique relationship ID"
    )


class Relationship(RelationshipBase):
    relationship_id: str = Field(..., description="Unique relationship ID")
    created_at: datetime = Field(..., description="Creation timestamp")

    class Config:
        from_attributes = True


class ConceptFileBase(BaseModel):
    concept_id: str = Field(..., description="Concept ID")
    file_id: int = Field(..., description="File ID")
    workspace_id: int = Field(..., description="Workspace ID")
    snippet: Optional[str] = Field(None, description="Relevant text snippet")
    relevance_score: Optional[float] = Field(None, description="Relevance score")
    last_accessed_at: Optional[datetime] = Field(
        None, description="Last accessed timestamp"
    )
    start_line: Optional[int] = Field(None, description="Starting line number in file")
    end_line: Optional[int] = Field(None, description="Ending line number in file")


class ConceptFileCreate(ConceptFileBase):
    concept_file_id: str = Field(
        default_factory=lambda: str(uuid.uuid4()),
        description="Unique concept-file link ID",
    )


class ConceptFile(ConceptFileBase):
    concept_file_id: str = Field(..., description="Unique concept-file link ID")

    class Config:
        from_attributes = True


# New models for workspace-level topic discovery and learning paths


class TopicAreaBase(BaseModel):
    """Major subject areas/topics identified in a workspace"""

    workspace_id: int = Field(..., description="Workspace ID")
    name: str = Field(..., description="Topic area name (e.g., 'Machine Learning')")
    description: str = Field(..., description="Topic area description")
    coverage_score: float = Field(
        ..., description="How well this area is covered (0-1)"
    )
    concept_count: int = Field(..., description="Number of concepts in this area")
    file_count: int = Field(..., description="Number of files covering this area")
    explored_percentage: float = Field(
        ..., description="Percentage of area explored (0-1)"
    )


class TopicAreaCreate(TopicAreaBase):
    topic_area_id: str = Field(
        default_factory=lambda: str(uuid.uuid4()), description="Unique topic area ID"
    )


class TopicArea(TopicAreaBase):
    topic_area_id: str = Field(..., description="Unique topic area ID")
    created_at: datetime = Field(..., description="Creation timestamp")
    updated_at: datetime = Field(..., description="Last update timestamp")

    class Config:
        from_attributes = True


class TopicConceptLinkBase(BaseModel):
    """Links concepts to topic areas"""

    topic_area_id: str = Field(..., description="Topic area ID")
    concept_id: str = Field(..., description="Concept ID")
    relevance_score: float = Field(
        ..., description="How relevant this concept is to the topic"
    )
    explored: bool = Field(False, description="Whether user has explored this concept")


class TopicConceptLinkCreate(TopicConceptLinkBase):
    topic_concept_link_id: str = Field(
        default_factory=lambda: str(uuid.uuid4()), description="Unique link ID"
    )


class TopicConceptLink(TopicConceptLinkBase):
    topic_concept_link_id: str = Field(..., description="Unique link ID")

    class Config:
        from_attributes = True


class LearningPathBase(BaseModel):
    """Recommended learning paths for users"""

    workspace_id: int = Field(..., description="Workspace ID")
    name: str = Field(..., description="Learning path name")
    description: str = Field(..., description="Learning path description")
    topic_areas: List[str] = Field(..., description="Topic area IDs in this path")
    estimated_hours: int = Field(..., description="Estimated hours to complete")
    difficulty_level: str = Field(
        ..., description="Overall difficulty: beginner, intermediate, advanced"
    )
    prerequisites: Optional[List[str]] = Field(
        None, description="Required prerequisite knowledge"
    )


class LearningPathCreate(LearningPathBase):
    learning_path_id: str = Field(
        default_factory=lambda: str(uuid.uuid4()), description="Unique learning path ID"
    )


class LearningPath(LearningPathBase):
    learning_path_id: str = Field(..., description="Unique learning path ID")
    created_at: datetime = Field(..., description="Creation timestamp")
    updated_at: datetime = Field(..., description="Last update timestamp")

    class Config:
        from_attributes = True


class LearningRecommendationBase(BaseModel):
    """Specific recommendations for what to study next"""

    workspace_id: int = Field(..., description="Workspace ID")
    user_id: Optional[str] = Field(None, description="User ID (if multi-user)")
    recommendation_type: str = Field(
        ..., description="Type: quiz_performance, concept_gap, prerequisite, interest"
    )
    topic_area_id: Optional[str] = Field(None, description="Related topic area")
    concept_id: Optional[str] = Field(None, description="Specific concept to study")
    priority_score: float = Field(..., description="Recommendation priority (0-1)")
    reason: str = Field(..., description="Why this is recommended")
    suggested_action: str = Field(..., description="What the user should do")


class LearningRecommendationCreate(LearningRecommendationBase):
    recommendation_id: str = Field(
        default_factory=lambda: str(uuid.uuid4()),
        description="Unique recommendation ID",
    )


class LearningRecommendation(LearningRecommendationBase):
    recommendation_id: str = Field(..., description="Unique recommendation ID")
    created_at: datetime = Field(..., description="Creation timestamp")

    class Config:
        from_attributes = True


class WorkspaceTopicAnalysis(BaseModel):
    """Results of workspace-level topic analysis"""

    workspace_id: int
    topic_areas: List[TopicArea]
    total_concepts: int
    total_files: int
    coverage_distribution: Dict[str, float]  # topic_area_id -> coverage_score
    learning_paths: List[LearningPath]
    recommendations: List[LearningRecommendation]
    analysis_timestamp: datetime
    next_analysis_suggested: Optional[datetime] = None


================================================================================
FILE: backend/app/models/progress.py
================================================================================

"""
Progress tracking models for the Recall application
"""

from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from datetime import datetime, date


class ProgressBase(BaseModel):
    user_id: Optional[str] = Field(
        None, description="User identifier (for future multi-user support)"
    )
    workspace_id: int = Field(..., description="Workspace ID")
    file_id: Optional[int] = Field(
        None, description="File ID if tracking file-specific progress"
    )
    question_id: Optional[int] = Field(
        None, description="Question ID if tracking question-specific progress"
    )
    session_id: Optional[int] = Field(None, description="Quiz session ID")


class ProgressCreate(ProgressBase):
    action_type: str = Field(..., description="Type of progress action")
    metadata: Optional[Dict] = Field(None, description="Additional progress data")


class Progress(ProgressBase):
    id: int = Field(..., description="Unique progress ID")
    timestamp: datetime = Field(..., description="When the progress was recorded")
    action_type: str = Field(..., description="Type of action (study, quiz, etc.)")
    value: Optional[float] = Field(
        None, description="Numeric value (score, time, etc.)"
    )
    metadata: Optional[Dict] = Field(None, description="Additional progress data")

    class Config:
        from_attributes = True


class StudySession(BaseModel):
    date: date
    duration_minutes: int
    questions_answered: int
    correct_answers: int
    workspaces_studied: List[int]
    average_difficulty: str


class UserStats(BaseModel):
    total_study_time: int  # in minutes
    total_questions_answered: int
    total_correct_answers: int
    average_score: float
    current_streak: int
    longest_streak: int
    favorite_workspace: Optional[int]
    study_sessions_this_week: int
    study_sessions_this_month: int
    improvement_rate: float  # percentage improvement over time
    weak_topics: List[str]
    strong_topics: List[str]


class ProgressReport(BaseModel):
    period: str  # "week", "month", "all_time"
    start_date: date
    end_date: date
    total_sessions: int
    total_study_time: int
    total_questions: int
    average_score: float
    daily_progress: List[Dict[str, Any]]  # date -> stats
    workspace_breakdown: Dict[int, Dict[str, Any]]  # workspace_id -> stats
    improvement_trend: str


class Achievement(BaseModel):
    id: str
    name: str
    description: str
    icon: str
    unlocked_at: Optional[datetime]
    progress: float  # 0-1 completion percentage
    target_value: int
    current_value: int


class GamificationStats(BaseModel):
    level: int
    experience_points: int
    points_to_next_level: int
    achievements_unlocked: List[Achievement]
    current_streak: int
    longest_streak: int
    total_study_time: int
    questions_mastered: int
    workspaces_completed: int


================================================================================
FILE: backend/app/models/quiz.py
================================================================================

"""
Quiz and question models for the Recall application
"""

from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from datetime import datetime
from enum import Enum


class QuestionType(str, Enum):
    MULTIPLE_CHOICE = "multiple_choice"
    TRUE_FALSE = "true_false"
    SHORT_ANSWER = "short_answer"
    FILL_BLANK = "fill_blank"


class DifficultyLevel(str, Enum):
    EASY = "easy"
    MEDIUM = "medium"
    HARD = "hard"


class QuestionBase(BaseModel):
    file_id: int = Field(..., description="Source file ID")
    question_type: QuestionType = Field(..., description="Type of question")
    question_text: str = Field(..., description="The question text")
    correct_answer: str = Field(..., description="Correct answer")
    options: Optional[List[str]] = Field(None, description="Multiple choice options")
    explanation: Optional[str] = Field(None, description="Explanation of the answer")
    difficulty: DifficultyLevel = Field(
        DifficultyLevel.MEDIUM, description="Question difficulty"
    )
    tags: Optional[List[str]] = Field(None, description="Question tags/categories")
    generated_by_llm: bool = Field(
        False, description="Whether question was generated by LLM"
    )
    generation_prompt: Optional[str] = Field(
        None, description="Prompt used to generate question"
    )
    confidence_score: Optional[float] = Field(None, description="LLM confidence score")
    kg_concept_ids: Optional[List[str]] = Field(
        None, description="Knowledge Graph concept IDs"
    )


class QuestionCreate(QuestionBase):
    pass


class Question(QuestionBase):
    id: int = Field(..., description="Unique question ID")
    created_at: datetime = Field(..., description="Creation timestamp")
    times_asked: int = Field(0, description="How many times this question was asked")
    times_correct: int = Field(0, description="How many times answered correctly")
    last_asked: Optional[datetime] = Field(
        None, description="Last time this question was asked"
    )

    class Config:
        from_attributes = True


class Answer(BaseModel):
    question_id: int = Field(..., description="Question ID")
    answer_text: str = Field(..., description="User's answer")
    is_correct: bool = Field(..., description="Whether the answer is correct")
    time_taken: int = Field(..., ge=0, description="Time taken to answer in seconds")
    confidence_level: Optional[int] = Field(
        None, ge=1, le=5, description="User's confidence (1-5)"
    )


class SpacedRepetitionData(BaseModel):
    id: Optional[int] = Field(None, description="Unique spaced repetition data ID")
    question_id: int = Field(..., description="Question ID")
    ease_factor: float = Field(2.5, description="SM-2 ease factor")
    interval_days: int = Field(1, description="Current interval in days")
    review_count: int = Field(0, description="Number of times reviewed")
    next_review: Optional[datetime] = Field(None, description="Next review date")
    kg_concept_id: Optional[str] = Field(None, description="Knowledge Graph concept ID")

    class Config:
        from_attributes = True


class QuizSessionBase(BaseModel):
    workspace_id: int = Field(..., description="Workspace ID for this session")
    file_ids: Optional[List[int]] = Field(None, description="Specific files to quiz on")
    question_count: int = Field(
        10, ge=1, le=50, description="Number of questions in session"
    )
    difficulty_filter: Optional[DifficultyLevel] = Field(
        None, description="Filter by difficulty"
    )
    question_types: Optional[List[QuestionType]] = Field(
        None, description="Filter by question types"
    )


class QuizSessionCreate(QuizSessionBase):
    pass


class QuizSession(QuizSessionBase):
    id: int = Field(..., description="Unique session ID")
    created_at: datetime = Field(..., description="Session creation timestamp")
    started_at: Optional[datetime] = Field(None, description="When session started")
    completed_at: Optional[datetime] = Field(None, description="When session completed")
    current_question_index: int = Field(0, description="Current question in session")
    total_questions: int = Field(0, description="Total questions in this session")
    correct_answers: int = Field(0, description="Number of correct answers")
    total_time: int = Field(0, description="Total time spent in seconds")
    status: str = Field(
        "created", description="Session status: created, active, completed"
    )

    class Config:
        from_attributes = True


class QuizResult(BaseModel):
    session_id: int
    total_questions: int
    correct_answers: int
    incorrect_answers: int
    score_percentage: float
    total_time: int
    average_time_per_question: float
    difficulty_breakdown: Dict[str, int]  # difficulty -> count
    question_results: List[Dict[str, Any]]  # detailed results per question


class QuizStats(BaseModel):
    total_sessions: int
    total_questions_answered: int
    total_correct: int
    average_score: float
    study_streak: int
    favorite_difficulty: DifficultyLevel
    most_difficult_topic: Optional[str]
    improvement_trend: str  # "improving", "stable", "declining"


================================================================================
FILE: backend/app/models/quiz_models.py
================================================================================

"""
Quiz and question models for the Recall application
"""

from pydantic import BaseModel, Field
from typing import Optional, List, Dict, Any
from datetime import datetime
from enum import Enum


class QuestionType(str, Enum):
    MULTIPLE_CHOICE = "multiple_choice"
    TRUE_FALSE = "true_false"
    SHORT_ANSWER = "short_answer"
    FILL_BLANK = "fill_blank"


class DifficultyLevel(str, Enum):
    EASY = "easy"
    MEDIUM = "medium"
    HARD = "hard"


class QuestionBase(BaseModel):
    file_id: int = Field(..., description="Source file ID")
    question_type: QuestionType = Field(..., description="Type of question")
    question_text: str = Field(..., description="The question text")
    correct_answer: str = Field(..., description="Correct answer")
    options: Optional[List[str]] = Field(None, description="Multiple choice options")
    explanation: Optional[str] = Field(None, description="Explanation of the answer")
    difficulty: DifficultyLevel = Field(
        DifficultyLevel.MEDIUM, description="Question difficulty"
    )
    tags: Optional[List[str]] = Field(None, description="Question tags/categories")
    generated_by_llm: bool = Field(
        False, description="Whether question was generated by LLM"
    )
    generation_prompt: Optional[str] = Field(
        None, description="Prompt used to generate question"
    )
    confidence_score: Optional[float] = Field(None, description="LLM confidence score")
    kg_concept_ids: Optional[List[str]] = Field(
        None, description="Knowledge Graph concept IDs"
    )


class QuestionCreate(QuestionBase):
    pass


class Question(QuestionBase):
    id: int = Field(..., description="Unique question ID")
    created_at: datetime = Field(..., description="Creation timestamp")
    times_asked: int = Field(0, description="How many times this question was asked")
    times_correct: int = Field(0, description="How many times answered correctly")
    last_asked: Optional[datetime] = Field(
        None, description="Last time this question was asked"
    )

    class Config:
        from_attributes = True


class Answer(BaseModel):
    question_id: int = Field(..., description="Question ID")
    answer_text: str = Field(..., description="User's answer")
    is_correct: bool = Field(..., description="Whether the answer is correct")
    time_taken: int = Field(..., ge=0, description="Time taken to answer in seconds")
    confidence_level: Optional[int] = Field(
        None, ge=1, le=5, description="User's confidence (1-5)"
    )


class SpacedRepetitionData(BaseModel):
    id: Optional[int] = Field(None, description="Unique spaced repetition data ID")
    question_id: int = Field(..., description="Question ID")
    ease_factor: float = Field(2.5, description="SM-2 ease factor")
    interval_days: int = Field(1, description="Current interval in days")
    review_count: int = Field(0, description="Number of times reviewed")
    next_review: Optional[datetime] = Field(None, description="Next review date")
    kg_concept_id: Optional[str] = Field(None, description="Knowledge Graph concept ID")

    class Config:
        from_attributes = True


class QuizSessionBase(BaseModel):
    workspace_id: int = Field(..., description="Workspace ID for this session")
    file_ids: Optional[List[int]] = Field(None, description="Specific files to quiz on")
    question_count: int = Field(
        10, ge=1, le=50, description="Number of questions in session"
    )
    difficulty_filter: Optional[DifficultyLevel] = Field(
        None, description="Filter by difficulty"
    )
    question_types: Optional[List[QuestionType]] = Field(
        None, description="Filter by question types"
    )


class QuizSessionCreate(QuizSessionBase):
    pass


class QuizSession(QuizSessionBase):
    id: int = Field(..., description="Unique session ID")
    created_at: datetime = Field(..., description="Session creation timestamp")
    started_at: Optional[datetime] = Field(None, description="When session started")
    completed_at: Optional[datetime] = Field(None, description="When session completed")
    current_question_index: int = Field(0, description="Current question in session")
    total_questions: int = Field(0, description="Total questions in this session")
    correct_answers: int = Field(0, description="Number of correct answers")
    total_time: int = Field(0, description="Total time spent in seconds")
    status: str = Field(
        "created", description="Session status: created, active, completed"
    )

    class Config:
        from_attributes = True


class QuizResult(BaseModel):
    session_id: int
    total_questions: int
    correct_answers: int
    incorrect_answers: int
    score_percentage: float
    total_time: int
    average_time_per_question: float
    difficulty_breakdown: Dict[str, int]  # difficulty -> count
    question_results: List[Dict[str, Any]]  # detailed results per question


class QuizStats(BaseModel):
    total_sessions: int
    total_questions_answered: int
    total_correct: int
    average_score: float
    study_streak: int
    favorite_difficulty: DifficultyLevel
    most_difficult_topic: Optional[str]
    improvement_trend: str  # "improving", "stable", "declining"


================================================================================
FILE: backend/app/models/workspace.py
================================================================================

"""
Workspace models for the Recall application
"""

from pydantic import BaseModel, Field
from typing import Optional, List
from datetime import datetime
from enum import Enum


class WorkspaceType(str, Enum):
    STUDY = "study"
    PROJECT = "project"
    NOTES = "notes"


class WorkspaceBase(BaseModel):
    name: str = Field(..., min_length=1, max_length=100, description="Workspace name")
    description: Optional[str] = Field(
        None, max_length=500, description="Workspace description"
    )
    type: WorkspaceType = Field(WorkspaceType.STUDY, description="Workspace type")
    color: Optional[str] = Field("#007bff", description="Workspace color theme")
    folder_path: Optional[str] = Field(
        None, description="Path to associated folder on file system"
    )


class WorkspaceCreate(WorkspaceBase):
    pass


class WorkspaceUpdate(BaseModel):
    name: Optional[str] = Field(None, min_length=1, max_length=100)
    description: Optional[str] = Field(None, max_length=500)
    type: Optional[WorkspaceType] = None
    color: Optional[str] = None
    folder_path: Optional[str] = Field(
        None, description="Path to associated folder on file system"
    )


class Workspace(WorkspaceBase):
    id: int = Field(..., description="Unique workspace ID")
    created_at: datetime = Field(..., description="Creation timestamp")
    updated_at: datetime = Field(..., description="Last update timestamp")
    file_count: int = Field(default=0, description="Number of files in workspace")
    total_questions: int = Field(default=0, description="Total questions generated")
    completed_questions: int = Field(
        default=0, description="Questions answered correctly"
    )
    last_studied: Optional[datetime] = Field(
        default=None, description="Last study session timestamp"
    )

    class Config:
        from_attributes = True


class WorkspaceStats(BaseModel):
    workspace_id: int
    total_files: int
    total_questions: int
    correct_answers: int
    incorrect_answers: int
    study_streak: int
    average_score: float
    last_study_date: Optional[datetime]


================================================================================
FILE: backend/app/routes/__init__.py
================================================================================

from .workspaces import router as workspaces_router
from .files import router as files_router
from .quiz import router as quiz_router
from .progress import router as progress_router
from .search import router as search_router
from .knowledge_graph import router as knowledge_graph_router
from .quiz_improvements import router as quiz_improvements_router

# Re-export routers with consistent naming
workspaces = workspaces_router
files = files_router
quiz = quiz_router
progress = progress_router
search = search_router
knowledge_graph = knowledge_graph_router
quiz_improvements = quiz_improvements_router


================================================================================
FILE: backend/app/routes/files.py
================================================================================

"""
File API routes
"""

from fastapi import APIRouter, HTTPException, Depends, UploadFile, File
from typing import List, Optional
from pathlib import Path

from app.models.file import (
    FileItem,
    FileCreate,
    FileUpdate,
    FileTreeNode,
)
from app.services.file_service import FileService
from app.services.database import DatabaseService
from app.services.workspace_analysis_service import WorkspaceAnalysisService
from sqlalchemy.ext.asyncio import AsyncSession
from app.database import get_db

# Create router
router = APIRouter()


# Dependency to get file service
def get_file_service() -> FileService:
    # Use singleton instance
    db_service = DatabaseService()
    return FileService(db_service)


@router.post("/", response_model=FileItem)
async def create_file(
    file_data: FileCreate, service: FileService = Depends(get_file_service)
):
    """Create a new file"""
    try:
        return service.create_file(file_data)
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to create file: {str(e)}")


@router.get("/workspace/{workspace_id}", response_model=List[FileItem])
async def get_workspace_files(
    workspace_id: int, service: FileService = Depends(get_file_service)
):
    """Get all files in a workspace"""
    try:
        return service.get_files_by_workspace(workspace_id)
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"Failed to get workspace files: {str(e)}"
        )


@router.get("/{file_id}", response_model=FileItem)
async def get_file(file_id: int, service: FileService = Depends(get_file_service)):
    """Get file by ID"""
    try:
        file = service.get_file(file_id)
        if not file:
            raise HTTPException(status_code=404, detail="File not found")
        return file
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to get file: {str(e)}")


@router.get("/{file_id}/content")
async def get_file_content(
    file_id: int, service: FileService = Depends(get_file_service)
):
    """Get file content"""
    try:
        content = service.get_file_content(file_id)
        if content is None:
            raise HTTPException(status_code=404, detail="File not found")
        return {"content": content}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"Failed to get file content: {str(e)}"
        )


@router.put("/{file_id}", response_model=FileItem)
async def update_file(
    file_id: int,
    update_data: FileUpdate,
    service: FileService = Depends(get_file_service),
):
    """Update file information"""
    try:
        file = service.update_file(file_id, update_data)
        if not file:
            raise HTTPException(status_code=404, detail="File not found")
        return file
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to update file: {str(e)}")


@router.put("/{file_id}/content")
async def update_file_content(
    file_id: int,
    content: str,
    service: FileService = Depends(get_file_service),
    db: AsyncSession = Depends(get_db),
):
    """Update file content"""
    try:
        success = service.save_file_content(file_id, content)
        if not success:
            raise HTTPException(status_code=404, detail="File not found")

        # Trigger incremental embedding update
        await _trigger_incremental_analysis(file_id, db)

        return {"message": "File content updated successfully"}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"Failed to update file content: {str(e)}"
        )


@router.delete("/{file_id}")
async def delete_file(
    file_id: int,
    service: FileService = Depends(get_file_service),
    db: AsyncSession = Depends(get_db),
):
    """Delete a file"""
    try:
        # Get file info before deletion for incremental analysis
        file_info = service.get_file(file_id)
        success = service.delete_file(file_id)
        if not success:
            raise HTTPException(status_code=404, detail="File not found")

        # Trigger incremental analysis cleanup
        if file_info:
            await _trigger_file_deletion_cleanup(
                file_info.path, file_info.workspace_id, db
            )

        return {"message": "File deleted successfully"}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to delete file: {str(e)}")


@router.get("/tree/{workspace_id}", response_model=List[FileTreeNode])
async def get_file_tree(
    workspace_id: int, service: FileService = Depends(get_file_service)
):
    """Get file tree structure for workspace"""
    try:
        return service.get_file_tree(workspace_id)
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"Failed to get file tree: {str(e)}"
        )


@router.post("/upload/{workspace_id}")
async def upload_file(
    workspace_id: int,
    file: UploadFile = File(...),
    service: FileService = Depends(get_file_service),
):
    """Upload a file to workspace"""
    try:
        # Read file content
        content = await file.read()
        content_str = content.decode("utf-8")

        # Create file data
        file_data = FileCreate(
            name=file.filename,
            path=file.filename,  # Simple case - filename as path
            file_type=service._get_file_type(file.filename),
            size=len(content),
            workspace_id=workspace_id,
            content=content_str,
        )

        created_file = service.create_file(file_data)
        return created_file
    except UnicodeDecodeError:
        raise HTTPException(status_code=400, detail="File must be text-based")
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to upload file: {str(e)}")


@router.post("/scan-folder/{workspace_id}")
async def scan_folder(
    workspace_id: int, service: FileService = Depends(get_file_service)
):
    """Scan folder associated with workspace and create files"""
    try:
        created_files = service.scan_workspace_folder(workspace_id)
        return {
            "message": f"Successfully scanned folder and created {len(created_files)} files",
            "files_created": len(created_files),
            "files": created_files,
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Failed to scan folder: {str(e)}")


# Helper functions for incremental analysis
async def _trigger_incremental_analysis(file_id: int, db: AsyncSession):
    """Trigger incremental embedding analysis for a modified file"""
    try:
        # Get file information
        from sqlalchemy import text

        query = text(
            """
            SELECT f.path, f.workspace_id, w.path as workspace_path
            FROM files f
            JOIN workspaces w ON f.workspace_id = w.id
            WHERE f.id = :file_id
        """
        )

        result = await db.execute(query, {"file_id": file_id})
        file_record = result.fetchone()

        if file_record:
            # Initialize analysis service with embeddings
            embedding_service = EmbeddingService()
            analysis_service = WorkspaceAnalysisService(
                db, embedding_service=embedding_service
            )

            # Run incremental analysis for this specific file
            await analysis_service.analyze_file_incremental(
                file_record.path, file_record.workspace_id
            )

    except Exception as e:
        # Log error but don't fail the file operation
        print(f"Incremental analysis failed for file {file_id}: {str(e)}")


async def _trigger_file_deletion_cleanup(
    file_path: str, workspace_id: int, db: AsyncSession
):
    """Clean up embeddings and relationships when a file is deleted"""
    try:
        # Initialize analysis service
        embedding_service = EmbeddingService()
        analysis_service = WorkspaceAnalysisService(
            db, embedding_service=embedding_service
        )

        # Remove concepts associated with this file
        await analysis_service._remove_file_concepts(file_path, workspace_id)

    except Exception as e:
        # Log error but don't fail the file deletion
        print(f"File deletion cleanup failed for {file_path}: {str(e)}")


================================================================================
FILE: backend/app/routes/knowledge_graph.py
================================================================================

"""
Knowledge Graph API routes
"""

print("[KG] MODULE LOADED", file=__import__("sys").stderr)
__import__("sys").stderr.flush()

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text
from typing import List, Dict, Any, Optional
from pydantic import BaseModel

from ..database import get_db
from ..services import KnowledgeGraphService, WorkspaceAnalysisService
from ..services.embedding_service import EmbeddingService
from ..models import ConceptCreate, RelationshipCreate, ConceptFileCreate
import os
from pathlib import Path


def get_user_data_directory() -> str:
    """Get the user data directory for storing embeddings (same as database location)"""
    home_dir = os.path.expanduser("~")
    data_dir = os.path.join(home_dir, ".recall", "embeddings")
    os.makedirs(data_dir, exist_ok=True)
    return data_dir


router = APIRouter(prefix="/api/knowledge-graph", tags=["knowledge-graph"])


# Pydantic models for API requests/responses
class ConceptResponse(BaseModel):
    concept_id: str
    name: str
    description: Optional[str]
    created_at: str
    updated_at: str

    class Config:
        from_attributes = True


class RelationshipResponse(BaseModel):
    relationship_id: str
    source_concept_id: str
    target_concept_id: str
    type: str
    strength: Optional[float]
    created_at: str

    class Config:
        from_attributes = True


class ConceptFileResponse(BaseModel):
    concept_file_id: str
    concept_id: str
    file_id: int
    workspace_id: int
    snippet: Optional[str]
    relevance_score: Optional[float]
    last_accessed_at: Optional[str]

    class Config:
        from_attributes = True


class KnowledgeGraphResponse(BaseModel):
    nodes: List[Dict[str, Any]]
    edges: List[Dict[str, Any]]


class SuggestedTopicsResponse(BaseModel):
    topics: List[Dict[str, Any]]


@router.post("/workspaces/{workspace_id}/analyze")
async def analyze_workspace(
    workspace_id: int,
    force_reanalysis: bool = False,
    file_paths: Optional[List[str]] = None,
    db: AsyncSession = Depends(get_db),
):
    """
    Trigger workspace analysis to extract concepts and build knowledge graph
    """
    # Get workspace path from database
    workspace_query = text(
        "SELECT folder_path FROM workspaces WHERE id = :workspace_id"
    )
    result = await db.execute(workspace_query, {"workspace_id": workspace_id})
    workspace_record = result.fetchone()

    if not workspace_record:
        raise HTTPException(status_code=404, detail="Workspace not found")

    workspace_path = workspace_record.folder_path

    # Initialize analysis service with embedding support
    user_data_dir = get_user_data_directory()
    embedding_service = EmbeddingService(persist_directory=user_data_dir)

    # Auto-initialize embedding model if not already done
    if not embedding_service.current_model:
        try:
            # Initialize with recommended model
            success = await embedding_service.initialize()
            if not success:
                raise HTTPException(
                    status_code=500, detail="Failed to initialize embedding model"
                )
        except Exception as e:
            raise HTTPException(
                status_code=500, detail=f"Error initializing embedding model: {str(e)}"
            )

    analysis_service = WorkspaceAnalysisService(db, embedding_service=embedding_service)

    try:
        # Run analysis
        results = await analysis_service.analyze_workspace(
            workspace_id=workspace_id,
            workspace_path=workspace_path,
            force_reanalysis=force_reanalysis,
            file_paths=file_paths,
        )

        return {
            "status": "analysis_completed",
            "task_id": f"analysis_{workspace_id}_{hash(str(file_paths))}",
            "results": results,
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Analysis failed: {str(e)}")


@router.get("/workspaces/{workspace_id}/graph", response_model=KnowledgeGraphResponse)
async def get_workspace_knowledge_graph(
    workspace_id: int,
    depth: int = 2,
    concept_id: Optional[str] = None,
    auto_analyze: bool = True,
    db: AsyncSession = Depends(get_db),
):
    """
    Get knowledge graph for a specific workspace.
    Automatically triggers analysis if no data exists and auto_analyze=True.
    """
    import sys

    print(
        f"[KG] ROUTE CALLED: workspace {workspace_id}, concept_id={concept_id}, auto_analyze={auto_analyze}",
        file=sys.stderr,
    )
    sys.stderr.flush()

    kg_service = KnowledgeGraphService(db)

    if concept_id:
        print(f"[KG] Getting subgraph for concept {concept_id}")
        # Get subgraph around specific concept
        graph = await kg_service.get_concept_graph(concept_id, depth)
    else:
        # Get workspace concepts and build graph
        print(f"[KG] Getting workspace concepts for workspace {workspace_id}")
        workspace_concepts = await kg_service.get_workspace_concepts(workspace_id)
        print(
            f"[KG] Found {len(workspace_concepts) if workspace_concepts else 0} existing concepts"
        )

        # Auto-trigger analysis if no concepts found and auto_analyze is enabled
        if not workspace_concepts and auto_analyze:
            print(
                f"[KG] No concepts found, auto-analysis enabled. Starting analysis for workspace {workspace_id}"
            )

            # Get workspace path
            workspace_query = text(
                "SELECT folder_path FROM workspaces WHERE id = :workspace_id"
            )
            result = await db.execute(workspace_query, {"workspace_id": workspace_id})
            workspace_record = result.fetchone()
            print(f"[KG] Workspace record: {workspace_record}")

            if workspace_record:
                workspace_path = workspace_record.folder_path
                print(f"[KG] Workspace path: {workspace_path}")

                # Initialize analysis service with embedding support
                user_data_dir = get_user_data_directory()
                print(f"[KG] User data directory: {user_data_dir}")
                embedding_service = EmbeddingService(persist_directory=user_data_dir)

                # Auto-initialize embedding model if not already done
                if not embedding_service.current_model:
                    print(
                        f"[KG] Embedding model not initialized, initializing with all-MiniLM-L6-v2"
                    )
                    try:
                        # Initialize with recommended model
                        success = await embedding_service.initialize()
                        print(f"[KG] Embedding model initialization success: {success}")
                        if not success:
                            print(
                                f"[KG] Failed to auto-initialize embedding model for workspace {workspace_id}"
                            )
                    except Exception as e:
                        print(f"[KG] Error auto-initializing embedding model: {str(e)}")
                else:
                    print(f"[KG] Embedding model already initialized")

                analysis_service = WorkspaceAnalysisService(
                    db, kg_service=kg_service, embedding_service=embedding_service
                )

                try:
                    print(f"[KG] Starting workspace analysis via endpoint...")
                    # Call the analysis endpoint instead of service directly
                    # This ensures proper embedding initialization and error handling
                    from fastapi import Request
                    from fastapi.responses import JSONResponse

                    # Create a mock request for the endpoint
                    analysis_response = await analyze_workspace(
                        workspace_id=workspace_id,
                        force_reanalysis=False,
                        file_paths=None,
                        db=db,
                    )
                    print(f"[KG] Analysis endpoint response: {analysis_response}")

                    # Re-fetch concepts after analysis
                    workspace_concepts = await kg_service.get_workspace_concepts(
                        workspace_id
                    )
                    print(
                        f"[KG] After analysis, found {len(workspace_concepts) if workspace_concepts else 0} concepts"
                    )

                except Exception as e:
                    # Log error but don't fail the request
                    print(
                        f"[KG] Auto-analysis failed for workspace {workspace_id}: {str(e)}"
                    )
            else:
                print(f"[KG] No workspace record found for workspace {workspace_id}")

        # Build graph from concepts
        nodes = []
        edges = []

        if workspace_concepts:
            # Get relationships for all concepts
            concept_ids = [wc["concept"].concept_id for wc in workspace_concepts]
            for cid in concept_ids:
                relationships = await kg_service.get_relationships_for_concept(cid)
                for rel in relationships:
                    if (
                        rel.target_concept_id in concept_ids
                    ):  # Only include edges within workspace
                        edges.append(
                            {
                                "id": rel.relationship_id,
                                "source": rel.source_concept_id,
                                "target": rel.target_concept_id,
                                "type": rel.type,
                                "strength": rel.strength,
                            }
                        )

            nodes = [
                {
                    "id": wc["concept"].concept_id,
                    "name": wc["concept"].name,
                    "description": wc["concept"].description,
                }
                for wc in workspace_concepts
            ]

        graph = {"nodes": nodes, "edges": edges}

    return graph


@router.get(
    "/workspaces/{workspace_id}/suggested-topics",
    response_model=SuggestedTopicsResponse,
)
async def get_workspace_suggested_topics(
    workspace_id: int,
    limit: int = 10,
    context_concept_id: Optional[str] = None,
    db: AsyncSession = Depends(get_db),
):
    """
    Get suggested topics for a workspace using hybrid scoring algorithm
    """
    from datetime import datetime, timedelta
    import math

    kg_service = KnowledgeGraphService(db)

    # Get workspace concepts with relevance scores
    workspace_concepts = await kg_service.get_workspace_concepts(workspace_id)

    if not workspace_concepts:
        return {"topics": []}

    # Calculate hybrid scores for each concept
    now = datetime.utcnow()
    tau_days = 7  # Decay constant for recency

    scored_concepts = []
    for wc in workspace_concepts:
        concept = wc["concept"]
        relevance_score = wc["relevance_score"] or 0.5
        last_accessed = wc["last_accessed_at"]

        # Frequency score (normalized relevance)
        F = relevance_score

        # Recency score (exponential decay)
        if last_accessed:
            delta_days = (now - last_accessed).days
            R = math.exp(-delta_days / tau_days)
        else:
            R = 0.1  # Low score for never accessed

        # Semantic similarity score (simplified - would use embeddings in production)
        # For now, use concept relationships as proxy
        relationships = await kg_service.get_relationships_for_concept(
            concept.concept_id
        )
        centrality = len(relationships) / max(1, len(workspace_concepts))
        S = min(0.8, centrality * 2)  # Scale centrality to similarity score

        # Hybrid score with weights (configurable)
        w_f, w_r, w_s = 0.4, 0.3, 0.3  # frequency, recency, semantic
        total_score = w_f * F + w_r * R + w_s * S

        scored_concepts.append(
            {
                "concept": concept,
                "score": total_score,
                "frequency_score": F,
                "recency_score": R,
                "semantic_score": S,
            }
        )

    # Sort by total score and return top suggestions
    scored_concepts.sort(key=lambda x: x["score"], reverse=True)

    suggestions = []
    for sc in scored_concepts[:limit]:
        suggestions.append(
            {
                "concept_id": sc["concept"].concept_id,
                "name": sc["concept"].name,
                "relevance_score": sc["score"],
                "description": sc["concept"].description,
                "score_breakdown": {
                    "frequency": sc["frequency_score"],
                    "recency": sc["recency_score"],
                    "semantic": sc["semantic_score"],
                },
            }
        )

    return {"topics": suggestions}


@router.get("/concepts/{concept_id}/files")
async def get_concept_files(concept_id: str, db: AsyncSession = Depends(get_db)):
    """
    Get all files linked to a concept
    """
    kg_service = KnowledgeGraphService(db)
    files = await kg_service.get_files_for_concept(concept_id)

    return {
        "files": [
            {
                "concept_file_id": cf.concept_file_id,
                "file_id": cf.file_id,
                "workspace_id": cf.workspace_id,
                "snippet": cf.snippet,
                "relevance_score": cf.relevance_score,
                "last_accessed_at": (
                    cf.last_accessed_at.isoformat() if cf.last_accessed_at else None
                ),
            }
            for cf in files
        ]
    }


@router.get("/global/graph", response_model=KnowledgeGraphResponse)
async def get_global_knowledge_graph(
    depth: int = 2, concept_id: Optional[str] = None, db: AsyncSession = Depends(get_db)
):
    """
    Get global knowledge graph across all workspaces
    """
    # This would aggregate concepts across all workspaces
    # For now, return empty graph
    return {"nodes": [], "edges": []}


@router.get("/global/suggested-topics", response_model=SuggestedTopicsResponse)
async def get_global_suggested_topics(
    limit: int = 10,
    context_concept_id: Optional[str] = None,
    db: AsyncSession = Depends(get_db),
):
    """
    Get globally suggested topics
    """
    # This would aggregate suggestions across all workspaces
    # For now, return empty list
    return {"topics": []}


# CRUD operations for concepts
@router.post("/concepts", response_model=ConceptResponse)
async def create_concept(concept: ConceptCreate, db: AsyncSession = Depends(get_db)):
    """Create a new concept"""
    kg_service = KnowledgeGraphService(db)
    created_concept = await kg_service.create_concept(concept)
    return created_concept


@router.get("/concepts/{concept_id}", response_model=ConceptResponse)
async def get_concept(concept_id: str, db: AsyncSession = Depends(get_db)):
    """Get a concept by ID"""
    kg_service = KnowledgeGraphService(db)
    concept = await kg_service.get_concept(concept_id)
    if not concept:
        raise HTTPException(status_code=404, detail="Concept not found")
    return concept


@router.put("/concepts/{concept_id}", response_model=ConceptResponse)
async def update_concept(
    concept_id: str,
    name: Optional[str] = None,
    description: Optional[str] = None,
    db: AsyncSession = Depends(get_db),
):
    """Update a concept"""
    kg_service = KnowledgeGraphService(db)
    updated_concept = await kg_service.update_concept(concept_id, name, description)
    if not updated_concept:
        raise HTTPException(status_code=404, detail="Concept not found")
    return updated_concept


@router.delete("/concepts/{concept_id}")
async def delete_concept(concept_id: str, db: AsyncSession = Depends(get_db)):
    """Delete a concept"""
    kg_service = KnowledgeGraphService(db)
    deleted = await kg_service.delete_concept(concept_id)
    if not deleted:
        raise HTTPException(status_code=404, detail="Concept not found")
    return {"message": "Concept deleted successfully"}


@router.get("/concepts/search")
async def search_concepts(q: str, limit: int = 50, db: AsyncSession = Depends(get_db)):
    """Search concepts by name or description"""
    kg_service = KnowledgeGraphService(db)
    concepts = await kg_service.search_concepts(q, limit)

    return {
        "concepts": [
            {
                "concept_id": c.concept_id,
                "name": c.name,
                "description": c.description,
                "created_at": c.created_at.isoformat(),
                "updated_at": c.updated_at.isoformat(),
            }
            for c in concepts
        ]
    }


# Relationship operations
@router.post("/relationships", response_model=RelationshipResponse)
async def create_relationship(
    relationship: RelationshipCreate, db: AsyncSession = Depends(get_db)
):
    """Create a relationship between concepts"""
    kg_service = KnowledgeGraphService(db)
    created_relationship = await kg_service.create_relationship(relationship)
    return created_relationship


@router.get("/concepts/{concept_id}/relationships")
async def get_concept_relationships(
    concept_id: str, db: AsyncSession = Depends(get_db)
):
    """Get all relationships for a concept"""
    kg_service = KnowledgeGraphService(db)
    relationships = await kg_service.get_relationships_for_concept(concept_id)

    return {
        "relationships": [
            {
                "relationship_id": r.relationship_id,
                "source_concept_id": r.source_concept_id,
                "target_concept_id": r.target_concept_id,
                "type": r.type,
                "strength": r.strength,
                "created_at": r.created_at.isoformat(),
            }
            for r in relationships
        ]
    }


# Concept-file linking operations
@router.post("/concept-files", response_model=ConceptFileResponse)
async def create_concept_file_link(
    link: ConceptFileCreate, db: AsyncSession = Depends(get_db)
):
    """Create a link between a concept and a file"""
    kg_service = KnowledgeGraphService(db)
    created_link = await kg_service.create_concept_file_link(link)
    return created_link


# Embedding management endpoints
@router.get("/embeddings/models")
async def get_available_embedding_models():
    """Get information about available embedding models"""
    # Create a temporary service instance to get model info
    user_data_dir = get_user_data_directory()
    embedding_service = EmbeddingService(persist_directory=user_data_dir)
    models = embedding_service.get_available_models()
    current = embedding_service.get_current_model_info()

    return {
        "available_models": models,
        "current_model": current,
    }


@router.post("/embeddings/initialize")
async def initialize_embedding_model(model_name: str):
    """Initialize the embedding service with a specific model"""
    user_data_dir = get_user_data_directory()
    embedding_service = EmbeddingService(persist_directory=user_data_dir)

    try:
        success = await embedding_service.initialize(model_name)
        if success:
            return {
                "success": True,
                "model": model_name,
                "message": f"Successfully initialized {model_name}",
            }
        else:
            raise HTTPException(status_code=500, detail="Failed to initialize model")
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))


@router.post("/embeddings/switch-model")
async def switch_embedding_model(new_model_name: str, reembed_all: bool = False):
    """Switch to a different embedding model"""
    user_data_dir = get_user_data_directory()
    embedding_service = EmbeddingService(persist_directory=user_data_dir)

    # Initialize with current model first if not already done
    if not embedding_service.current_model:
        # Try to initialize with any available model
        available = embedding_service.get_available_models()
        current_name = None
        for name, info in available.items():
            if info.get("recommended"):
                current_name = name
                break
        if not current_name:
            current_name = list(available.keys())[0]

        success = await embedding_service.initialize(current_name)
        if not success:
            raise HTTPException(
                status_code=500, detail="Failed to initialize current model"
            )

    # Switch to new model
    result = await embedding_service.switch_model(new_model_name, reembed_all)

    if result["success"]:
        return result
    else:
        raise HTTPException(
            status_code=500, detail=result.get("error", "Switch failed")
        )


@router.get("/embeddings/stats")
async def get_embedding_stats():
    """Get statistics about the current embedding collection"""
    user_data_dir = get_user_data_directory()
    embedding_service = EmbeddingService(persist_directory=user_data_dir)

    if not embedding_service.current_model:
        return {"error": "Embedding service not initialized"}

    stats = await embedding_service.get_collection_stats()
    return stats


@router.post("/embeddings/search")
async def search_similar_concepts(query: str, limit: int = 10, threshold: float = 0.0):
    """Search for concepts similar to the query text"""
    user_data_dir = get_user_data_directory()
    embedding_service = EmbeddingService(persist_directory=user_data_dir)

    if not embedding_service.current_model:
        raise HTTPException(status_code=500, detail="Embedding service not initialized")

    results = await embedding_service.search_similar_concepts(query, limit, threshold)
    return {"results": results}


================================================================================
FILE: backend/app/routes/progress.py
================================================================================

"""
Progress API routes - Placeholder
"""

from fastapi import APIRouter

router = APIRouter()

# TODO: Implement progress routes for:
# - Record study sessions
# - Get user statistics
# - Get progress reports
# - Track achievements
# - Get learning analytics


================================================================================
FILE: backend/app/routes/quiz.py
================================================================================

"""
Quiz API routes - Placeholder
"""

from fastapi import APIRouter

router = APIRouter()

# TODO: Implement quiz routes for:
# - Generate questions from files
# - Create quiz sessions
# - Get next question
# - Submit answers
# - Get quiz results
# - Get question statistics


================================================================================
FILE: backend/app/routes/quiz_improvements.py
================================================================================

"""
Quiz Improvement API routes for LLM generation and spaced repetition
"""

from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List, Dict, Any, Optional
from pydantic import BaseModel

from ..database import get_db
from ..services import QuizService
from ..models import Question, Answer

router = APIRouter(prefix="/api/quiz", tags=["quiz-improvements"])


# Pydantic models for API requests/responses
class GenerateQuestionsRequest(BaseModel):
    file_content: str
    file_id: int
    count: int = 5
    question_types: Optional[List[str]] = None
    difficulty: Optional[str] = None
    concept_ids: Optional[List[str]] = None


class SpacedRepetitionUpdateRequest(BaseModel):
    question_id: int
    answer_quality: int  # 0-5 quality rating
    concept_id: Optional[str] = None


class AdaptiveQuizRequest(BaseModel):
    workspace_id: int
    count: int = 10
    user_performance: Optional[Dict[str, Any]] = None


class QuestionResponse(BaseModel):
    id: int
    file_id: int
    question_type: str
    question_text: str
    correct_answer: str
    options: Optional[List[str]]
    explanation: Optional[str]
    difficulty: str
    generated_by_llm: bool
    confidence_score: Optional[float]
    kg_concept_ids: Optional[List[str]]
    created_at: str
    times_asked: int
    times_correct: int
    last_asked: Optional[str]

    class Config:
        from_attributes = True


class SpacedRepetitionResponse(BaseModel):
    question_id: int
    ease_factor: float
    interval_days: int
    review_count: int
    next_review: str
    kg_concept_id: Optional[str]


class ReviewQuestionResponse(BaseModel):
    question: QuestionResponse
    spaced_repetition_data: SpacedRepetitionResponse


@router.post("/generate-llm", response_model=List[QuestionResponse])
async def generate_llm_questions(
    request: GenerateQuestionsRequest, db: AsyncSession = Depends(get_db)
):
    """
    Generate questions using LLM based on file content
    """
    quiz_service = QuizService(db)

    try:
        questions = await quiz_service.generate_llm_questions(
            file_content=request.file_content,
            file_id=request.file_id,
            count=request.count,
            question_types=request.question_types,
            difficulty=request.difficulty,
            concept_ids=request.concept_ids,
        )

        return [
            QuestionResponse(
                id=q.id,
                file_id=q.file_id,
                question_type=q.question_type,
                question_text=q.question_text,
                correct_answer=q.correct_answer,
                options=q.options,
                explanation=q.explanation,
                difficulty=q.difficulty,
                generated_by_llm=q.generated_by_llm,
                confidence_score=q.confidence_score,
                kg_concept_ids=q.kg_concept_ids,
                created_at=q.created_at.isoformat(),
                times_asked=q.times_asked,
                times_correct=q.times_correct,
                last_asked=q.last_asked.isoformat() if q.last_asked else None,
            )
            for q in questions
        ]

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"LLM generation failed: {str(e)}")


@router.post("/spaced-repetition/update", response_model=SpacedRepetitionResponse)
async def update_spaced_repetition(
    request: SpacedRepetitionUpdateRequest, db: AsyncSession = Depends(get_db)
):
    """
    Update spaced repetition data based on answer quality
    """
    if not (0 <= request.answer_quality <= 5):
        raise HTTPException(
            status_code=400, detail="Answer quality must be between 0 and 5"
        )

    quiz_service = QuizService(db)

    try:
        updated_data = await quiz_service.update_spaced_repetition(
            question_id=request.question_id,
            answer_quality=request.answer_quality,
            concept_id=request.concept_id,
        )

        return SpacedRepetitionResponse(
            question_id=updated_data.question_id,
            ease_factor=updated_data.ease_factor,
            interval_days=updated_data.interval_days,
            review_count=updated_data.review_count,
            next_review=updated_data.next_review.isoformat(),
            kg_concept_id=updated_data.kg_concept_id,
        )

    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"Spaced repetition update failed: {str(e)}"
        )


@router.get("/spaced-repetition/due", response_model=List[ReviewQuestionResponse])
async def get_questions_due_for_review(
    limit: int = 20,
    concept_ids: Optional[List[str]] = None,
    db: AsyncSession = Depends(get_db),
):
    """
    Get questions due for spaced repetition review
    """
    quiz_service = QuizService(db)

    try:
        review_questions = await quiz_service.get_questions_due_for_review(
            limit=limit, concept_ids=concept_ids
        )

        return [
            ReviewQuestionResponse(
                question=QuestionResponse(
                    id=rq["question"].id,
                    file_id=rq["question"].file_id,
                    question_type=rq["question"].question_type,
                    question_text=rq["question"].question_text,
                    correct_answer=rq["question"].correct_answer,
                    options=rq["question"].options,
                    explanation=rq["question"].explanation,
                    difficulty=rq["question"].difficulty,
                    generated_by_llm=rq["question"].generated_by_llm,
                    confidence_score=rq["question"].confidence_score,
                    kg_concept_ids=rq["question"].kg_concept_ids,
                    created_at=rq["question"].created_at.isoformat(),
                    times_asked=rq["question"].times_asked,
                    times_correct=rq["question"].times_correct,
                    last_asked=(
                        rq["question"].last_asked.isoformat()
                        if rq["question"].last_asked
                        else None
                    ),
                ),
                spaced_repetition_data=SpacedRepetitionResponse(
                    question_id=rq["spaced_repetition_data"].question_id,
                    ease_factor=rq["spaced_repetition_data"].ease_factor,
                    interval_days=rq["spaced_repetition_data"].interval_days,
                    review_count=rq["spaced_repetition_data"].review_count,
                    next_review=rq["spaced_repetition_data"].next_review.isoformat(),
                    kg_concept_id=rq["spaced_repetition_data"].kg_concept_id,
                ),
            )
            for rq in review_questions
        ]

    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"Failed to get review questions: {str(e)}"
        )


@router.post("/generate-adaptive", response_model=List[QuestionResponse])
async def generate_adaptive_quiz(
    request: AdaptiveQuizRequest, db: AsyncSession = Depends(get_db)
):
    """
    Generate an adaptive question set based on user performance and knowledge graph
    """
    quiz_service = QuizService(db)

    try:
        questions = await quiz_service.get_adaptive_question_set(
            workspace_id=request.workspace_id,
            count=request.count,
            user_performance=request.user_performance,
        )

        return [
            QuestionResponse(
                id=q.id,
                file_id=q.file_id,
                question_type=q.question_type,
                question_text=q.question_text,
                correct_answer=q.correct_answer,
                options=q.options,
                explanation=q.explanation,
                difficulty=q.difficulty,
                generated_by_llm=q.generated_by_llm,
                confidence_score=q.confidence_score,
                kg_concept_ids=q.kg_concept_ids,
                created_at=q.created_at.isoformat(),
                times_asked=q.times_asked,
                times_correct=q.times_correct,
                last_asked=q.last_asked.isoformat() if q.last_asked else None,
            )
            for q in questions
        ]

    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"Adaptive quiz generation failed: {str(e)}"
        )


@router.get("/weak-areas")
async def get_weak_performance_areas(
    workspace_id: Optional[int] = None,
    limit: int = 10,
    db: AsyncSession = Depends(get_db),
):
    """
    Analyze performance patterns to identify weak areas with advanced analytics
    """
    from sqlalchemy import text
    import json
    from datetime import datetime, timedelta

    # Get comprehensive performance data
    base_query = """
        SELECT
            q.id,
            q.question_text,
            q.question_type,
            q.difficulty,
            q.kg_concept_ids,
            q.created_at,
            COUNT(a.id) as times_asked,
            SUM(CASE WHEN a.is_correct THEN 1 ELSE 0 END) as times_correct,
            AVG(a.time_taken) as avg_time,
            MIN(a.created_at) as first_asked,
            MAX(a.created_at) as last_asked,
            SUM(CASE WHEN a.is_correct THEN 0 ELSE 1 END) as times_incorrect
        FROM questions q
        LEFT JOIN answers a ON q.id = a.question_id
        WHERE q.times_asked > 0
    """

    if workspace_id:
        base_query += " AND q.file_id IN (SELECT id FROM files WHERE workspace_id = :workspace_id)"

    base_query += """
        GROUP BY q.id, q.question_text, q.question_type, q.difficulty, q.kg_concept_ids, q.created_at
        HAVING COUNT(a.id) >= 3  -- Need sufficient data points
    """

    result = await db.execute(text(base_query), {"workspace_id": workspace_id})
    question_performance = result.fetchall()

    # Analyze patterns and calculate advanced metrics
    weak_areas = []
    now = datetime.utcnow()

    for row in question_performance:
        # Basic metrics
        accuracy = row.times_correct / row.times_asked if row.times_asked > 0 else 0
        error_rate = 1 - accuracy

        # Advanced metrics
        consistency_score = 1 - (
            row.times_incorrect / row.times_asked
        )  # Lower is more consistent failures

        # Recency-weighted performance (recent mistakes matter more)
        days_since_last_asked = (now - row.last_asked).days if row.last_asked else 30
        recency_weight = min(
            days_since_last_asked / 7, 2
        )  # Max 2x weight for very recent

        # Learning velocity (improvement over time)
        learning_velocity = 0
        if (
            row.first_asked
            and row.last_asked
            and (row.last_asked - row.first_asked).days > 7
        ):
            # Simplified: assume some learning if accuracy > 0.5 after multiple attempts
            learning_velocity = accuracy - 0.5 if accuracy > 0.5 else accuracy - 0.7

        # Difficulty-adjusted score (hard questions get more weight)
        difficulty_multiplier = {"easy": 0.8, "medium": 1.0, "hard": 1.3}.get(
            row.difficulty, 1.0
        )

        # Overall weakness score
        weakness_score = (
            (error_rate * 0.4)  # High error rate
            + ((1 - consistency_score) * 0.3)  # Inconsistent performance
            + (recency_weight * 0.2)  # Recent struggles
            + (difficulty_multiplier * 0.1)  # Difficulty consideration
        )

        # Parse concept IDs
        kg_concept_ids = json.loads(row.kg_concept_ids) if row.kg_concept_ids else []

        # Time-based analysis
        time_trend = "stable"
        if row.avg_time and row.times_asked > 5:
            # Analyze if user is taking longer (struggling) or shorter (mastering)
            recent_answers_query = text(
                """
                SELECT time_taken, is_correct, created_at
                FROM answers
                WHERE question_id = :question_id
                ORDER BY created_at DESC
                LIMIT 5
            """
            )

            recent_result = await db.execute(
                recent_answers_query, {"question_id": row.id}
            )
            recent_answers = recent_result.fetchall()

            if len(recent_answers) >= 3:
                recent_avg_time = sum(r.time_taken for r in recent_answers) / len(
                    recent_answers
                )
                if recent_avg_time > row.avg_time * 1.2:
                    time_trend = "struggling"  # Taking longer
                elif recent_avg_time < row.avg_time * 0.8:
                    time_trend = "improving"  # Taking less time

        weak_areas.append(
            {
                "question_id": row.id,
                "question_text": row.question_text,
                "question_type": row.question_type,
                "difficulty": row.difficulty,
                "kg_concept_ids": kg_concept_ids,
                "performance_metrics": {
                    "times_asked": row.times_asked,
                    "times_correct": row.times_correct,
                    "accuracy": accuracy,
                    "error_rate": error_rate,
                    "avg_time_seconds": row.avg_time,
                    "consistency_score": consistency_score,
                    "learning_velocity": learning_velocity,
                    "time_trend": time_trend,
                },
                "weakness_score": weakness_score,
                "recommendations": _generate_weakness_recommendations(
                    accuracy, consistency_score, time_trend, row.difficulty
                ),
                "last_asked_days": days_since_last_asked,
            }
        )

    # Sort by weakness score and return top issues
    weak_areas.sort(key=lambda x: x["weakness_score"], reverse=True)

    # Group by concepts for higher-level insights
    concept_weakness = {}
    for area in weak_areas[: limit * 2]:  # Get more for concept analysis
        for concept_id in area["kg_concept_ids"] or []:
            if concept_id not in concept_weakness:
                concept_weakness[concept_id] = {
                    "concept_id": concept_id,
                    "total_questions": 0,
                    "avg_weakness": 0,
                    "question_count": 0,
                }
            concept_weakness[concept_id]["total_questions"] += 1
            concept_weakness[concept_id]["avg_weakness"] += area["weakness_score"]
            concept_weakness[concept_id]["question_count"] += 1

    # Calculate concept-level insights
    concept_insights = []
    for concept_data in concept_weakness.values():
        if concept_data["question_count"] > 0:
            concept_data["avg_weakness"] /= concept_data["question_count"]
            concept_insights.append(concept_data)

    concept_insights.sort(key=lambda x: x["avg_weakness"], reverse=True)

    return {
        "weak_areas": weak_areas[:limit],
        "concept_insights": concept_insights[:5],  # Top 5 weak concepts
        "summary": {
            "total_questions_analyzed": len(question_performance),
            "weak_questions_found": len(
                [w for w in weak_areas if w["weakness_score"] > 0.5]
            ),
            "average_accuracy": (
                sum(w["performance_metrics"]["accuracy"] for w in weak_areas)
                / len(weak_areas)
                if weak_areas
                else 0
            ),
        },
    }


def _generate_weakness_recommendations(
    accuracy: float, consistency: float, time_trend: str, difficulty: str
) -> List[str]:
    """Generate personalized recommendations based on performance patterns"""
    recommendations = []

    if accuracy < 0.5:
        recommendations.append(
            "Focus on fundamental concepts - consider reviewing basic materials"
        )
    elif accuracy < 0.7:
        recommendations.append("Practice similar questions to build confidence")

    if consistency < 0.6:
        recommendations.append(
            "Work on consistency - review mistakes and understand why they occurred"
        )

    if time_trend == "struggling":
        recommendations.append("Take more time to understand concepts before answering")
    elif time_trend == "improving":
        recommendations.append("Great progress! Continue practicing at this pace")

    if difficulty == "hard" and accuracy < 0.6:
        recommendations.append(
            "Break down complex topics into smaller, manageable parts"
        )
    elif difficulty == "easy" and accuracy < 0.8:
        recommendations.append("Review basic concepts that may have been misunderstood")

    if not recommendations:
        recommendations.append("Continue practicing to maintain performance")

    return recommendations


@router.post("/voice-answer")
async def submit_voice_answer(
    question_id: int,
    audio_data: str,  # Base64 encoded audio
    db: AsyncSession = Depends(get_db),
):
    """
    Submit voice-based answer for processing
    """
    # This would integrate with speech-to-text service
    # For now, return placeholder response

    return {
        "question_id": question_id,
        "transcribed_answer": "Placeholder transcription",
        "confidence": 0.85,
        "is_correct": False,  # Would be determined by comparison
        "feedback": "Voice answer processing not yet implemented",
    }


@router.get("/stats/spaced-repetition")
async def get_spaced_repetition_stats(
    workspace_id: Optional[int] = None, db: AsyncSession = Depends(get_db)
):
    """
    Get spaced repetition statistics
    """
    # Get overall stats
    base_query = """
        SELECT
            COUNT(*) as total_questions,
            COUNT(CASE WHEN next_review <= datetime('now') THEN 1 END) as due_today,
            AVG(ease_factor) as avg_ease_factor,
            AVG(interval_days) as avg_interval,
            SUM(review_count) as total_reviews
        FROM spaced_repetition_data srd
        JOIN questions q ON srd.question_id = q.id
    """

    if workspace_id:
        base_query += " WHERE q.file_id IN (SELECT id FROM files WHERE workspace_id = :workspace_id)"

    from sqlalchemy import text

    result = await db.execute(text(base_query), {"workspace_id": workspace_id})
    stats = result.fetchone()

    return {
        "total_questions_tracked": stats.total_questions or 0,
        "questions_due_today": stats.due_today or 0,
        "average_ease_factor": stats.avg_ease_factor or 2.5,
        "average_interval_days": stats.avg_interval or 1,
        "total_reviews_completed": stats.total_reviews or 0,
    }


================================================================================
FILE: backend/app/routes/search.py
================================================================================

from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
from typing import List, Optional
import os
import re

router = APIRouter()


class SearchRequest(BaseModel):
    workspace_id: int
    query: str
    folder_path: str


class SearchMatch(BaseModel):
    line: int
    text: str


class SearchResult(BaseModel):
    path: str
    name: str
    matches: List[SearchMatch]


def is_text_file(file_path: str) -> bool:
    """Check if a file is a text file by examining its content using byte translation"""
    try:
        # Read first 1024 bytes and check if all bytes are text characters
        with open(file_path, "rb") as f:
            sample = f.read(1024)

        # Define valid text characters (control chars + printable ASCII)
        textchars = bytearray(
            {7, 8, 9, 10, 12, 13, 27} | set(range(0x20, 0x100)) - {0x7F}
        )

        # If translate removes all bytes, it's pure text; if bytes remain, it's binary
        return not bool(sample.translate(None, textchars))

    except (IOError, OSError):
        return False


def search_file_content(file_path: str, query: str) -> List[SearchMatch]:
    """Search for query in file content and return matches with line numbers"""
    matches = []
    try:
        with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
            for line_num, line in enumerate(f, 1):
                if query.lower() in line.lower():
                    # Get context around the match (up to 100 chars)
                    start = max(0, line.find(query) - 50)
                    end = min(len(line), line.find(query) + len(query) + 50)
                    context = line[start:end].strip()
                    if start > 0:
                        context = "..." + context
                    if end < len(line):
                        context = context + "..."

                    matches.append(SearchMatch(line=line_num, text=context))
    except (IOError, OSError) as e:
        print(f"Error reading file {file_path}: {e}")

    return matches


def search_directory(folder_path: str, query: str) -> List[SearchResult]:
    """Recursively search directory for files containing the query"""
    results = []

    try:
        for root, dirs, files in os.walk(folder_path):
            for file in files:
                file_path = os.path.join(root, file)

                # Skip certain directories and files
                if any(
                    skip in file_path
                    for skip in [
                        "node_modules",
                        ".git",
                        "__pycache__",
                        ".next",
                        "dist",
                        "build",
                    ]
                ):
                    continue

                if is_text_file(file_path):
                    matches = search_file_content(file_path, query)
                    if matches:
                        # Get relative path from folder_path
                        rel_path = os.path.relpath(file_path, folder_path)
                        results.append(
                            SearchResult(path=rel_path, name=file, matches=matches)
                        )
    except (OSError, IOError) as e:
        print(f"Error searching directory {folder_path}: {e}")

    return results


@router.post("/content", response_model=List[SearchResult])
async def search_content(request: SearchRequest):
    """Search for content within files in the workspace"""
    if not request.query or not request.query.strip():
        raise HTTPException(status_code=400, detail="Search query cannot be empty")

    if not os.path.exists(request.folder_path):
        raise HTTPException(status_code=404, detail="Workspace folder not found")

    try:
        results = search_directory(request.folder_path, request.query.strip())
        return results
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Search failed: {str(e)}")


================================================================================
FILE: backend/app/routes/workspaces.py
================================================================================

"""
Workspace API routes
"""

from fastapi import APIRouter, HTTPException, Depends
from typing import List

from app.models.workspace import (
    Workspace,
    WorkspaceCreate,
    WorkspaceUpdate,
    WorkspaceStats,
)
from app.services.workspace_service import WorkspaceService
from app.services.database import DatabaseService

# Create router
router = APIRouter()


# Dependency to get workspace service
def get_workspace_service() -> WorkspaceService:
    # Use singleton instance
    db_service = DatabaseService()
    return WorkspaceService(db_service)


@router.post("/", response_model=Workspace)
async def create_workspace(
    workspace: WorkspaceCreate,
    service: WorkspaceService = Depends(get_workspace_service),
):
    """Create a new workspace"""
    try:
        return service.create_workspace(workspace)
    except Exception as e:
        raise HTTPException(
            status_code=400, detail=f"Failed to create workspace: {str(e)}"
        )


@router.get("/", response_model=List[Workspace])
async def get_workspaces(service: WorkspaceService = Depends(get_workspace_service)):
    """Get all workspaces"""
    try:
        return service.get_all_workspaces()
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"Failed to get workspaces: {str(e)}"
        )


@router.get("/{workspace_id}", response_model=Workspace)
async def get_workspace(
    workspace_id: int, service: WorkspaceService = Depends(get_workspace_service)
):
    """Get a specific workspace by ID"""
    try:
        workspace = service.get_workspace(workspace_id)
        if not workspace:
            raise HTTPException(status_code=404, detail="Workspace not found")
        return workspace
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"Failed to get workspace: {str(e)}"
        )


@router.put("/{workspace_id}", response_model=Workspace)
async def update_workspace(
    workspace_id: int,
    workspace_update: WorkspaceUpdate,
    service: WorkspaceService = Depends(get_workspace_service),
):
    """Update a workspace"""
    try:
        workspace = service.update_workspace(workspace_id, workspace_update)
        if not workspace:
            raise HTTPException(status_code=404, detail="Workspace not found")
        return workspace
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"Failed to update workspace: {str(e)}"
        )


@router.delete("/{workspace_id}")
async def delete_workspace(
    workspace_id: int, service: WorkspaceService = Depends(get_workspace_service)
):
    """Delete a workspace"""
    try:
        success = service.delete_workspace(workspace_id)
        if not success:
            raise HTTPException(status_code=404, detail="Workspace not found")
        return {"message": "Workspace deleted successfully"}
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"Failed to delete workspace: {str(e)}"
        )


@router.get("/{workspace_id}/stats", response_model=WorkspaceStats)
async def get_workspace_stats(
    workspace_id: int, service: WorkspaceService = Depends(get_workspace_service)
):
    """Get detailed statistics for a workspace"""
    try:
        # Check if workspace exists
        workspace = service.get_workspace(workspace_id)
        if not workspace:
            raise HTTPException(status_code=404, detail="Workspace not found")

        return service.get_workspace_stats(workspace_id)
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=500, detail=f"Failed to get workspace stats: {str(e)}"
        )


================================================================================
FILE: backend/app/services/__init__.py
================================================================================

from .database import DatabaseService
from .workspace_service import WorkspaceService
from .knowledge_graph_service import KnowledgeGraphService
from .workspace_analysis_service import WorkspaceAnalysisService
from .workspace_topic_discovery_service import WorkspaceTopicDiscoveryService
from .embedding_service import EmbeddingService
from .quiz_service import QuizService

__all__ = [
    "DatabaseService",
    "WorkspaceService",
    "KnowledgeGraphService",
    "WorkspaceAnalysisService",
    "WorkspaceTopicDiscoveryService",
    "EmbeddingService",
    "QuizService",
]


================================================================================
FILE: backend/app/services/database.py
================================================================================

"""
Database service for SQLite operations with migration support
"""

import sqlite3
import json
from pathlib import Path
from typing import List, Dict, Any, Optional
from contextlib import contextmanager
import logging
import os

from .migration_service import MigrationService

logger = logging.getLogger(__name__)


class DatabaseService:
    _instance = None

    def __new__(cls, db_path: str = None):
        if cls._instance is None:
            cls._instance = super(DatabaseService, cls).__new__(cls)
            cls._instance._initialized = False
        return cls._instance

    def __init__(self, db_path: str = None):
        if self._initialized:
            return

        # Use environment variable if provided, otherwise default to user data
        if db_path is None:
            db_path = os.getenv(
                "DATABASE_PATH",
                os.path.join(os.path.expanduser("~"), ".recall", "recall.db"),
            )
        self.db_path = Path(db_path)
        self.db_path.parent.mkdir(parents=True, exist_ok=True)
        self._init_db()
        self._initialized = True

    def _init_db(self):
        """Initialize database with migrations"""
        # Initialize migration service
        migrations_dir = Path(__file__).parent.parent.parent / "migrations"
        self.migration_service = MigrationService(
            str(self.db_path), str(migrations_dir)
        )

        # Apply any pending migrations
        if self.migration_service.apply_pending_migrations():
            logger.info("Database migrations applied successfully")
        else:
            logger.error("Failed to apply database migrations")

        # For backward compatibility, also check for schema.sql if no migrations exist
        if not self.migration_service.get_migration_status()["applied_migrations"]:
            schema_path = (
                Path(__file__).parent.parent.parent.parent / "database" / "schema.sql"
            )
            if schema_path.exists():
                logger.info("No migrations found, falling back to schema.sql")
                with open(schema_path, "r") as f:
                    schema = f.read()

                with self.get_connection() as conn:
                    conn.executescript(schema)
                    logger.info("Database schema initialized from schema.sql")
            else:
                logger.warning(
                    f"Schema file not found at {schema_path}, skipping initialization"
                )

    @contextmanager
    def get_connection(self):
        """Context manager for database connections"""
        conn = sqlite3.connect(str(self.db_path))
        conn.row_factory = sqlite3.Row  # Enable column access by name
        try:
            yield conn
        finally:
            conn.close()

    def execute_query(self, query: str, params: tuple = ()) -> List[Dict[str, Any]]:
        """Execute a SELECT query and return results as dicts"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(query, params)
            rows = cursor.fetchall()
            return [dict(row) for row in rows]

    def execute_update(self, query: str, params: tuple = ()) -> int:
        """Execute an INSERT/UPDATE/DELETE query and return affected rows"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(query, params)
            conn.commit()
            return cursor.rowcount

    def execute_insert(self, query: str, params: tuple = ()) -> int:
        """Execute an INSERT query and return the last row ID"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(query, params)
            conn.commit()
            return cursor.lastrowid

    def execute_many(self, query: str, params_list: List[tuple]) -> int:
        """Execute multiple INSERT/UPDATE queries"""
        with self.get_connection() as conn:
            cursor = conn.cursor()
            cursor.executemany(query, params_list)
            conn.commit()
            return cursor.rowcount

    # Utility methods for JSON handling
    def _json_dumps(self, obj: Any) -> str:
        """Convert object to JSON string"""
        return json.dumps(obj) if obj is not None else None

    def _json_loads(self, json_str: str) -> Any:
        """Convert JSON string to object"""
        return json.loads(json_str) if json_str else None

    # Convenience methods for common operations
    def get_by_id(self, table: str, id: int) -> Optional[Dict[str, Any]]:
        """Get a single record by ID"""
        query = f"SELECT * FROM {table} WHERE id = ?"
        results = self.execute_query(query, (id,))
        return results[0] if results else None

    def get_all(
        self, table: str, limit: int = None, offset: int = 0
    ) -> List[Dict[str, Any]]:
        """Get all records from a table"""
        query = f"SELECT * FROM {table}"
        if limit:
            query += f" LIMIT {limit} OFFSET {offset}"
        return self.execute_query(query)

    def insert(self, table: str, data: Dict[str, Any]) -> int:
        """Insert a new record"""
        columns = ", ".join(data.keys())
        placeholders = ", ".join(["?"] * len(data))
        values = tuple(data.values())

        query = f"INSERT INTO {table} ({columns}) VALUES ({placeholders})"
        return self.execute_insert(query, values)

    def update(self, table: str, id: int, data: Dict[str, Any]) -> int:
        """Update a record by ID"""
        set_clause = ", ".join([f"{k} = ?" for k in data.keys()])
        values = tuple(data.values()) + (id,)

        query = f"UPDATE {table} SET {set_clause} WHERE id = ?"
        return self.execute_update(query, values)

    def delete(self, table: str, id: int) -> int:
        """Delete a record by ID"""
        query = f"DELETE FROM {table} WHERE id = ?"
        return self.execute_update(query, (id,))

    def count(self, table: str, where_clause: str = "", params: tuple = ()) -> int:
        """Count records in a table"""
        query = f"SELECT COUNT(*) as count FROM {table}"
        if where_clause:
            query += f" WHERE {where_clause}"
        result = self.execute_query(query, params)
        return result[0]["count"] if result else 0

    # Migration-related methods
    def get_migration_status(self) -> Dict[str, Any]:
        """Get current migration status"""
        return self.migration_service.get_migration_status()

    def create_migration(self, migration_id: str, description: str = "") -> Path:
        """Create a new migration file"""
        return self.migration_service.create_migration_file(migration_id, description)

    def apply_pending_migrations(self) -> bool:
        """Apply any pending migrations"""
        return self.migration_service.apply_pending_migrations()

    def rollback_migration(self, migration_id: str) -> bool:
        """Rollback a specific migration"""
        return self.migration_service.rollback_migration(migration_id)


================================================================================
FILE: backend/app/services/embedding_service.py
================================================================================

"""
Embedding Service for managing text embeddings and vector storage with ChromaDB
"""

from logging import log
import os
import json
import asyncio
from typing import List, Dict, Any, Optional, Tuple
from pathlib import Path
import chromadb
from chromadb.config import Settings
from sentence_transformers import SentenceTransformer
import numpy as np
from datetime import datetime
import hashlib
import torch


class EmbeddingService:
    """
    Singleton service for managing text embeddings with configurable models and ChromaDB storage
    """

    # Singleton instance
    _instance = None

    # Available embedding models with their configurations
    AVAILABLE_MODELS = {
        "sentence-transformers/all-MiniLM-L12-v2": {
            "dimensions": 384,
            "size_mb": 33,
            "description": "Improved version of L6-v2 with better performance (33MB)",
            "recommended": True,
        },
        "BAAI/bge-large-en-v1.5": {
            "dimensions": 1024,
            "size_mb": 334,
            "description": "High-performance model with excellent retrieval accuracy (334MB)",
            "recommended": False,
        },
        "nomic-ai/nomic-embed-text-v1.5": {
            "dimensions": 768,
            "size_mb": 274,
            "description": "Modern model with strong performance and efficiency (274MB)",
            "recommended": False,
        },
        "intfloat/e5-large-v2": {
            "dimensions": 1024,
            "size_mb": 336,
            "description": "Excellent general-purpose model with high accuracy (336MB)",
            "recommended": False,
        },
        "jinaai/jina-embeddings-v2-base-en": {
            "dimensions": 768,
            "size_mb": 554,
            "description": "Modern transformer-based model with strong multilingual support (554MB)",
            "recommended": False,
        },
        "sentence-transformers/all-mpnet-base-v2": {
            "dimensions": 768,
            "size_mb": 110,
            "description": "Established high-quality model with GPU acceleration (110MB)",
            "recommended": False,
        },
        "sentence-transformers/all-MiniLM-L6-v2": {
            "dimensions": 384,
            "size_mb": 23,
            "description": "Fast, lightweight general-purpose model (23MB)",
            "recommended": False,
        },
    }

    def __new__(cls, persist_directory: str = None):
        """Singleton pattern implementation"""
        if cls._instance is None:
            cls._instance = super(EmbeddingService, cls).__new__(cls)
        return cls._instance

    @classmethod
    def get_instance(cls, persist_directory: str = None) -> "EmbeddingService":
        """
        Get the singleton instance of EmbeddingService

        Args:
            persist_directory: Directory to store ChromaDB data (only used on first instantiation)

        Returns:
            The singleton EmbeddingService instance
        """
        if cls._instance is None:
            cls._instance = cls(persist_directory)
        return cls._instance

    def __init__(self, persist_directory: str = None):
        """
        Initialize the embedding service (called only once due to singleton pattern)

        Args:
            persist_directory: Directory to store ChromaDB data (defaults to user data dir)
        """
        # Only initialize once
        if hasattr(self, "_initialized"):
            return

        self._initialized = True
        """
        Initialize the embedding service

        Args:
            persist_directory: Directory to store ChromaDB data (defaults to user data dir)
        """
        if persist_directory is None:
            # Use user data directory by default (same as database)
            import os

            home_dir = os.path.expanduser("~")
            persist_directory = os.path.join(home_dir, ".recall", "embeddings")

        self.persist_directory = Path(persist_directory)
        self.persist_directory.mkdir(parents=True, exist_ok=True)

        # Current model state
        self.current_model_name = None
        self.current_model = None
        self.chroma_client = None
        self.collection = None

        # Model switching state
        self.model_switch_in_progress = False

    async def initialize(
        self, model_name: str = "nomic-ai/nomic-embed-text-v1.5"
    ) -> bool:
        """
        Initialize with a specific embedding model

        Args:
            model_name: Name of the embedding model to use

        Returns:
            True if initialization successful
        """
        try:
            # Validate model
            if model_name not in self.AVAILABLE_MODELS:
                raise ValueError(f"Unknown model: {model_name}")

            # Detect available device (GPU if available, otherwise CPU)
            device = "cuda" if torch.cuda.is_available() else "cpu"
            log.info(f"Initializing embedding model '{model_name}' on device: {device}")

            # Load model (this can take time)
            self.current_model = SentenceTransformer(model_name, device=device)
            self.current_model_name = model_name

            # Initialize ChromaDB client
            chroma_settings = Settings(
                persist_directory=str(self.persist_directory / model_name),
                is_persistent=True,
            )
            self.chroma_client = chromadb.PersistentClient(
                path=str(self.persist_directory / model_name), settings=chroma_settings
            )

            # Get or create collection for this model
            # Replace all non-alphanumeric characters with underscores for valid collection names
            safe_model_name = "".join(c if c.isalnum() else "_" for c in model_name)
            collection_name = f"workspace_concepts_{safe_model_name}"
            self.collection = self.chroma_client.get_or_create_collection(
                name=collection_name,
                metadata={
                    "model": model_name,
                    "dimensions": self.AVAILABLE_MODELS[model_name]["dimensions"],
                },
            )

            return True

        except Exception as e:
            print(f"Failed to initialize embedding service: {e}")
            return False

    async def switch_model(
        self, new_model_name: str, reembed_all: bool = False
    ) -> Dict[str, Any]:
        """
        Switch to a different embedding model

        Args:
            new_model_name: Name of the new model
            reembed_all: Whether to re-embed all existing content

        Returns:
            Status dictionary with results
        """
        if self.model_switch_in_progress:
            return {"success": False, "error": "Model switch already in progress"}

        if new_model_name == self.current_model_name:
            return {"success": True, "message": "Model already active"}

        self.model_switch_in_progress = True

        try:
            # Count existing embeddings if re-embedding
            existing_count = 0
            if reembed_all and self.collection:
                existing_count = self.collection.count()

            # Initialize new model
            success = await self.initialize(new_model_name)
            if not success:
                return {"success": False, "error": "Failed to initialize new model"}

            result = {
                "success": True,
                "old_model": self.current_model_name,
                "new_model": new_model_name,
                "reembedded": False,
            }

            # Re-embed all content if requested
            if reembed_all and existing_count > 0:
                # Note: In a full implementation, we'd need to:
                # 1. Get all existing concept-file links from database
                # 2. Re-extract text content
                # 3. Generate new embeddings
                # 4. Update ChromaDB collection
                # For now, we'll just clear the old collection
                # Use same safe naming convention as in initialize
                old_safe_name = "".join(
                    c if c.isalnum() else "_" for c in self.current_model_name
                )
                old_collection_name = f"workspace_concepts_{old_safe_name}"
                try:
                    old_client = chromadb.PersistentClient(
                        path=str(self.persist_directory / self.current_model_name)
                    )
                    old_client.delete_collection(old_collection_name)
                except:
                    pass  # Old collection might not exist

                result["reembedded"] = True
                result["message"] = (
                    f"Switched to {new_model_name}. Re-embedding of {existing_count} items needed."
                )

            return result

        except Exception as e:
            return {"success": False, "error": str(e)}

        finally:
            self.model_switch_in_progress = False

    def get_available_models(self) -> Dict[str, Dict[str, Any]]:
        """Get information about available embedding models"""
        return self.AVAILABLE_MODELS.copy()

    def get_current_model_info(self) -> Optional[Dict[str, Any]]:
        """Get information about the currently active model"""
        if not self.current_model_name:
            return None

        info = self.AVAILABLE_MODELS[self.current_model_name].copy()
        info["name"] = self.current_model_name
        info["active"] = True

        # Add device information
        if self.current_model:
            device = next(self.current_model.parameters()).device
            info["device"] = str(device)
            info["gpu_available"] = torch.cuda.is_available()
        else:
            info["device"] = "unknown"
            info["gpu_available"] = torch.cuda.is_available()

        # Add collection stats if available
        if self.collection:
            try:
                info["collection_count"] = self.collection.count()
            except:
                info["collection_count"] = 0

        return info

    async def embed_texts(self, texts: List[str]) -> List[List[float]]:
        """
        Generate embeddings for a list of texts

        Args:
            texts: List of text strings to embed

        Returns:
            List of embedding vectors
        """
        if not self.current_model:
            raise RuntimeError("Embedding service not initialized")

        # Run embedding in thread pool to avoid blocking
        loop = asyncio.get_event_loop()
        embeddings = await loop.run_in_executor(None, self.current_model.encode, texts)

        # Convert to list of lists
        if isinstance(embeddings, np.ndarray):
            embeddings = embeddings.tolist()

        return embeddings

    async def embed_text(self, text: str) -> List[float]:
        """
        Generate embedding for a single text

        Args:
            text: Text to embed

        Returns:
            Embedding vector
        """
        embeddings = await self.embed_texts([text])
        return embeddings[0]

    async def add_concept_embedding(
        self, concept_id: str, text: str, metadata: Optional[Dict[str, Any]] = None
    ) -> bool:
        """
        Add a concept embedding to the vector database

        Args:
            concept_id: Unique concept identifier
            text: Text content to embed
            metadata: Additional metadata

        Returns:
            True if successful
        """
        if not self.collection:
            return False

        try:
            # Generate embedding
            embedding = await self.embed_text(text)

            # Prepare metadata
            doc_metadata = metadata or {}
            doc_metadata.update(
                {
                    "concept_id": concept_id,
                    "model": self.current_model_name,
                    "created_at": datetime.utcnow().isoformat(),
                }
            )

            # Add to collection
            self.collection.add(
                ids=[concept_id],
                embeddings=[embedding],
                documents=[text],
                metadatas=[doc_metadata],
            )

            return True

        except Exception as e:
            print(f"Failed to add concept embedding: {e}")
            return False

    async def search_similar_concepts(
        self, query_text: str, limit: int = 10, threshold: float = 0.0
    ) -> List[Dict[str, Any]]:
        """
        Search for concepts similar to the query text

        Args:
            query_text: Text to search for
            limit: Maximum number of results
            threshold: Similarity threshold (0-1)

        Returns:
            List of similar concepts with scores
        """
        if not self.collection:
            return []

        try:
            # Generate query embedding
            query_embedding = await self.embed_text(query_text)

            # Search collection
            results = self.collection.query(
                query_embeddings=[query_embedding],
                n_results=limit,
                include=["documents", "metadatas", "distances"],
            )

            # Format results
            similar_concepts = []
            if results["ids"] and len(results["ids"][0]) > 0:
                for i, concept_id in enumerate(results["ids"][0]):
                    distance = results["distances"][0][i]
                    similarity = 1 - distance  # Convert distance to similarity

                    if similarity >= threshold:
                        similar_concepts.append(
                            {
                                "concept_id": concept_id,
                                "similarity": similarity,
                                "text": (
                                    results["documents"][0][i]
                                    if results["documents"]
                                    else ""
                                ),
                                "metadata": (
                                    results["metadatas"][0][i]
                                    if results["metadatas"]
                                    else {}
                                ),
                            }
                        )

            return similar_concepts

        except Exception as e:
            print(f"Failed to search similar concepts: {e}")
            return []

    async def update_concept_embedding(
        self, concept_id: str, new_text: str, metadata: Optional[Dict[str, Any]] = None
    ) -> bool:
        """
        Update an existing concept embedding

        Args:
            concept_id: Concept to update
            new_text: New text content
            metadata: Updated metadata

        Returns:
            True if successful
        """
        if not self.collection:
            return False

        try:
            # Remove old embedding
            self.collection.delete(ids=[concept_id])

            # Add new embedding
            return await self.add_concept_embedding(concept_id, new_text, metadata)

        except Exception as e:
            print(f"Failed to update concept embedding: {e}")
            return False

    async def remove_concept_embedding(self, concept_id: str) -> bool:
        """
        Remove a concept embedding from the database

        Args:
            concept_id: Concept to remove

        Returns:
            True if successful
        """
        if not self.collection:
            return False

        try:
            self.collection.delete(ids=[concept_id])
            return True
        except Exception as e:
            print(f"Failed to remove concept embedding: {e}")
            return False

    async def get_collection_stats(self) -> Dict[str, Any]:
        """Get statistics about the current collection"""
        if not self.collection:
            return {"error": "No collection available"}

        try:
            count = self.collection.count()
            return {
                "model": self.current_model_name,
                "total_concepts": count,
                "dimensions": self.AVAILABLE_MODELS.get(
                    self.current_model_name, {}
                ).get("dimensions", 0),
            }
        except Exception as e:
            return {"error": str(e)}

    def generate_concept_id(self, text: str, workspace_id: int) -> str:
        """
        Generate a deterministic concept ID from text and workspace

        Args:
            text: Concept text
            workspace_id: Workspace identifier

        Returns:
            Unique concept ID
        """
        # Create hash of text + workspace for deterministic ID
        content = f"{workspace_id}:{text.lower().strip()}"
        hash_obj = hashlib.sha256(content.encode())
        return hash_obj.hexdigest()[:32]  # First 32 chars of hash


================================================================================
FILE: backend/app/services/file_service.py
================================================================================

"""
File service for managing files in workspaces
"""

import os
import hashlib
from typing import List, Optional, Dict, Any
from datetime import datetime
from pathlib import Path

from app.models.file import (
    FileItem,
    FileCreate,
    FileUpdate,
    FileType,
    FileTreeNode,
)
from app.services.database import DatabaseService


class FileService:
    def __init__(self, db_service: DatabaseService):
        self.db_service = db_service

    def _get_file_type(self, filename: str) -> FileType:
        """Determine file type based on extension"""
        ext = Path(filename).suffix.lower()
        type_map = {
            ".txt": FileType.TEXT,
            ".md": FileType.MARKDOWN,
            ".markdown": FileType.MARKDOWN,
            ".py": FileType.CODE,
            ".js": FileType.CODE,
            ".ts": FileType.CODE,
            ".html": FileType.CODE,
            ".css": FileType.CODE,
            ".json": FileType.CODE,
            ".xml": FileType.CODE,
            ".pdf": FileType.PDF,
            ".jpg": FileType.IMAGE,
            ".jpeg": FileType.IMAGE,
            ".png": FileType.IMAGE,
            ".gif": FileType.IMAGE,
        }
        return type_map.get(ext, FileType.OTHER)

    def _calculate_content_hash(self, content: str) -> str:
        """Calculate SHA256 hash of content"""
        return hashlib.sha256(content.encode("utf-8")).hexdigest()

    def create_file(self, file_data: FileCreate) -> FileItem:
        """Create a new file"""
        with self.db_service.get_connection() as conn:
            cursor = conn.cursor()

            # Check if file path already exists in workspace
            cursor.execute(
                "SELECT id FROM files WHERE workspace_id = ? AND path = ?",
                (file_data.workspace_id, file_data.path),
            )
            if cursor.fetchone():
                raise ValueError(
                    f"File path '{file_data.path}' already exists in workspace"
                )

            # Calculate content hash if content provided
            content_hash = None
            if file_data.content:
                content_hash = self._calculate_content_hash(file_data.content)

            # Insert file record
            cursor.execute(
                """
                INSERT INTO files (
                    workspace_id, name, path, file_type, size,
                    content_hash, created_at, updated_at
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                """,
                (
                    file_data.workspace_id,
                    file_data.name,
                    file_data.path,
                    file_data.file_type.value,
                    file_data.size,
                    content_hash,
                    datetime.now(),
                    datetime.now(),
                ),
            )

            file_id = cursor.lastrowid

            # If content provided, we could store it in a separate content table
            # For now, we'll assume content is stored elsewhere or handled by frontend

            conn.commit()

            # Return created file
            return self.get_file(file_id)

    def get_file(self, file_id: int) -> Optional[FileItem]:
        """Get file by ID"""
        with self.db_service.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                """
                SELECT id, workspace_id, name, path, file_type, size,
                       content_hash, question_count, last_processed,
                       created_at, updated_at
                FROM files WHERE id = ?
                """,
                (file_id,),
            )
            row = cursor.fetchone()

            if not row:
                return None

            return FileItem(
                id=row[0],
                workspace_id=row[1],
                name=row[2],
                path=row[3],
                file_type=FileType(row[4]),
                size=row[5],
                content_hash=row[6],
                question_count=row[7] or 0,
                last_processed=row[8],
                created_at=row[9],
                updated_at=row[10],
            )

    def get_files_by_workspace(self, workspace_id: int) -> List[FileItem]:
        """Get all files in a workspace"""
        with self.db_service.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                """
                SELECT id, workspace_id, name, path, file_type, size,
                       content_hash, question_count, last_processed,
                       created_at, updated_at
                FROM files WHERE workspace_id = ?
                ORDER BY path
                """,
                (workspace_id,),
            )
            rows = cursor.fetchall()

            files = []
            for row in rows:
                files.append(
                    FileItem(
                        id=row[0],
                        workspace_id=row[1],
                        name=row[2],
                        path=row[3],
                        file_type=FileType(row[4]),
                        size=row[5],
                        content_hash=row[6],
                        question_count=row[7] or 0,
                        last_processed=row[8],
                        created_at=row[9],
                        updated_at=row[10],
                    )
                )

            return files

    def update_file(self, file_id: int, update_data: FileUpdate) -> Optional[FileItem]:
        """Update file information"""
        with self.db_service.get_connection() as conn:
            cursor = conn.cursor()

            # Check if file exists
            cursor.execute("SELECT id FROM files WHERE id = ?", (file_id,))
            if not cursor.fetchone():
                return None

            # Build update query dynamically
            update_fields = []
            values = []

            if update_data.name is not None:
                update_fields.append("name = ?")
                values.append(update_data.name)

            if update_data.path is not None:
                # Check if new path conflicts
                cursor.execute(
                    "SELECT id FROM files WHERE workspace_id = (SELECT workspace_id FROM files WHERE id = ?) AND path = ? AND id != ?",
                    (file_id, update_data.path, file_id),
                )
                if cursor.fetchone():
                    raise ValueError(f"File path '{update_data.path}' already exists")
                update_fields.append("path = ?")
                values.append(update_data.path)

            if update_data.content is not None:
                content_hash = self._calculate_content_hash(update_data.content)
                update_fields.append("content_hash = ?")
                values.append(content_hash)

            if not update_fields:
                return self.get_file(file_id)

            # Add updated_at
            update_fields.append("updated_at = ?")
            values.append(datetime.now())
            values.append(file_id)

            query = f"UPDATE files SET {', '.join(update_fields)} WHERE id = ?"
            cursor.execute(query, values)
            conn.commit()

            return self.get_file(file_id)

    def delete_file(self, file_id: int) -> bool:
        """Delete a file"""
        with self.db_service.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM files WHERE id = ?", (file_id,))
            conn.commit()
            return cursor.rowcount > 0

    def get_file_tree(self, workspace_id: int) -> List[FileTreeNode]:
        """Get file tree structure for workspace"""
        files = self.get_files_by_workspace(workspace_id)

        # Build tree structure
        tree_dict: Dict[str, FileTreeNode] = {}

        for file in files:
            path_parts = file.path.split("/")
            current_path = ""

            for i, part in enumerate(path_parts):
                current_path = f"{current_path}/{part}" if current_path else part
                is_file = i == len(path_parts) - 1

                if current_path not in tree_dict:
                    tree_dict[current_path] = FileTreeNode(
                        name=part,
                        path=current_path,
                        type="file" if is_file else "directory",
                        children=[] if not is_file else None,
                        file_info=file if is_file else None,
                    )

                # Add to parent
                if i > 0:
                    parent_path = "/".join(path_parts[:i])
                    if parent_path in tree_dict:
                        if tree_dict[parent_path].children is None:
                            tree_dict[parent_path].children = []
                        if (
                            tree_dict[current_path]
                            not in tree_dict[parent_path].children
                        ):
                            tree_dict[parent_path].children.append(
                                tree_dict[current_path]
                            )

        # Return root level items
        root_items = []
        for path, node in tree_dict.items():
            if "/" not in path:
                root_items.append(node)

        return root_items

    def get_file_content(self, file_id: int) -> Optional[str]:
        """Get file content (placeholder - would need content storage)"""
        # In a real implementation, you'd store file content in the database
        # or file system and retrieve it here
        # For now, return a placeholder
        file = self.get_file(file_id)
        if file:
            return f"// Content for {file.name}\n// This is a placeholder\n"
        return None

    def save_file_content(self, file_id: int, content: str) -> bool:
        """Save file content (placeholder)"""
        # In a real implementation, you'd save the content
        # and update the hash and size
        with self.db_service.get_connection() as conn:
            cursor = conn.cursor()

            content_hash = self._calculate_content_hash(content)
            size = len(content.encode("utf-8"))

            cursor.execute(
                "UPDATE files SET content_hash = ?, size = ?, updated_at = ? WHERE id = ?",
                (content_hash, size, datetime.now(), file_id),
            )
            conn.commit()
            return cursor.rowcount > 0

    def scan_workspace_folder(self, workspace_id: int) -> List[FileItem]:
        """Scan folder associated with workspace and create files"""
        # Get workspace to find folder path
        with self.db_service.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT folder_path FROM workspaces WHERE id = ?", (workspace_id,)
            )
            row = cursor.fetchone()

            if not row or not row[0]:
                raise ValueError("Workspace does not have an associated folder")

            folder_path = row[0]

        # Check if folder exists
        if not os.path.exists(folder_path):
            raise ValueError(f"Folder does not exist: {folder_path}")

        if not os.path.isdir(folder_path):
            raise ValueError(f"Path is not a directory: {folder_path}")

        # Scan folder for files
        created_files = []
        for root, dirs, files in os.walk(folder_path):
            # Skip common directories
            dirs[:] = [
                d
                for d in dirs
                if not d.startswith(".")
                and d not in ["node_modules", "__pycache__", ".git"]
            ]

            for file in files:
                file_path = os.path.join(root, file)

                # Get relative path from workspace folder
                rel_path = os.path.relpath(file_path, folder_path)

                # Check file type
                file_type = self._get_file_type(file)
                if file_type == FileType.OTHER:
                    continue  # Skip unsupported file types

                try:
                    # Read file content
                    with open(file_path, "r", encoding="utf-8") as f:
                        content = f.read()

                    # Create file in database
                    file_data = FileCreate(
                        name=file,
                        path=rel_path,
                        file_type=file_type,
                        size=len(content.encode("utf-8")),
                        workspace_id=workspace_id,
                        content=content,
                    )

                    created_file = self.create_file(file_data)
                    created_files.append(created_file)

                except (UnicodeDecodeError, IOError) as e:
                    # Skip files that can't be read as text
                    print(f"Skipping file {file_path}: {e}")
                    continue
                except ValueError as e:
                    # Skip files that already exist
                    if "already exists" in str(e):
                        print(f"File already exists: {rel_path}")
                        continue
                    else:
                        raise

        return created_files


================================================================================
FILE: backend/app/services/knowledge_graph_service.py
================================================================================

"""
Knowledge Graph Service for managing concepts, relationships, and concept-file links
"""

import uuid
from typing import List, Dict, Optional, Any
from datetime import datetime, UTC
from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncSession

from ..models import (
    Concept,
    Relationship,
    ConceptFile,
    ConceptCreate,
    RelationshipCreate,
    ConceptFileCreate,
)


class KnowledgeGraphService:
    def __init__(self, db: AsyncSession):
        self.db = db

    async def create_concept(self, concept_data: ConceptCreate) -> Concept:
        """Create a new concept"""
        # Generate UUID if not provided
        if not hasattr(concept_data, "concept_id") or not concept_data.concept_id:
            concept_data.concept_id = str(uuid.uuid4())

        # Create concept record
        query = text(
            """
            INSERT INTO concepts (concept_id, name, description, created_at, updated_at)
            VALUES (:concept_id, :name, :description, :created_at, :updated_at)
        """
        )

        await self.db.execute(
            query,
            {
                "concept_id": concept_data.concept_id,
                "name": concept_data.name,
                "description": concept_data.description,
                "created_at": datetime.now(UTC),
                "updated_at": datetime.now(UTC),
            },
        )

        # Commit the concept creation
        await self.db.commit()

        # Return the created concept
        return Concept(
            concept_id=concept_data.concept_id,
            name=concept_data.name,
            description=concept_data.description,
            created_at=datetime.now(UTC),
            updated_at=datetime.now(UTC),
        )

    async def get_concept(self, concept_id: str) -> Optional[Concept]:
        """Get a concept by ID"""
        query = text("SELECT * FROM concepts WHERE concept_id = :concept_id")
        result = await self.db.execute(query, {"concept_id": concept_id})
        row = result.fetchone()

        if row:
            return Concept(
                concept_id=row.concept_id,
                name=row.name,
                description=row.description,
                created_at=row.created_at,
                updated_at=row.updated_at,
            )
        return None

    async def update_concept(
        self,
        concept_id: str,
        name: Optional[str] = None,
        description: Optional[str] = None,
    ) -> Optional[Concept]:
        """Update a concept"""
        updates = {}
        if name is not None:
            updates["name"] = name
        if description is not None:
            updates["description"] = description

        if not updates:
            return await self.get_concept(concept_id)

        updates["updated_at"] = datetime.now(UTC)

        # Build dynamic update query
        set_clause = ", ".join(f"{key} = :{key}" for key in updates.keys())
        query = text(f"UPDATE concepts SET {set_clause} WHERE concept_id = :concept_id")

        updates["concept_id"] = concept_id

        await self.db.execute(query, updates)
        await self.db.commit()

        return await self.get_concept(concept_id)

    async def delete_concept(self, concept_id: str) -> bool:
        """Delete a concept (cascade will handle relationships and concept_files)"""
        query = text("DELETE FROM concepts WHERE concept_id = :concept_id")
        result = await self.db.execute(query, {"concept_id": concept_id})
        await self.db.commit()
        return result.rowcount > 0

    async def create_relationship(
        self, relationship_data: RelationshipCreate
    ) -> Relationship:
        """Create a relationship between concepts"""
        # Check if relationship already exists
        existing_query = text(
            """
            SELECT relationship_id FROM relationships
            WHERE (source_concept_id = :source AND target_concept_id = :target)
               OR (source_concept_id = :target AND target_concept_id = :source)
        """
        )

        result = await self.db.execute(
            existing_query,
            {
                "source": relationship_data.source_concept_id,
                "target": relationship_data.target_concept_id,
            },
        )

        existing = result.fetchone()
        if existing:
            # Return existing relationship instead of creating duplicate
            return await self._get_relationship_by_id(existing.relationship_id)

        # Generate UUID if not provided
        if (
            not hasattr(relationship_data, "relationship_id")
            or not relationship_data.relationship_id
        ):
            relationship_data.relationship_id = str(uuid.uuid4())

        query = text(
            """
            INSERT INTO relationships (relationship_id, source_concept_id, target_concept_id,
                                     type, strength, created_at)
            VALUES (:relationship_id, :source_concept_id, :target_concept_id,
                   :type, :strength, :created_at)
        """
        )

        await self.db.execute(
            query,
            {
                "relationship_id": relationship_data.relationship_id,
                "source_concept_id": relationship_data.source_concept_id,
                "target_concept_id": relationship_data.target_concept_id,
                "type": relationship_data.type,
                "strength": relationship_data.strength,
                "created_at": datetime.now(UTC),
            },
        )

        # Commit the relationship creation
        await self.db.commit()

        return Relationship(
            relationship_id=relationship_data.relationship_id,
            source_concept_id=relationship_data.source_concept_id,
            target_concept_id=relationship_data.target_concept_id,
            type=relationship_data.type,
            strength=relationship_data.strength,
            created_at=datetime.now(UTC),
        )

    async def _get_relationship_by_id(self, relationship_id: str) -> Relationship:
        """Get a relationship by ID"""
        query = text(
            "SELECT * FROM relationships WHERE relationship_id = :relationship_id"
        )
        result = await self.db.execute(query, {"relationship_id": relationship_id})
        row = result.fetchone()

        if row:
            return Relationship(
                relationship_id=row.relationship_id,
                source_concept_id=row.source_concept_id,
                target_concept_id=row.target_concept_id,
                type=row.type,
                strength=row.strength,
                created_at=row.created_at,
            )
        return None

    async def get_relationships_for_concept(
        self, concept_id: str
    ) -> List[Relationship]:
        """Get all relationships for a concept (as source or target)"""
        query = text(
            """
            SELECT * FROM relationships
            WHERE source_concept_id = :concept_id OR target_concept_id = :concept_id
        """
        )
        result = await self.db.execute(query, {"concept_id": concept_id})
        rows = result.fetchall()

        relationships = []
        for row in rows:
            relationships.append(
                Relationship(
                    relationship_id=row.relationship_id,
                    source_concept_id=row.source_concept_id,
                    target_concept_id=row.target_concept_id,
                    type=row.type,
                    strength=row.strength,
                    created_at=row.created_at,
                )
            )

        return relationships

    async def create_concept_file_link(
        self, link_data: ConceptFileCreate
    ) -> ConceptFile:
        """Create a link between a concept and a file"""
        # Generate UUID if not provided
        if not hasattr(link_data, "concept_file_id") or not link_data.concept_file_id:
            link_data.concept_file_id = str(uuid.uuid4())

        query = text(
            """
            INSERT INTO concept_files (concept_file_id, concept_id, file_id, workspace_id,
                                     snippet, relevance_score, last_accessed_at, start_line, end_line)
            VALUES (:concept_file_id, :concept_id, :file_id, :workspace_id,
                   :snippet, :relevance_score, :last_accessed_at, :start_line, :end_line)
        """
        )

        await self.db.execute(
            query,
            {
                "concept_file_id": link_data.concept_file_id,
                "concept_id": link_data.concept_id,
                "file_id": link_data.file_id,
                "workspace_id": link_data.workspace_id,
                "snippet": link_data.snippet,
                "relevance_score": link_data.relevance_score,
                "last_accessed_at": link_data.last_accessed_at,
                "start_line": link_data.start_line,
                "end_line": link_data.end_line,
            },
        )

        # Commit the concept-file link creation
        await self.db.commit()

        return ConceptFile(
            concept_file_id=link_data.concept_file_id,
            concept_id=link_data.concept_id,
            file_id=link_data.file_id,
            workspace_id=link_data.workspace_id,
            snippet=link_data.snippet,
            relevance_score=link_data.relevance_score,
            last_accessed_at=link_data.last_accessed_at,
            start_line=link_data.start_line,
            end_line=link_data.end_line,
        )

    async def get_files_for_concept(self, concept_id: str) -> List[ConceptFile]:
        """Get all files linked to a concept"""
        query = text("SELECT * FROM concept_files WHERE concept_id = :concept_id")
        result = await self.db.execute(query, {"concept_id": concept_id})
        rows = result.fetchall()

        files = []
        for row in rows:
            files.append(
                ConceptFile(
                    concept_file_id=row.concept_file_id,
                    concept_id=row.concept_id,
                    file_id=row.file_id,
                    workspace_id=row.workspace_id,
                    snippet=row.snippet,
                    relevance_score=row.relevance_score,
                    last_accessed_at=row.last_accessed_at,
                    start_line=row.start_line,
                    end_line=row.end_line,
                )
            )

        return files

    async def get_concepts_for_file(self, file_id: int) -> List[ConceptFile]:
        """Get all concepts linked to a file"""
        query = text("SELECT * FROM concept_files WHERE file_id = :file_id")
        result = await self.db.execute(query, {"file_id": file_id})
        rows = result.fetchall()

        concepts = []
        for row in rows:
            concepts.append(
                ConceptFile(
                    concept_file_id=row.concept_file_id,
                    concept_id=row.concept_id,
                    file_id=row.file_id,
                    workspace_id=row.workspace_id,
                    snippet=row.snippet,
                    relevance_score=row.relevance_score,
                    last_accessed_at=row.last_accessed_at,
                    start_line=row.start_line,
                    end_line=row.end_line,
                )
            )

        return concepts

    async def search_concepts(self, query_str: str, limit: int = 50) -> List[Concept]:
        """Search concepts by name or description"""
        search_query = text(
            """
            SELECT * FROM concepts
            WHERE name LIKE :query OR description LIKE :query
            ORDER BY name
            LIMIT :limit
        """
        )

        result = await self.db.execute(
            search_query, {"query": f"%{query_str}%", "limit": limit}
        )
        rows = result.fetchall()

        concepts = []
        for row in rows:
            concepts.append(
                Concept(
                    concept_id=row.concept_id,
                    name=row.name,
                    description=row.description,
                    created_at=row.created_at,
                    updated_at=row.updated_at,
                )
            )

        return concepts

    async def get_workspace_concepts(self, workspace_id: int) -> List[Dict[str, Any]]:
        """Get all concepts linked to files in a workspace"""
        query = text(
            """
            SELECT DISTINCT c.*, cf.relevance_score, cf.last_accessed_at
            FROM concepts c
            JOIN concept_files cf ON c.concept_id = cf.concept_id
            WHERE cf.workspace_id = :workspace_id
            ORDER BY cf.relevance_score DESC, cf.last_accessed_at DESC
        """
        )

        # Retry logic for SQLite database locked errors
        import asyncio

        max_retries = 10
        for attempt in range(max_retries):
            try:
                result = await self.db.execute(query, {"workspace_id": workspace_id})
                rows = result.fetchall()
                break
            except Exception as e:
                if "database is locked" in str(e).lower() and attempt < max_retries - 1:
                    # Longer exponential backoff for database locks
                    delay = 0.5 * (2**attempt)  # 0.5s, 1s, 2s, 4s, 8s...
                    print(
                        f"[KG] Database locked, retrying in {delay:.1f}s (attempt {attempt + 1}/{max_retries})"
                    )
                    await asyncio.sleep(delay)
                    continue
                else:
                    raise e

        concepts = []
        for row in rows:
            concepts.append(
                {
                    "concept": Concept(
                        concept_id=row.concept_id,
                        name=row.name,
                        description=row.description,
                        created_at=row.created_at,
                        updated_at=row.updated_at,
                    ),
                    "relevance_score": row.relevance_score,
                    "last_accessed_at": row.last_accessed_at,
                }
            )

        return concepts

    async def get_concept_graph(
        self, concept_id: str, depth: int = 2
    ) -> Dict[str, Any]:
        """Get a subgraph around a concept with relationships"""
        # This is a simplified implementation - in practice you'd want more sophisticated
        # graph traversal with proper depth limiting

        # Get the central concept
        central_concept = await self.get_concept(concept_id)
        if not central_concept:
            return {"nodes": [], "edges": []}

        nodes = [central_concept]
        edges = []

        # Get relationships
        relationships = await self.get_relationships_for_concept(concept_id)

        # Add related concepts to nodes
        concept_ids = {concept_id}
        for rel in relationships:
            edges.append(
                {
                    "id": rel.relationship_id,
                    "source": rel.source_concept_id,
                    "target": rel.target_concept_id,
                    "type": rel.type,
                    "strength": rel.strength,
                }
            )

            # Add target concept if not already included
            if rel.target_concept_id not in concept_ids:
                target_concept = await self.get_concept(rel.target_concept_id)
                if target_concept:
                    nodes.append(target_concept)
                    concept_ids.add(rel.target_concept_id)

            # Add source concept if not already included
            if rel.source_concept_id not in concept_ids:
                source_concept = await self.get_concept(rel.source_concept_id)
                if source_concept:
                    nodes.append(source_concept)
                    concept_ids.add(rel.source_concept_id)

        return {
            "nodes": [
                {"id": c.concept_id, "name": c.name, "description": c.description}
                for c in nodes
            ],
            "edges": edges,
        }


================================================================================
FILE: backend/app/services/migration_service.py
================================================================================

"""
Migration service for handling database schema changes
Similar to Liquibase but implemented in Python for SQLite
"""

import os
import sqlite3
import logging
import sys
from pathlib import Path
from typing import List, Dict, Any, Optional
from datetime import datetime

logger = logging.getLogger(__name__)


class MigrationService:
    def __init__(self, db_path: str, migrations_dir: str = None):
        self.db_path = Path(db_path)
        if migrations_dir:
            self.migrations_dir = Path(migrations_dir)
        elif getattr(sys, "frozen", False) and hasattr(sys, "_MEIPASS"):
            # Running in a PyInstaller bundle
            self.migrations_dir = Path(sys._MEIPASS) / "migrations"
        else:
            # Running in development
            self.migrations_dir = Path(__file__).parent.parent.parent / "migrations"

        self.migrations_dir.mkdir(parents=True, exist_ok=True)
        logger.debug(f"Migrations directory set to: {self.migrations_dir}")
        self._init_migration_table()

    def _init_migration_table(self):
        """Initialize the migrations tracking table"""
        with sqlite3.connect(str(self.db_path)) as conn:
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS schema_migrations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    migration_id TEXT NOT NULL UNIQUE,
                    description TEXT,
                    applied_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    checksum TEXT
                )
            """
            )
            conn.commit()

    def get_applied_migrations(self) -> List[str]:
        """Get list of applied migration IDs"""
        with sqlite3.connect(str(self.db_path)) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT migration_id FROM schema_migrations ORDER BY id")
            return [row[0] for row in cursor.fetchall()]

    def apply_migration(self, migration_file: Path) -> bool:
        """Apply a single migration file"""
        migration_id = migration_file.stem

        # Check if already applied
        applied = self.get_applied_migrations()
        if migration_id in applied:
            logger.info(f"Migration {migration_id} already applied, skipping")
            return True

        try:
            # Read migration content
            with open(migration_file, "r", encoding="utf-8") as f:
                sql_content = f.read()

            # Calculate checksum (simple hash)
            checksum = str(hash(sql_content))

            # Apply migration
            with sqlite3.connect(str(self.db_path)) as conn:
                # Execute the migration SQL
                conn.executescript(sql_content)

                # Record the migration
                conn.execute(
                    """
                    INSERT INTO schema_migrations (migration_id, description, checksum)
                    VALUES (?, ?, ?)
                """,
                    (migration_id, migration_file.name, checksum),
                )

                conn.commit()

            logger.info(f"Successfully applied migration: {migration_id}")
            return True

        except Exception as e:
            logger.error(f"Failed to apply migration {migration_id}: {e}")
            return False

    def apply_pending_migrations(self) -> bool:
        """Apply all pending migrations in order"""
        migration_files = self._get_migration_files()

        if not migration_files:
            logger.info(f"No migration files found in {self.migrations_dir}")
            return True
        logger.debug(f"Found migration files: {[f.name for f in migration_files]}")

        applied = self.get_applied_migrations()
        pending = [f for f in migration_files if f.stem not in applied]

        if not pending:
            logger.info("No pending migrations")
            return True

        # Sort by filename (assuming V001__, V002__, etc.)
        pending.sort(key=lambda x: x.name)

        success = True
        for migration_file in pending:
            if not self.apply_migration(migration_file):
                success = False
                break

        return success

    def _get_migration_files(self) -> List[Path]:
        """Get all migration files from migrations directory"""
        if not self.migrations_dir.exists():
            return []

        migration_files = []
        for file in self.migrations_dir.iterdir():
            if file.is_file() and file.suffix.lower() == ".sql":
                migration_files.append(file)

        return migration_files

    def create_migration_file(self, migration_id: str, description: str = "") -> Path:
        """Create a new migration file template"""
        filename = f"{migration_id}.sql"
        filepath = self.migrations_dir / filename

        template = f"""-- Migration: {migration_id}
-- Description: {description}
-- Created: {datetime.now().isoformat()}

-- Add your SQL migration statements here
-- Example:
-- ALTER TABLE users ADD COLUMN email TEXT;
-- CREATE INDEX idx_users_email ON users(email);

"""

        with open(filepath, "w", encoding="utf-8") as f:
            f.write(template)

        logger.info(f"Created migration file: {filepath}")
        return filepath

    def get_migration_status(self) -> Dict[str, Any]:
        """Get current migration status"""
        applied = self.get_applied_migrations()
        available = [f.stem for f in self._get_migration_files()]

        return {
            "applied_migrations": applied,
            "available_migrations": available,
            "pending_migrations": [m for m in available if m not in applied],
        }

    def rollback_migration(self, migration_id: str) -> bool:
        """Rollback a specific migration (if rollback script exists)"""
        rollback_file = self.migrations_dir / f"{migration_id}_rollback.sql"

        if not rollback_file.exists():
            logger.error(f"Rollback file not found: {rollback_file}")
            return False

        try:
            with open(rollback_file, "r", encoding="utf-8") as f:
                sql_content = f.read()

            with sqlite3.connect(str(self.db_path)) as conn:
                conn.executescript(sql_content)
                conn.execute(
                    "DELETE FROM schema_migrations WHERE migration_id = ?",
                    (migration_id,),
                )
                conn.commit()

            logger.info(f"Successfully rolled back migration: {migration_id}")
            return True

        except Exception as e:
            logger.error(f"Failed to rollback migration {migration_id}: {e}")
            return False


================================================================================
FILE: backend/app/services/quiz_service.py
================================================================================

"""
Quiz Service for LLM-powered question generation and spaced repetition
"""

import math
import os
from typing import List, Dict, Optional, Any
from datetime import datetime, timedelta, UTC
from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncSession

from ..models import (
    Question,
    QuestionCreate,
    SpacedRepetitionData,
    Answer,
    QuizSession,
    Concept,
)
from ..llm_clients import llm_client_factory as LLMFactory


class SpacedRepetitionEngine:
    """SM-2 Spaced Repetition Algorithm Implementation"""

    def __init__(self):
        self.default_ease_factor = 2.5
        self.min_ease_factor = 1.3
        self.max_ease_factor = 3.0

    def calculate_next_review(
        self,
        ease_factor: float,
        interval_days: int,
        review_count: int,
        quality: int,  # 0-5 quality rating
        last_review: Optional[datetime] = None,
    ) -> tuple[float, int, datetime]:
        """
        Calculate next review date using SM-2 algorithm

        Args:
            ease_factor: Current ease factor
            interval_days: Current interval in days
            review_count: Number of times reviewed
            quality: Quality of response (0-5)
            last_review: Last review date

        Returns:
            Tuple of (new_ease_factor, new_interval_days, next_review_date)
        """
        if quality < 3:
            # Failed response - reset to 1 day
            new_interval = 1
            new_ease_factor = max(self.min_ease_factor, ease_factor - 0.2)
            new_review_count = 0
        else:
            # Successful response
            if review_count == 0:
                new_interval = 1
            elif review_count == 1:
                new_interval = 6
            else:
                new_interval = round(interval_days * ease_factor)

            # Adjust ease factor based on quality
            quality_modifier = (
                5 - quality
            ) * 0.1  # 0.0 for quality=5, 0.2 for quality=3
            new_ease_factor = max(
                self.min_ease_factor,
                min(self.max_ease_factor, ease_factor + (0.1 - quality_modifier)),
            )
            new_review_count = review_count + 1

        # Calculate next review date
        base_date = last_review or datetime.now(UTC)
        next_review = base_date + timedelta(days=new_interval)

        return new_ease_factor, new_interval, next_review


class QuizService:
    def __init__(self, db: AsyncSession, llm_factory=None):
        self.db = db
        self.llm_factory = llm_factory or LLMFactory
        self.spaced_repetition = SpacedRepetitionEngine()

    async def generate_llm_questions(
        self,
        file_content: str,
        file_id: int,
        count: int = 5,
        question_types: Optional[List[str]] = None,
        difficulty: Optional[str] = None,
        concept_ids: Optional[List[str]] = None,
    ) -> List[Question]:
        """
        Generate questions using LLM based on file content

        Args:
            file_content: The text content of the file
            file_id: ID of the source file
            count: Number of questions to generate
            question_types: Types of questions to generate
            difficulty: Difficulty level
            concept_ids: Knowledge graph concept IDs to link

        Returns:
            List of generated Question objects
        """
        # Get LLM client
        llm_client = self.llm_factory.get_client()

        # Prepare prompt
        prompt = self._build_generation_prompt(
            file_content, count, question_types, difficulty
        )

        # Generate questions
        try:
            response = await llm_client.generate_text(prompt)
            questions_data = self._parse_llm_response(response)

            # Create Question objects
            questions = []
            for q_data in questions_data[:count]:
                question = QuestionCreate(
                    file_id=file_id,
                    question_type=q_data.get("type", "multiple_choice"),
                    question_text=q_data["question"],
                    correct_answer=q_data["answer"],
                    options=q_data.get("options"),
                    explanation=q_data.get("explanation"),
                    difficulty=difficulty or "medium",
                    generated_by_llm=True,
                    generation_prompt=prompt,
                    confidence_score=q_data.get("confidence", 0.8),
                    kg_concept_ids=concept_ids or [],
                )

                # Save to database
                saved_question = await self._save_question(question)
                questions.append(saved_question)

            return questions

        except Exception as e:
            # Fallback to basic question generation if LLM fails
            print(f"LLM generation failed: {e}")
            return []

    def _build_generation_prompt(
        self,
        content: str,
        count: int,
        question_types: Optional[List[str]] = None,
        difficulty: Optional[str] = None,
    ) -> str:
        """Build the prompt for LLM question generation"""
        types_str = (
            ", ".join(question_types)
            if question_types
            else "multiple choice, true/false, short answer"
        )
        difficulty_str = f" at {difficulty} difficulty level" if difficulty else ""

        prompt = f"""
Generate {count} diverse quiz questions from the following content{difficulty_str}.
Focus on key concepts, facts, and relationships in the text.

Question types to include: {types_str}

Requirements:
- Mix different question types appropriately
- Ensure questions test understanding, not just memorization
- Provide clear, concise correct answers
- Include brief explanations where helpful
- For multiple choice questions, provide 4 options with one clearly correct
- Rate your confidence in each question (0.0-1.0)

Content:
{content[:4000]}  # Truncate if too long

Output format: JSON array of objects with this structure:
[
  {{
    "question": "Question text here",
    "type": "multiple_choice|true_false|short_answer|fill_blank",
    "answer": "Correct answer",
    "options": ["A", "B", "C", "D"] // only for multiple_choice
    "explanation": "Brief explanation",
    "confidence": 0.85
  }}
]
"""
        return prompt

    def _parse_llm_response(self, response: str) -> List[Dict[str, Any]]:
        """Parse LLM response into structured question data"""
        import json

        try:
            # Try to extract JSON from response
            start_idx = response.find("[")
            end_idx = response.rfind("]") + 1
            if start_idx != -1 and end_idx > start_idx:
                json_str = response[start_idx:end_idx]
                return json.loads(json_str)
            else:
                # Fallback: try parsing the whole response
                return json.loads(response)
        except json.JSONDecodeError:
            # If JSON parsing fails, return empty list
            print(f"Failed to parse LLM response: {response}")
            return []

    async def _save_question(self, question_data: QuestionCreate) -> Question:
        """Save a question to the database"""
        # Insert question
        query = text(
            """
            INSERT INTO questions (
                file_id, question_type, question_text, correct_answer,
                options, explanation, difficulty, tags,
                generated_by_llm, generation_prompt, confidence_score, kg_concept_ids,
                created_at, times_asked, times_correct
            )
            VALUES (
                :file_id, :question_type, :question_text, :correct_answer,
                :options, :explanation, :difficulty, :tags,
                :generated_by_llm, :generation_prompt, :confidence_score, :kg_concept_ids,
                :created_at, 0, 0
            )
        """
        )

        # Convert options list to JSON string if needed
        options_json = None
        if question_data.options:
            import json

            options_json = json.dumps(question_data.options)

        # Convert concept_ids list to JSON string
        kg_concept_ids_json = None
        if question_data.kg_concept_ids:
            import json

            kg_concept_ids_json = json.dumps(question_data.kg_concept_ids)

        result = await self.db.execute(
            query,
            {
                "file_id": question_data.file_id,
                "question_type": question_data.question_type,
                "question_text": question_data.question_text,
                "correct_answer": question_data.correct_answer,
                "options": options_json,
                "explanation": question_data.explanation,
                "difficulty": question_data.difficulty,
                "tags": None,  # Could be extended
                "generated_by_llm": question_data.generated_by_llm,
                "generation_prompt": question_data.generation_prompt,
                "confidence_score": question_data.confidence_score,
                "kg_concept_ids": kg_concept_ids_json,
                "created_at": datetime.now(UTC),
            },
        )

        await self.db.commit()

        # Get the inserted question ID
        question_id = result.lastrowid

        # Return Question object
        return Question(
            id=question_id,
            file_id=question_data.file_id,
            question_type=question_data.question_type,
            question_text=question_data.question_text,
            correct_answer=question_data.correct_answer,
            options=question_data.options,
            explanation=question_data.explanation,
            difficulty=question_data.difficulty,
            tags=question_data.tags,
            generated_by_llm=question_data.generated_by_llm,
            generation_prompt=question_data.generation_prompt,
            confidence_score=question_data.confidence_score,
            kg_concept_ids=question_data.kg_concept_ids,
            created_at=datetime.now(UTC),
            times_asked=0,
            times_correct=0,
            last_asked=None,
        )

    async def update_spaced_repetition(
        self, question_id: int, answer_quality: int, concept_id: Optional[str] = None
    ) -> SpacedRepetitionData:
        """
        Update spaced repetition data based on answer quality

        Args:
            question_id: ID of the question answered
            answer_quality: Quality rating (0-5)
            concept_id: Optional knowledge graph concept ID

        Returns:
            Updated SpacedRepetitionData object
        """
        # Get existing spaced repetition data
        query = text(
            """
            SELECT * FROM spaced_repetition_data
            WHERE question_id = :question_id
        """
        )
        result = await self.db.execute(query, {"question_id": question_id})
        row = result.fetchone()

        if row:
            # Update existing record
            ease_factor = row.ease_factor
            interval_days = row.interval_days
            review_count = row.review_count
            last_review = row.next_review or datetime.now(UTC)
            # Ensure last_review is a datetime object
            if isinstance(last_review, str):
                last_review = datetime.fromisoformat(last_review.replace("Z", "+00:00"))
        else:
            # Create new record
            ease_factor = self.spaced_repetition.default_ease_factor
            interval_days = 1
            review_count = 0
            last_review = datetime.now(UTC)

        # Calculate new values
        new_ease_factor, new_interval, next_review = (
            self.spaced_repetition.calculate_next_review(
                ease_factor, interval_days, review_count, answer_quality, last_review
            )
        )

        # Update or insert record
        if row:
            update_query = text(
                """
                UPDATE spaced_repetition_data
                SET ease_factor = :ease_factor,
                    interval_days = :interval_days,
                    review_count = :review_count,
                    next_review = :next_review,
                    kg_concept_id = :kg_concept_id
                WHERE question_id = :question_id
            """
            )
            await self.db.execute(
                update_query,
                {
                    "ease_factor": new_ease_factor,
                    "interval_days": new_interval,
                    "review_count": review_count + (1 if answer_quality >= 3 else 0),
                    "next_review": next_review,
                    "kg_concept_id": concept_id,
                    "question_id": question_id,
                },
            )
        else:
            insert_query = text(
                """
                INSERT INTO spaced_repetition_data (
                    question_id, ease_factor, interval_days, review_count,
                    next_review, kg_concept_id
                ) VALUES (
                    :question_id, :ease_factor, :interval_days, :review_count,
                    :next_review, :kg_concept_id
                )
            """
            )
            await self.db.execute(
                insert_query,
                {
                    "question_id": question_id,
                    "ease_factor": new_ease_factor,
                    "interval_days": new_interval,
                    "review_count": 1 if answer_quality >= 3 else 0,
                    "next_review": next_review,
                    "kg_concept_id": concept_id,
                },
            )

        await self.db.commit()

        # Return updated data
        return SpacedRepetitionData(
            id=row.id if row else None,  # This would need to be fetched properly
            question_id=question_id,
            ease_factor=new_ease_factor,
            interval_days=new_interval,
            review_count=review_count + (1 if answer_quality >= 3 else 0),
            next_review=next_review,
            kg_concept_id=concept_id,
        )

    async def get_questions_due_for_review(
        self, limit: int = 20, concept_ids: Optional[List[str]] = None
    ) -> List[Dict[str, Any]]:
        """
        Get questions due for spaced repetition review

        Args:
            limit: Maximum number of questions to return
            concept_ids: Optional filter by knowledge graph concepts

        Returns:
            List of dicts with question and spaced repetition data
        """
        base_query = """
            SELECT q.*, srd.ease_factor, srd.interval_days, srd.review_count,
                   srd.next_review, srd.kg_concept_id
            FROM questions q
            JOIN spaced_repetition_data srd ON q.id = srd.question_id
            WHERE srd.next_review <= :now
        """

        params = {"now": datetime.now(UTC), "limit": limit}

        if concept_ids:
            # Filter by concepts if provided
            concept_placeholders = ", ".join(
                f":concept_{i}" for i in range(len(concept_ids))
            )
            base_query += f" AND srd.kg_concept_id IN ({concept_placeholders})"
            for i, concept_id in enumerate(concept_ids):
                params[f"concept_{i}"] = concept_id

        base_query += " ORDER BY srd.next_review ASC LIMIT :limit"

        query = text(base_query)
        result = await self.db.execute(query, params)
        rows = result.fetchall()

        questions = []
        for row in rows:
            # Parse options and concept_ids from JSON
            import json

            options = json.loads(row.options) if row.options else None
            kg_concept_ids = (
                json.loads(row.kg_concept_ids) if row.kg_concept_ids else None
            )

            question = Question(
                id=row.id,
                file_id=row.file_id,
                question_type=row.question_type,
                question_text=row.question_text,
                correct_answer=row.correct_answer,
                options=options,
                explanation=row.explanation,
                difficulty=row.difficulty,
                tags=None,  # Could be extended
                generated_by_llm=row.generated_by_llm,
                generation_prompt=row.generation_prompt,
                confidence_score=row.confidence_score,
                kg_concept_ids=kg_concept_ids,
                created_at=row.created_at,
                times_asked=row.times_asked,
                times_correct=row.times_correct,
                last_asked=row.last_asked,
            )

            questions.append(
                {
                    "question": question,
                    "spaced_repetition_data": SpacedRepetitionData(
                        id=None,  # Not fetched
                        question_id=row.id,
                        ease_factor=row.ease_factor,
                        interval_days=row.interval_days,
                        review_count=row.review_count,
                        next_review=row.next_review,
                        kg_concept_id=row.kg_concept_id,
                    ),
                }
            )

        return questions

    async def get_adaptive_question_set(
        self,
        workspace_id: int,
        count: int = 10,
        user_performance: Optional[Dict[str, Any]] = None,
    ) -> List[Question]:
        """
        Generate an adaptive question set based on user performance and knowledge graph

        Args:
            workspace_id: Workspace to generate questions for
            count: Number of questions to return
            user_performance: Optional performance data for adaptation

        Returns:
            List of questions optimized for learning
        """
        # Get existing questions from workspace
        existing_questions = await self._get_workspace_questions(workspace_id)

        if not existing_questions:
            # If no questions exist, generate new ones using content analysis
            return await self._generate_adaptive_from_content(workspace_id, count)

        # Analyze user performance to determine focus areas
        performance_analysis = await self._analyze_user_performance(
            workspace_id, user_performance
        )

        # Select questions based on performance gaps and diversity
        selected_questions = self._select_adaptive_questions(
            existing_questions, performance_analysis, count
        )

        # If we need more questions, generate them
        if len(selected_questions) < count:
            additional_needed = count - len(selected_questions)
            new_questions = await self._generate_adaptive_from_content(
                workspace_id, additional_needed, performance_analysis
            )
            selected_questions.extend(new_questions)

        return selected_questions[:count]

    async def _get_workspace_questions(self, workspace_id: int) -> List[Question]:
        """Get all questions from a workspace"""
        query = text(
            """
            SELECT q.* FROM questions q
            JOIN files f ON q.file_id = f.id
            WHERE f.workspace_id = :workspace_id
        """
        )

        result = await self.db.execute(query, {"workspace_id": workspace_id})
        rows = result.fetchall()

        questions = []
        for row in rows:
            import json

            options = json.loads(row.options) if row.options else None
            kg_concept_ids = (
                json.loads(row.kg_concept_ids) if row.kg_concept_ids else None
            )

            question = Question(
                id=row.id,
                file_id=row.file_id,
                question_type=row.question_type,
                question_text=row.question_text,
                correct_answer=row.correct_answer,
                options=options,
                explanation=row.explanation,
                difficulty=row.difficulty,
                tags=None,
                generated_by_llm=row.generated_by_llm,
                generation_prompt=row.generation_prompt,
                confidence_score=row.confidence_score,
                kg_concept_ids=kg_concept_ids,
                created_at=row.created_at,
                times_asked=row.times_asked,
                times_correct=row.times_correct,
                last_asked=row.last_asked,
            )
            questions.append(question)

        return questions

    async def _analyze_user_performance(
        self, workspace_id: int, user_performance: Optional[Dict[str, Any]] = None
    ) -> Dict[str, Any]:
        """Analyze user performance patterns"""
        # Get performance data from database
        query = text(
            """
            SELECT
                q.id,
                q.difficulty,
                q.kg_concept_ids,
                COUNT(a.id) as times_asked,
                SUM(CASE WHEN a.is_correct THEN 1 ELSE 0 END) as times_correct,
                AVG(a.time_taken) as avg_time
            FROM questions q
            JOIN files f ON q.file_id = f.id
            LEFT JOIN answers a ON q.id = a.question_id
            WHERE f.workspace_id = :workspace_id
            GROUP BY q.id, q.difficulty, q.kg_concept_ids
        """
        )

        result = await self.db.execute(query, {"workspace_id": workspace_id})
        rows = result.fetchall()

        performance_data = {
            "difficulty_performance": {"easy": [], "medium": [], "hard": []},
            "concept_performance": {},
            "overall_accuracy": 0,
            "total_questions": len(rows),
        }

        total_correct = 0
        total_asked = 0

        for row in rows:
            if row.times_asked and row.times_asked > 0:
                accuracy = row.times_correct / row.times_asked
                total_correct += row.times_correct
                total_asked += row.times_asked

                # Track difficulty performance
                performance_data["difficulty_performance"][row.difficulty].append(
                    accuracy
                )

                # Track concept performance
                import json

                concept_ids = (
                    json.loads(row.kg_concept_ids) if row.kg_concept_ids else []
                )
                for concept_id in concept_ids:
                    if concept_id not in performance_data["concept_performance"]:
                        performance_data["concept_performance"][concept_id] = []
                    performance_data["concept_performance"][concept_id].append(accuracy)

        performance_data["overall_accuracy"] = (
            total_correct / total_asked if total_asked > 0 else 0
        )

        return performance_data

    def _select_adaptive_questions(
        self,
        questions: List[Question],
        performance_analysis: Dict[str, Any],
        count: int,
    ) -> List[Question]:
        """Select questions adaptively based on performance analysis"""
        if not questions:
            return []

        # Score questions based on learning needs
        scored_questions = []

        for question in questions:
            score = 0

            # Prioritize questions user struggles with (lower accuracy)
            if question.times_asked > 0:
                accuracy = question.times_correct / question.times_asked
                # Lower accuracy = higher priority (inverse relationship)
                score += (1 - accuracy) * 2
            else:
                # Never asked questions get medium priority
                score += 1

            # Factor in difficulty balance
            difficulty_scores = {
                "easy": 0.5,  # Less priority for easy questions
                "medium": 1.0,  # Normal priority
                "hard": 1.5,  # Higher priority for challenging questions
            }
            score *= difficulty_scores.get(question.difficulty, 1.0)

            # Recency factor - prefer questions not asked recently
            if question.last_asked:
                days_since_asked = (datetime.now(UTC) - question.last_asked).days
                recency_boost = min(
                    days_since_asked / 7, 2
                )  # Max 2x boost after a week
                score *= 1 + recency_boost
            else:
                score *= 1.5  # Boost for never asked

            scored_questions.append((question, score))

        # Sort by score (highest first) and return top questions
        scored_questions.sort(key=lambda x: x[1], reverse=True)
        return [q for q, s in scored_questions[:count]]

    async def _generate_adaptive_from_content(
        self,
        workspace_id: int,
        count: int,
        performance_analysis: Optional[Dict[str, Any]] = None,
    ) -> List[Question]:
        """Generate new questions from workspace content based on performance gaps"""
        # Get workspace files
        files_query = text(
            "SELECT id, path FROM files WHERE workspace_id = :workspace_id"
        )
        files_result = await self.db.execute(
            files_query, {"workspace_id": workspace_id}
        )
        files = files_result.fetchall()

        if not files:
            return []

        generated_questions = []

        # Analyze content from files to generate questions
        for file_row in files[:5]:  # Limit to first 5 files for performance
            try:
                # Read file content (simplified - would use proper file reading)
                file_path = file_row.path
                if os.path.exists(file_path):
                    with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
                        content = f.read()[:2000]  # Limit content size

                    # Generate questions based on content analysis
                    questions = await self.generate_llm_questions(
                        file_content=content,
                        file_id=file_row.id,
                        count=min(
                            3, count - len(generated_questions)
                        ),  # Distribute across files
                        question_types=[
                            "multiple_choice",
                            "short_answer",
                            "true_false",
                        ],
                        difficulty=self._determine_optimal_difficulty(
                            performance_analysis
                        ),
                    )

                    generated_questions.extend(questions)

                    if len(generated_questions) >= count:
                        break

            except Exception as e:
                print(f"Error generating questions from file {file_row.path}: {e}")
                continue

        return generated_questions[:count]

    def _determine_optimal_difficulty(
        self, performance_analysis: Optional[Dict[str, Any]]
    ) -> str:
        """Determine optimal difficulty based on performance analysis"""
        if not performance_analysis:
            return "medium"

        # Analyze difficulty performance
        difficulty_performance = performance_analysis.get("difficulty_performance", {})

        # Calculate average performance per difficulty
        difficulty_averages = {}
        for difficulty, accuracies in difficulty_performance.items():
            if accuracies:
                difficulty_averages[difficulty] = sum(accuracies) / len(accuracies)
            else:
                difficulty_averages[difficulty] = 0.5  # Default

        # Choose difficulty where user performs around 70-80% accuracy
        target_accuracy = 0.75

        best_difficulty = "medium"
        best_distance = abs(difficulty_averages.get("medium", 0.5) - target_accuracy)

        for difficulty, avg_accuracy in difficulty_averages.items():
            distance = abs(avg_accuracy - target_accuracy)
            if distance < best_distance:
                best_difficulty = difficulty
                best_distance = distance

        return best_difficulty


================================================================================
FILE: backend/app/services/workspace_analysis_service.py
================================================================================

"""
Optimized Workspace Analysis Service for extracting concepts and relationships from user files
Supports batched processing, embeddings, and incremental updates for large workspaces
"""

import os
import uuid
import asyncio
import math
from typing import List, Dict, Any, Optional, Set, Tuple
from pathlib import Path
from datetime import datetime
import re
import hashlib
from concurrent.futures import ThreadPoolExecutor
import logging

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import text

from ..models import ConceptCreate, RelationshipCreate, ConceptFileCreate
from . import KnowledgeGraphService
from .embedding_service import EmbeddingService

# NLP imports
try:
    import spacy
    from keybert import KeyBERT
    import nltk
    from nltk.tokenize import sent_tokenize, word_tokenize
    from nltk.corpus import stopwords
    from nltk.stem import WordNetLemmatizer

    NLP_AVAILABLE = True
except ImportError:
    NLP_AVAILABLE = False
    logging.warning("spaCy, NLTK, or KeyBERT not available. Using fallback methods.")


class WorkspaceAnalysisService:
    """
    Optimized service for analyzing workspace files to extract concepts and build knowledge graphs.
    Supports batched processing, embeddings, and incremental updates for large workspaces.
    """

    def __init__(
        self,
        db: AsyncSession,
        kg_service: Optional[KnowledgeGraphService] = None,
        embedding_service: Optional[EmbeddingService] = None,
    ):
        self.db = db
        self.kg_service = kg_service or KnowledgeGraphService(db)
        self.embedding_service = embedding_service

        # Processing configuration
        self.batch_size = 20  # Files per batch
        self.max_concepts_per_file = 50
        self.similarity_threshold = 0.8  # Minimum strength for relationships

        # File types to analyze
        self.supported_extensions = {
            ".txt",
            ".md",
            ".py",
            ".js",
            ".ts",
            ".java",
            ".cpp",
            ".c",
            ".h",
            ".html",
            ".css",
            ".json",
            ".xml",
            ".yaml",
            ".yml",
            ".ini",
            ".cfg",
        }

        # Load non-concept words from external file (stop words handled by NLP libraries)
        self.non_concept_words = self._load_non_concept_words()

        # Thread pool for CPU-intensive tasks
        self.executor = ThreadPoolExecutor(max_workers=4)

    def _load_non_concept_words(self) -> Set[str]:
        """Load non-concept words from external file"""
        non_concept_words = set()

        # Load from file
        non_concept_file = (
            Path(__file__).parent.parent / "resources" / "non_concept_words.txt"
        )
        if non_concept_file.exists():
            try:
                with open(non_concept_file, "r", encoding="utf-8") as f:
                    non_concept_words = {
                        line.strip().lower() for line in f if line.strip()
                    }
            except Exception as e:
                logging.warning(f"Failed to load non-concept words from file: {e}")
                # Fallback to empty set if file loading fails
                non_concept_words = set()

        return non_concept_words

    async def analyze_workspace(
        self,
        workspace_id: int,
        workspace_path: str,
        force_reanalysis: bool = False,
        file_paths: Optional[List[str]] = None,
        progress_callback: Optional[callable] = None,
    ) -> Dict[str, Any]:
        """
        Analyze a workspace using optimized batched processing with embeddings.

        Args:
            workspace_id: ID of the workspace to analyze
            workspace_path: Path to the workspace directory
            force_reanalysis: If True, re-analyze all files
            file_paths: Specific files to analyze (for incremental updates)
            progress_callback: Optional callback for progress updates

        Returns:
            Analysis results with statistics
        """
        start_time = datetime.utcnow()
        logging.info(
            f"[ANALYSIS] Starting workspace analysis for workspace {workspace_id}"
        )
        logging.info(f"[ANALYSIS] Workspace path: {workspace_path}")
        logging.info(f"[ANALYSIS] Force reanalysis: {force_reanalysis}")

        # Get files to analyze
        if file_paths:
            all_files = [Path(workspace_path) / fp for fp in file_paths]
            logging.info(f"[ANALYSIS] Analyzing {len(all_files)} specific files")
        else:
            all_files = self._discover_files(workspace_path)
            logging.info(f"[ANALYSIS] Discovered {len(all_files)} files in workspace")

        # Filter out files that don't need analysis
        files_to_analyze = []
        skipped_files = 0
        for file_path in all_files:
            if not file_path.exists() or not file_path.is_file():
                logging.debug(f"[ANALYSIS] Skipping non-existent file: {file_path}")
                continue
            if not force_reanalysis and await self._file_already_analyzed(
                file_path, workspace_id
            ):
                skipped_files += 1
                continue
            files_to_analyze.append(file_path)

        logging.info(f"[ANALYSIS] Skipped {skipped_files} already analyzed files")
        logging.info(f"[ANALYSIS] Will analyze {len(files_to_analyze)} files")

        total_files = len(files_to_analyze)
        if total_files == 0:
            logging.info("[ANALYSIS] No files need analysis")
            return {
                "workspace_id": workspace_id,
                "files_analyzed": 0,
                "concepts_created": 0,
                "relationships_created": 0,
                "errors": [],
                "duration_seconds": 0.0,
                "message": "No files need analysis",
            }

        # Process in batches
        analyzed_files = 0
        concepts_created = 0
        relationships_created = 0
        errors = []

        logging.info(f"[ANALYSIS] Processing files in batches of {self.batch_size}")
        for batch_start in range(0, total_files, self.batch_size):
            batch_end = min(batch_start + self.batch_size, total_files)
            batch_files = files_to_analyze[batch_start:batch_end]

            batch_num = batch_start // self.batch_size + 1
            total_batches = (total_files + self.batch_size - 1) // self.batch_size
            logging.info(
                f"[ANALYSIS] Processing batch {batch_num}/{total_batches} ({batch_start}-{batch_end-1})"
            )

            try:
                # Process batch
                batch_results = await self._process_batch(batch_files, workspace_id)
                analyzed_files += batch_results["files_processed"]
                concepts_created += batch_results["concepts_created"]
                relationships_created += batch_results["relationships_created"]

                logging.info(
                    f"[ANALYSIS] Batch {batch_num} completed: {batch_results['files_processed']} files, {batch_results['concepts_created']} concepts, {batch_results['relationships_created']} relationships"
                )

                # Progress callback
                if progress_callback:
                    progress = (batch_end) / total_files
                    await progress_callback(
                        workspace_id,
                        progress,
                        f"Processed {batch_end}/{total_files} files",
                    )

            except Exception as e:
                error_msg = (
                    f"Error processing batch {batch_start}-{batch_end}: {str(e)}"
                )
                errors.append(error_msg)
                logging.error(f"[ANALYSIS] {error_msg}")

        logging.info(
            f"[ANALYSIS] File processing completed. Total: {analyzed_files} files, {concepts_created} concepts, {relationships_created} relationships"
        )

        # Build relationships across all concepts using embeddings
        if self.embedding_service and concepts_created > 0:
            logging.info("[ANALYSIS] Building embedding-based relationships")
            try:
                await self._build_embedding_relationships(workspace_id)
                logging.info("[ANALYSIS] Embedding relationships built successfully")
            except Exception as e:
                error_msg = f"Error building embedding relationships: {str(e)}"
                errors.append(error_msg)
                logging.error(f"[ANALYSIS] {error_msg}")
        else:
            logging.info(
                "[ANALYSIS] Skipping embedding relationships (no embedding service or no concepts)"
            )

        end_time = datetime.utcnow()
        duration = (end_time - start_time).total_seconds()
        logging.info(
            f"[ANALYSIS] Workspace analysis completed in {duration:.2f} seconds"
        )

        return {
            "workspace_id": workspace_id,
            "files_analyzed": analyzed_files,
            "concepts_created": concepts_created,
            "relationships_created": relationships_created,
            "errors": errors,
            "duration_seconds": duration,
        }

    def _discover_files(self, workspace_path: str) -> List[Path]:
        """Discover all analyzable files in the workspace"""
        workspace_dir = Path(workspace_path)
        if not workspace_dir.exists() or not workspace_dir.is_dir():
            return []

        files = []
        for ext in self.supported_extensions:
            files.extend(workspace_dir.rglob(f"*{ext}"))

        return files

    async def _file_already_analyzed(self, file_path: Path, workspace_id: int) -> bool:
        """Check if file has already been analyzed"""
        query = text(
            """
            SELECT COUNT(*) FROM concept_files cf
            JOIN files f ON cf.file_id = f.id
            WHERE f.path = :file_path AND cf.workspace_id = :workspace_id
            """
        )

        result = await self.db.execute(
            query, {"file_path": str(file_path), "workspace_id": workspace_id}
        )

        count = result.scalar()
        return count > 0

    async def _analyze_file(
        self, file_path: Path, workspace_id: int
    ) -> tuple[List[Dict], List[Dict]]:
        """
        Analyze a single file to extract concepts and relationships

        Returns:
            Tuple of (concepts_data, relationships_data)
        """
        logging.info(f"[FILE_ANALYSIS] Starting analysis of file: {file_path.name}")

        # Read and preprocess content
        content = self._read_file_content(file_path)
        if not content:
            logging.info(
                f"[FILE_ANALYSIS] File {file_path.name} is empty or unreadable"
            )
            return [], []

        content_length = len(content)
        logging.info(
            f"[FILE_ANALYSIS] Read {content_length} characters from {file_path.name}"
        )

        cleaned_content = self._preprocess_text(content)
        cleaned_length = len(cleaned_content)
        logging.info(
            f"[FILE_ANALYSIS] Preprocessed content: {cleaned_length} characters after cleaning"
        )

        # Extract concepts with line tracking (use original content for line numbers)
        logging.info(f"[FILE_ANALYSIS] Extracting concepts from {file_path.name}")
        concepts = self._extract_concepts_with_lines(content)
        logging.info(
            f"[FILE_ANALYSIS] Extracted {len(concepts)} concepts from {file_path.name}"
        )

        if not concepts:
            logging.info(f"[FILE_ANALYSIS] No concepts found in {file_path.name}")
            return [], []

        # Get or create file record
        logging.info(
            f"[FILE_ANALYSIS] Creating/updating file record for {file_path.name}"
        )
        file_id = await self._get_or_create_file_record(file_path, workspace_id)

        # Store concepts and relationships
        stored_concepts = []
        stored_relationships = []

        logging.info(
            f"[FILE_ANALYSIS] Storing {len(concepts)} concepts for {file_path.name}"
        )
        for i, concept_data in enumerate(concepts):
            if (i + 1) % 10 == 0:  # Log progress every 10 concepts
                logging.info(
                    f"[FILE_ANALYSIS] Processed {i + 1}/{len(concepts)} concepts for {file_path.name}"
                )

            # Create concept
            concept = await self.kg_service.create_concept(
                ConceptCreate(
                    name=concept_data["name"],
                    description=concept_data.get("description", ""),
                )
            )
            stored_concepts.append(concept)

            # Create concept-file link with line pointers
            await self.kg_service.create_concept_file_link(
                ConceptFileCreate(
                    concept_id=concept.concept_id,
                    file_id=file_id,
                    workspace_id=workspace_id,
                    snippet=concept_data.get("snippet", ""),
                    relevance_score=concept_data.get("score", 0.5),
                    start_line=concept_data.get("start_line"),
                    end_line=concept_data.get("end_line"),
                )
            )

        logging.info(
            f"[FILE_ANALYSIS] Stored {len(stored_concepts)} concepts for {file_path.name}"
        )

        # Infer relationships between concepts
        logging.info(
            f"[FILE_ANALYSIS] Inferring relationships between {len(stored_concepts)} concepts"
        )
        relationships = self._infer_relationships(stored_concepts, cleaned_content)
        logging.info(
            f"[FILE_ANALYSIS] Found {len(relationships)} potential relationships"
        )

        for rel_data in relationships:
            try:
                relationship = await self.kg_service.create_relationship(
                    RelationshipCreate(
                        source_concept_id=rel_data["source_id"],
                        target_concept_id=rel_data["target_id"],
                        type=rel_data["type"],
                        strength=rel_data.get("strength", 0.5),
                    )
                )
                stored_relationships.append(relationship)
            except Exception:
                # Skip duplicate relationships
                pass

        logging.info(
            f"[FILE_ANALYSIS] Created {len(stored_relationships)} relationships for {file_path.name}"
        )
        logging.info(
            f"[FILE_ANALYSIS] Completed analysis of {file_path.name}: {len(stored_concepts)} concepts, {len(stored_relationships)} relationships"
        )

        return stored_concepts, stored_relationships

    def _read_file_content(self, file_path: Path) -> str:
        """Read file content with encoding handling"""
        try:
            # Try UTF-8 first
            with open(file_path, "r", encoding="utf-8") as f:
                return f.read()
        except UnicodeDecodeError:
            try:
                # Try with errors='ignore'
                with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
                    return f.read()
            except Exception:
                return ""
        except Exception:
            return ""

    def _preprocess_text(self, text: str) -> str:
        """Clean and preprocess text content"""
        if not text:
            return ""

        # Remove markdown formatting
        text = re.sub(r"#+\s*", "", text)  # Headers
        text = re.sub(r"\*\*([^*]+)\*\*", r"\1", text)  # Bold
        text = re.sub(r"\*([^*]+)\*", r"\1", text)  # Italic
        text = re.sub(r"`([^`]+)`", r"\1", text)  # Code
        text = re.sub(r"\[([^\]]+)\]\([^\)]+\)", r"\1", text)  # Links

        # Remove code blocks
        text = re.sub(r"```[\s\S]*?```", "", text)

        # Normalize whitespace
        text = re.sub(r"\s+", " ", text)

        # Remove extra whitespace
        text = text.strip()

        return text

    def _extract_concepts(self, text: str) -> List[Dict[str, Any]]:
        """
        Extract concepts from text using simple heuristics
        In production, this would use spaCy, KeyBERT, or other NLP libraries
        """
        concepts = []

        if not text:
            return concepts

        # Simple noun phrase extraction (basic implementation)
        # Split into sentences
        sentences = re.split(r"[.!?]+", text)

        for sentence in sentences:
            if not sentence.strip():
                continue

            # Extract potential concepts (capitalized words, technical terms)
            words = re.findall(r"\b[A-Z][a-z]+\b|\b[a-z]{4,}\b", sentence)

        for word in words:
            word_lower = word.lower()
            if len(word) > 3:  # Let NLP libraries handle stop words
                # Find context snippet
                snippet_start = max(0, sentence.find(word) - 50)
                snippet_end = min(len(sentence), sentence.find(word) + len(word) + 50)
                snippet = sentence[snippet_start:snippet_end].strip()

                # Calculate relevance score based on word characteristics
                score = 0.6  # Base score

                # Boost score for capitalized words (likely proper nouns or important terms)
                if word[0].isupper():
                    score += 0.2

                # Boost score for longer words (likely more specific terms)
                if len(word) > 6:
                    score += 0.1

                # Boost score for words that appear multiple times in the text
                word_count = text.lower().count(word.lower())
                if word_count > 1:
                    score += min(0.2, word_count * 0.05)

                concepts.append(
                    {
                        "name": word,
                        "description": f"Concept mentioned in context: {snippet[:100]}...",
                        "snippet": snippet,
                        "score": score,
                    }
                )

        # Remove duplicates and apply quality threshold
        seen = set()
        unique_concepts = []
        for concept in concepts:
            # Only keep high-quality concepts (score > 0.8)
            if concept["score"] > 0.8 and concept["name"].lower() not in seen:
                seen.add(concept["name"].lower())
                unique_concepts.append(concept)

        return unique_concepts[:50]  # Limit concepts per file

    def _extract_concepts_with_lines(self, content: str) -> List[Dict[str, Any]]:
        """
        Extract concepts from text while tracking line numbers for precise navigation
        Uses spaCy for entity recognition and KeyBERT for keyword extraction
        """
        concepts = []

        if not content:
            return concepts

        # Use NLP libraries if available, otherwise fallback to heuristics
        if NLP_AVAILABLE:
            try:
                concepts = self._extract_concepts_with_nlp(content)
            except Exception as e:
                logging.warning(f"NLP extraction failed, using fallback: {e}")
                concepts = self._extract_concepts_fallback(content)
        else:
            concepts = self._extract_concepts_fallback(content)

        # Remove duplicates and apply quality threshold
        seen = set()
        unique_concepts = []
        for concept in concepts:
            # Only keep high-quality concepts (score > 0.7 for NLP, 0.8 for fallback)
            threshold = 0.7 if NLP_AVAILABLE else 0.8
            if concept["score"] > threshold and concept["name"].lower() not in seen:
                seen.add(concept["name"].lower())
                unique_concepts.append(concept)

        return unique_concepts[: self.max_concepts_per_file]

    def _extract_concepts_with_nlp(self, content: str) -> List[Dict[str, Any]]:
        """
        Extract concepts using spaCy and KeyBERT with line number tracking
        """
        concepts = []

        # Initialize NLP models (lazy loading)
        if not hasattr(self, "_nlp_model"):
            try:
                # Download required NLTK data
                nltk.download("punkt", quiet=True)
                nltk.download("stopwords", quiet=True)
                nltk.download("wordnet", quiet=True)

                # Load spaCy model
                self._nlp_model = spacy.load("en_core_web_sm")

                # Initialize KeyBERT
                self._kw_model = KeyBERT()

            except Exception as e:
                logging.error(f"Failed to initialize NLP models: {e}")
                raise e

        # Split content into lines for line tracking
        lines = content.split("\n")

        # Process content with spaCy for named entities
        doc = self._nlp_model(content)

        # Extract named entities
        for ent in doc.ents:
            if ent.label_ in [
                "PERSON",
                "ORG",
                "GPE",
                "PRODUCT",
                "EVENT",
                "WORK_OF_ART",
                "LAW",
            ]:
                # Find which line this entity appears on
                line_num = self._find_line_for_position(lines, ent.start_char)

                # Get context around the entity
                context_lines = self._get_context_lines(lines, line_num, context_size=2)
                context_text = "\n".join(context_lines)

                score = self._calculate_concept_score(ent.text, content, context_text)

                concepts.append(
                    {
                        "name": ent.text,
                        "description": f"Named entity ({ent.label_}) mentioned in context: {context_text[:120]}...",
                        "snippet": context_text,
                        "score": score,
                        "start_line": line_num,
                        "end_line": line_num,
                    }
                )

        # Use KeyBERT for keyword extraction
        try:
            # Extract keywords with scores
            keywords = self._kw_model.extract_keywords(
                content,
                keyphrase_ngram_range=(1, 3),  # Single words to 3-word phrases
                stop_words="english",
                top_n=50,
                use_mmr=True,  # Maximal Marginal Relevance for diversity
                diversity=0.3,
            )

            for keyword, score in keywords:
                # Skip if already extracted as named entity
                if any(c["name"].lower() == keyword.lower() for c in concepts):
                    continue

                # Find line number for this keyword
                line_num = self._find_line_for_keyword(lines, keyword)

                # Get context
                context_lines = self._get_context_lines(lines, line_num, context_size=2)
                context_text = "\n".join(context_lines)

                # Boost score for technical terms
                adjusted_score = min(
                    1.0,
                    score
                    + self._calculate_concept_score(keyword, content, context_text)
                    * 0.3,
                )

                concepts.append(
                    {
                        "name": keyword,
                        "description": f"Key term extracted from context: {context_text[:120]}...",
                        "snippet": context_text,
                        "score": adjusted_score,
                        "start_line": line_num,
                        "end_line": line_num,
                    }
                )

        except Exception as e:
            logging.warning(f"KeyBERT extraction failed: {e}")

        return concepts

    def _find_line_for_position(self, lines: List[str], char_position: int) -> int:
        """
        Find which line number contains a specific character position
        """
        current_pos = 0
        for line_num, line in enumerate(lines):
            line_length = len(line) + 1  # +1 for newline
            if current_pos <= char_position < current_pos + line_length:
                return line_num
            current_pos += line_length
        return 0

    def _find_line_for_keyword(self, lines: List[str], keyword: str) -> int:
        """
        Find the first line that contains a keyword
        """
        for line_num, line in enumerate(lines):
            if keyword.lower() in line.lower():
                return line_num
        return 0

    def _extract_concepts_fallback(self, content: str) -> List[Dict[str, Any]]:
        """
        Fallback concept extraction using heuristics when NLP libraries are unavailable
        """
        concepts = []

        # Split content into lines for line tracking
        lines = content.split("\n")

        # Process each line to find concepts
        for line_num, line in enumerate(lines):
            if not line.strip():
                continue

            # Clean the line for concept extraction
            cleaned_line = self._preprocess_text(line)
            if len(cleaned_line) < 5:  # Skip very short lines
                continue

            # Extract potential concepts from this line
            line_concepts = self._extract_concepts_from_line(
                cleaned_line, line_num, lines
            )

            concepts.extend(line_concepts)

        return concepts

    def _extract_concepts_from_line(
        self, line: str, line_num: int, all_lines: List[str]
    ) -> List[Dict[str, Any]]:
        """
        Extract concepts from a single line with line number tracking
        Improved filtering to avoid gibberish and lorem ipsum content
        """
        concepts = []

        # Skip lines that look like lorem ipsum or template content
        if self._is_lorem_ipsum_or_gibberish(line):
            return concepts

        # Extract potential multi-word concepts first
        # Look for patterns like: "Machine Learning", "Design Pattern", "Abstract Factory"
        multi_word_patterns = [
            # Technical terms with multiple words
            r"\b[A-Z][a-z]+(?:\s+[A-Z][a-z]+)+\b",  # Title Case phrases
            r"\b[a-z]+(?:\s+[a-z]+){1,3}\b",  # lowercase phrases (2-4 words)
            # Domain-specific patterns
            r"\b[A-Z][a-z]+\s+(?:Pattern|Algorithm|Method|Class|Interface|Framework|Library|Protocol|Database|System|Network|Security|Authentication|Authorization)\b",
            r"\b(?:Design|Creational|Structural|Behavioral|Factory|Singleton|Observer|Strategy|Command|Adapter|Bridge|Composite|Decorator|Facade|Proxy|Template|Iterator|State|Memento|Visitor)\s+[A-Z][a-z]+\b",
            # Programming concepts
            r"\b(?:Object|Class|Method|Function|Variable|Constant|Interface|Abstract|Concrete|Static|Dynamic|Virtual|Override|Implement|Inherit|Constructor|Destructor|Exception|Thread|Process|Memory|Cache|Database|Query|Transaction)\s+[A-Z][a-z]+\b",
            # Data structures and algorithms
            r"\b(?:Linked|Binary|Search|Sort|Tree|Graph|Hash|Array|List|Stack|Queue|Heap|Trie|Bloom|Filter)\s+[A-Z][a-z]+\b",
        ]

        for pattern in multi_word_patterns:
            matches = re.findall(pattern, line)
            for match in matches:
                if self._is_meaningful_concept(match) and not self._is_gibberish_term(
                    match
                ):
                    # Get broader context (surrounding lines)
                    context_lines = self._get_context_lines(
                        all_lines, line_num, context_size=2
                    )
                    context_text = "\n".join(context_lines)

                    score = self._calculate_concept_score(
                        match, "\n".join(all_lines), context_text
                    )

                    if score > 0.85:  # Higher threshold for multi-word concepts
                        concepts.append(
                            {
                                "name": match,
                                "description": f"Concept mentioned in context: {context_text[:120]}...",
                                "snippet": context_text,
                                "score": score,
                                "start_line": line_num,
                                "end_line": line_num,
                            }
                        )

        # Also extract high-quality single words (technical terms)
        single_word_patterns = [
            r"\b[A-Z][a-z]{6,}\b",  # Long capitalized words (likely specific terms)
            r"\b[a-z]{7,}\b",  # Long lowercase words (technical terms)
        ]

        for pattern in single_word_patterns:
            matches = re.findall(pattern, line)
            for match in matches:
                if self._is_meaningful_concept(match) and not self._is_gibberish_term(
                    match
                ):
                    # Get broader context
                    context_lines = self._get_context_lines(
                        all_lines, line_num, context_size=1
                    )
                    context_text = "\n".join(context_lines)

                    score = self._calculate_concept_score(
                        match, "\n".join(all_lines), context_text
                    )

                    if score > 0.85:  # Higher threshold for single words
                        concepts.append(
                            {
                                "name": match,
                                "description": f"Concept mentioned in context: {context_text[:120]}...",
                                "snippet": context_text,
                                "score": score,
                                "start_line": line_num,
                                "end_line": line_num,
                            }
                        )

        return concepts

    def _get_context_lines(
        self, all_lines: List[str], center_line: int, context_size: int = 2
    ) -> List[str]:
        """
        Get context lines around a center line
        """
        start = max(0, center_line - context_size)
        end = min(len(all_lines), center_line + context_size + 1)
        return all_lines[start:end]

    def _is_meaningful_concept(self, term: str) -> bool:
        """
        Check if a term is likely to be a meaningful concept
        """
        if not term or len(term) < 4:
            return False

        term_lower = term.lower()

        # Skip common non-concept words
        if term_lower in self.non_concept_words:
            return False

        # Must contain at least one letter
        if not re.search(r"[a-zA-Z]", term):
            return False

        # Skip if it's just numbers or symbols
        if re.match(r"^[^a-zA-Z]*$", term):
            return False

        return True

    def _is_lorem_ipsum_or_gibberish(self, line: str) -> bool:
        """
        Generic gibberish detection using statistical analysis
        """
        if not line or len(line.strip()) < 10:
            return False

        # Use combined quality assessment
        quality = self._assess_content_quality(line)
        return quality["is_gibberish"]

    def _is_gibberish_term(self, term: str) -> bool:
        """
        Generic term gibberish detection using statistical analysis
        """
        if not term or len(term) < 3:
            return False

        # Use combined quality assessment for the term
        quality = self._assess_content_quality(term)
        return quality["is_gibberish"]

    def _assess_content_quality(self, text: str) -> dict:
        """
        Combined quality assessment using multiple statistical measures
        """
        if not text or len(text.strip()) < 5:
            return {"quality_score": 0.0, "is_gibberish": True}

        # Run all statistical analyses
        char_entropy = self._calculate_text_entropy(text)
        word_entropy = self._calculate_word_entropy(text)
        repetition_score = self._detect_repetitive_patterns(text)
        word_dist = self._analyze_word_distribution(text)
        word_len = self._analyze_word_lengths(text)
        gini_coefficient = self._analyze_stop_word_ratio(text)
        template_score = self._detect_template_patterns(text)

        # Weighted quality score (0.0 = gibberish, 1.0 = high quality)
        quality_score = (
            (char_entropy / 5.0) * 0.2  # Character entropy
            + (word_entropy / 8.0) * 0.2  # Word entropy
            + (1.0 - repetition_score) * 0.2  # Low repetition = good
            + (1.0 - word_dist["gibberish_score"]) * 0.15  # Word distribution
            + word_len["coherence_score"] * 0.15  # Word length coherence
            + (1.0 - gini_coefficient) * 0.05  # Even word distribution
            + (1.0 - template_score) * 0.05  # Low template similarity
        )

        # Clamp to [0, 1]
        quality_score = max(0.0, min(1.0, quality_score))

        return {
            "quality_score": quality_score,
            "is_gibberish": quality_score < 0.3,  # Threshold for gibberish
            "char_entropy": char_entropy,
            "word_entropy": word_entropy,
            "repetition_score": repetition_score,
            "gini_coefficient": gini_coefficient,
            "template_score": template_score,
        }

    def _calculate_text_entropy(self, text: str) -> float:
        """Calculate Shannon entropy of text characters"""
        if not text:
            return 0.0

        # Count character frequencies
        char_counts = {}
        for char in text:
            char_counts[char] = char_counts.get(char, 0) + 1

        # Calculate entropy
        entropy = 0.0
        text_length = len(text)
        for count in char_counts.values():
            probability = count / text_length
            entropy -= probability * math.log2(probability)

        return entropy

    def _calculate_word_entropy(self, text: str) -> float:
        """Calculate entropy based on word distribution"""
        words = re.findall(r"\b\w+\b", text.lower())
        if len(words) < 3:
            return 0.0

        word_counts = {}
        for word in words:
            word_counts[word] = word_counts.get(word, 0) + 1

        entropy = 0.0
        total_words = len(words)
        for count in word_counts.values():
            prob = count / total_words
            entropy -= prob * math.log2(prob)

        return entropy

    def _detect_repetitive_patterns(self, text: str, n: int = 3) -> float:
        """Detect repetitive n-gram patterns"""
        words = re.findall(r"\b\w+\b", text.lower())
        if len(words) < n * 2:
            return 0.0

        # Generate n-grams
        ngrams = []
        for i in range(len(words) - n + 1):
            ngrams.append(" ".join(words[i : i + n]))

        # Count n-gram frequencies
        ngram_counts = {}
        for ngram in ngrams:
            ngram_counts[ngram] = ngram_counts.get(ngram, 0) + 1

        # Calculate repetition ratio
        total_ngrams = len(ngrams)
        repeated_ngrams = sum(1 for count in ngram_counts.values() if count > 1)

        return repeated_ngrams / total_ngrams if total_ngrams > 0 else 0.0

    def _analyze_word_distribution(self, text: str) -> dict:
        """Analyze word frequency distribution for gibberish detection"""
        words = re.findall(r"\b\w+\b", text.lower())

        if len(words) < 5:
            return {"gibberish_score": 1.0}  # Too short to analyze

        word_counts = {}
        for word in words:
            word_counts[word] = word_counts.get(word, 0) + 1

        # Calculate distribution metrics
        unique_words = len(word_counts)
        total_words = len(words)
        uniqueness_ratio = unique_words / total_words

        # Check for over-repetition of few words
        top_word_count = max(word_counts.values()) if word_counts else 0
        repetition_ratio = top_word_count / total_words

        # Very low uniqueness or high repetition indicates gibberish
        gibberish_score = 0.0
        if uniqueness_ratio < 0.3:  # Less than 30% unique words
            gibberish_score += 0.5
        if repetition_ratio > 0.4:  # One word used more than 40% of the time
            gibberish_score += 0.5

        return {
            "uniqueness_ratio": uniqueness_ratio,
            "repetition_ratio": repetition_ratio,
            "gibberish_score": gibberish_score,
        }

    def _analyze_word_lengths(self, text: str) -> dict:
        """Analyze word length distribution"""
        words = re.findall(r"\b\w+\b", text)

        if not words:
            return {"avg_length": 0, "coherence_score": 0.0}

        lengths = [len(word) for word in words]
        avg_length = sum(lengths) / len(lengths)

        # Very short average word length indicates gibberish
        coherence_score = min(1.0, avg_length / 5.0)  # Normalize to 5 chars

        return {"avg_length": avg_length, "coherence_score": coherence_score}

    def _analyze_stop_word_ratio(self, text: str) -> float:
        """Analyze ratio of common stop words"""
        # Dynamic stop word detection based on frequency
        words = re.findall(r"\b\w+\b", text.lower())
        word_counts = {}

        for word in words:
            word_counts[word] = word_counts.get(word, 0) + 1

        # Most frequent words are likely stop words
        sorted_words = sorted(word_counts.items(), key=lambda x: x[1], reverse=True)

        # Top 10 most frequent words
        top_words = [word for word, count in sorted_words[:10]]

        # Calculate how evenly distributed the content is
        # High concentration on few words = likely gibberish
        if len(sorted_words) < 3:
            return 1.0  # Too few words to analyze

        # Gini coefficient for word distribution
        total_count = sum(count for word, count in sorted_words)
        cumulative = 0
        gini = 0.0

        for i, (word, count) in enumerate(sorted_words):
            cumulative += count
            gini += (i + 1) * count

        gini = 1 - (2 * gini) / (len(sorted_words) * total_count)

        return gini  # High gini = uneven distribution = gibberish

    def _detect_template_patterns(self, text: str) -> float:
        """Detect template/placeholder patterns dynamically"""
        lines = text.split("\n")

        # Look for similar line structures
        line_patterns = []
        for line in lines:
            # Extract pattern: word types, punctuation, brackets
            pattern = re.sub(r"\w+", "W", line)  # Replace words with W
            pattern = re.sub(r"\d+", "N", pattern)  # Replace numbers with N
            line_patterns.append(pattern.strip())

        # Count pattern frequencies
        pattern_counts = {}
        for pattern in line_patterns:
            if pattern:  # Skip empty patterns
                pattern_counts[pattern] = pattern_counts.get(pattern, 0) + 1

        # Calculate template score
        total_lines = len([p for p in line_patterns if p])
        if total_lines == 0:
            return 0.0

        # High similarity in line structures indicates template content
        max_pattern_count = max(pattern_counts.values()) if pattern_counts else 0
        template_score = max_pattern_count / total_lines

        return template_score

    def _calculate_concept_score(
        self, term: str, full_text: str, context: str
    ) -> float:
        """
        Calculate a relevance score for a concept based on various factors
        """
        score = 0.6  # Base score

        term_lower = term.lower()

        # Boost score for capitalized words (likely proper nouns or important terms)
        if term[0].isupper():
            score += 0.2

        # Boost score for longer words (likely more specific terms)
        if len(term) > 6:
            score += 0.1

        # Boost score for words that appear multiple times in the text
        word_count = full_text.lower().count(term_lower)
        if word_count > 1:
            score += min(0.2, word_count * 0.05)

        # Boost score for technical terms (contains numbers, underscores, etc.)
        if re.search(r"[0-9_]", term):
            score += 0.1

        # Boost score for terms that appear in headings or important positions
        lines = full_text.split("\n")
        for i, line in enumerate(lines):
            if term_lower in line.lower():
                # Boost for lines that look like headings
                if line.strip().startswith(
                    ("#", "##", "###", "-", "*", "1.", "2.", "3.")
                ):
                    score += 0.15
                    break
                # Boost for early lines (likely more important)
                if i < 10:
                    score += 0.05
                    break

        # Cap the score at 1.0
        return min(1.0, score)

    def _infer_relationships(
        self, concepts: List[Any], text: str
    ) -> List[Dict[str, Any]]:
        """
        Infer relationships between concepts based on co-occurrence and context
        """
        relationships = []

        # Simple co-occurrence based relationships
        concept_names = [c.name.lower() for c in concepts]

        for i, concept1 in enumerate(concepts):
            for j, concept2 in enumerate(concepts):
                if i >= j:
                    continue

                name1 = concept1.name.lower()
                name2 = concept2.name.lower()

                # Check if concepts appear in same sentences
                sentences = re.split(r"[.!?]+", text)
                co_occurrences = 0

                for sentence in sentences:
                    if name1 in sentence.lower() and name2 in sentence.lower():
                        co_occurrences += 1

                if co_occurrences > 0:
                    # Calculate relationship strength
                    strength = min(0.9, co_occurrences * 0.3)

                    # Only create relationships with sufficient strength
                    if strength >= 0.8:
                        # Determine relationship type based on context
                        rel_type = "relates_to"

                        # Check for hierarchical indicators
                        if any(
                            word in text.lower()
                            for word in ["type of", "kind of", "subtype", "extends"]
                        ):
                            rel_type = "dives_deep_to"

                        relationships.append(
                            {
                                "source_id": concept1.concept_id,
                                "target_id": concept2.concept_id,
                                "type": rel_type,
                                "strength": strength,
                            }
                        )

        return relationships

    async def _get_or_create_file_record(
        self, file_path: Path, workspace_id: int
    ) -> int:
        """Get or create file record in database"""
        # Check if file exists
        query = text(
            "SELECT id FROM files WHERE path = :path AND workspace_id = :workspace_id"
        )

        result = await self.db.execute(
            query, {"path": str(file_path), "workspace_id": workspace_id}
        )

        file_record = result.fetchone()

        if file_record:
            return file_record.id

        # Create new file record
        insert_query = text(
            """
            INSERT INTO files (workspace_id, name, path, file_type, size, created_at, updated_at)
            VALUES (:workspace_id, :name, :path, :file_type, :size, :created_at, :updated_at)
            """
        )

        file_size = file_path.stat().st_size if file_path.exists() else 0
        file_type = file_path.suffix.lstrip(".") if file_path.suffix else "unknown"

        await self.db.execute(
            insert_query,
            {
                "workspace_id": workspace_id,
                "name": file_path.name,
                "path": str(file_path),
                "file_type": file_type,
                "size": file_size,
                "created_at": datetime.utcnow(),
                "updated_at": datetime.utcnow(),
            },
        )

        # Get the new file ID
        result = await self.db.execute(text("SELECT last_insert_rowid()"))
        return result.scalar()

    async def _process_batch(
        self, file_batch: List[Path], workspace_id: int
    ) -> Dict[str, Any]:
        """Process a batch of files sequentially to avoid session conflicts"""
        logging.info(f"[BATCH] Processing batch of {len(file_batch)} files")

        # Process files sequentially to avoid database session conflicts
        concepts_created = 0
        relationships_created = 0
        files_processed = 0
        errors = 0

        for i, file_path in enumerate(file_batch):
            try:
                logging.info(
                    f"[BATCH] Processing file {i+1}/{len(file_batch)}: {file_path.name}"
                )
                file_concepts, file_relationships = await self._analyze_file_async(
                    file_path, workspace_id
                )
                concepts_created += len(file_concepts)
                relationships_created += len(file_relationships)
                files_processed += 1

                logging.info(
                    f"[BATCH] File {file_path.name} completed: {len(file_concepts)} concepts, {len(file_relationships)} relationships"
                )

            except Exception as e:
                logging.error(f"[BATCH] Error processing file {file_path}: {e}")
                errors += 1
                continue

        logging.info(
            f"[BATCH] Batch completed: {files_processed} files processed, {errors} errors, {concepts_created} total concepts, {relationships_created} total relationships"
        )

        return {
            "files_processed": files_processed,
            "concepts_created": concepts_created,
            "relationships_created": relationships_created,
        }

    async def _analyze_file_async(
        self, file_path: Path, workspace_id: int
    ) -> Tuple[List[Dict], List[Dict]]:
        """Analyze a single file asynchronously"""
        return await self._analyze_file(file_path, workspace_id)

    def _analyze_file_sync(
        self, file_path: Path, workspace_id: int
    ) -> Tuple[List[Dict], List[Dict]]:
        """Synchronous file analysis for thread pool execution"""
        # Read and preprocess content
        content = self._read_file_content(file_path)
        if not content:
            return [], []

        cleaned_content = self._preprocess_text(content)

        # Extract concepts using embeddings if available
        if self.embedding_service:
            concepts = self._extract_concepts_with_embeddings(
                cleaned_content, file_path
            )
        else:
            concepts = self._extract_concepts(cleaned_content)

        return concepts, []  # Relationships handled separately with embeddings

    def _extract_concepts_with_embeddings(
        self, text: str, file_path: Path
    ) -> List[Dict[str, Any]]:
        """Extract concepts using embeddings for better semantic understanding"""
        if not self.embedding_service:
            return self._extract_concepts(text)

        concepts = []

        # Split text into chunks for better embedding
        chunks = self._split_text_into_chunks(text, max_length=500)

        for chunk in chunks:
            if not chunk.strip():
                continue

            # Extract candidate concepts from chunk
            candidates = self._extract_concept_candidates(chunk)

            for candidate in candidates:
                concepts.append(
                    {
                        "name": candidate["name"],
                        "description": f"Found in {file_path.name}: {candidate['context'][:100]}...",
                        "snippet": candidate["context"],
                        "score": candidate["score"],
                        "chunk": chunk[:200],  # Store chunk for embedding
                    }
                )

        # Remove duplicates and limit
        seen = set()
        unique_concepts = []
        for concept in concepts:
            key = concept["name"].lower()
            if key not in seen:
                seen.add(key)
                unique_concepts.append(concept)

        return unique_concepts[: self.max_concepts_per_file]

    def _extract_concept_candidates(self, text: str) -> List[Dict[str, Any]]:
        """Extract concept candidates with context"""
        candidates = []

        # Use regex to find potential concepts
        words = re.findall(r"\b[A-Z][a-z]{2,}\b|\b[a-z]{4,}\b", text)

        for word in words:
            word_lower = word.lower()
            if len(word) > 3:  # Let NLP libraries handle stop words
                # Get context around the word
                start = max(0, text.find(word) - 40)
                end = min(len(text), text.find(word) + len(word) + 40)
                context = text[start:end].strip()

                candidates.append(
                    {
                        "name": word,
                        "context": context,
                        "score": (
                            0.8 if word[0].isupper() else 0.6
                        ),  # Capitalized words get higher score
                    }
                )

        return candidates

    def _split_text_into_chunks(self, text: str, max_length: int = 500) -> List[str]:
        """Split text into manageable chunks for embedding"""
        if len(text) <= max_length:
            return [text]

        chunks = []
        sentences = re.split(r"[.!?]+", text)

        current_chunk = ""
        for sentence in sentences:
            if not sentence.strip():
                continue

            if len(current_chunk) + len(sentence) > max_length:
                if current_chunk:
                    chunks.append(current_chunk.strip())
                current_chunk = sentence
            else:
                current_chunk += " " + sentence if current_chunk else sentence

        if current_chunk:
            chunks.append(current_chunk.strip())

        return chunks

    async def _build_embedding_relationships(self, workspace_id: int):
        """Build relationships between concepts using embeddings"""
        if not self.embedding_service:
            return

        # Get all concepts for this workspace
        query = text(
            """
            SELECT DISTINCT c.concept_id, c.name
            FROM concepts c
            JOIN concept_files cf ON c.concept_id = cf.concept_id
            WHERE cf.workspace_id = :workspace_id
        """
        )

        result = await self.db.execute(query, {"workspace_id": workspace_id})
        concept_rows = result.fetchall()

        if len(concept_rows) < 2:
            return  # Need at least 2 concepts for relationships

        concepts = [{"id": row.concept_id, "name": row.name} for row in concept_rows]

        # Generate embeddings for all concept names
        concept_names = [c["name"] for c in concepts]
        embeddings = await self.embedding_service.embed_texts(concept_names)

        # Calculate similarity matrix
        relationships_created = 0
        for i, concept1 in enumerate(concepts):
            for j, concept2 in enumerate(concepts):
                if i >= j:
                    continue

                # Calculate cosine similarity
                similarity = self._cosine_similarity(embeddings[i], embeddings[j])

                if similarity >= self.similarity_threshold:
                    try:
                        # Create relationship
                        await self.kg_service.create_relationship(
                            RelationshipCreate(
                                source_concept_id=concept1["id"],
                                target_concept_id=concept2["id"],
                                type="semantically_related",
                                strength=float(similarity),
                            )
                        )
                        relationships_created += 1
                    except Exception:
                        # Skip duplicate relationships
                        pass

        logging.info(
            f"Created {relationships_created} embedding-based relationships for workspace {workspace_id}"
        )

    def _cosine_similarity(self, vec1: List[float], vec2: List[float]) -> float:
        """Calculate cosine similarity between two vectors"""
        import math

        dot_product = sum(a * b for a, b in zip(vec1, vec2))
        norm1 = math.sqrt(sum(a * a for a in vec1))
        norm2 = math.sqrt(sum(b * b for b in vec2))

        if norm1 == 0 or norm2 == 0:
            return 0.0

        return dot_product / (norm1 * norm2)

    async def analyze_file_incremental(
        self, file_path: str, workspace_id: int
    ) -> Dict[str, Any]:
        """Analyze a single file for incremental updates"""
        file_path_obj = Path(file_path)

        # Remove existing concepts for this file
        await self._remove_file_concepts(file_path, workspace_id)

        # Analyze the file
        concepts, relationships = await self._analyze_file(file_path_obj, workspace_id)

        return {
            "file_path": file_path,
            "concepts_created": len(concepts),
            "relationships_created": len(relationships),
        }

    async def _remove_file_concepts(self, file_path: str, workspace_id: int):
        """Remove all concepts associated with a file"""
        # This is a simplified version - in production you'd want to be more careful
        # about not removing concepts that appear in other files
        query = text(
            """
            DELETE FROM concept_files
            WHERE file_id IN (
                SELECT id FROM files WHERE path = :file_path AND workspace_id = :workspace_id
            )
        """
        )

        await self.db.execute(
            query, {"file_path": file_path, "workspace_id": workspace_id}
        )
        await self.db.commit()

    async def get_workspace_stats(self, workspace_id: int) -> Dict[str, Any]:
        """Get analysis statistics for a workspace"""
        # File count
        file_query = text(
            "SELECT COUNT(*) FROM files WHERE workspace_id = :workspace_id"
        )
        file_result = await self.db.execute(file_query, {"workspace_id": workspace_id})
        file_count = file_result.scalar()

        # Concept count
        concept_query = text(
            """
            SELECT COUNT(DISTINCT c.concept_id)
            FROM concepts c
            JOIN concept_files cf ON c.concept_id = cf.concept_id
            WHERE cf.workspace_id = :workspace_id
        """
        )
        concept_result = await self.db.execute(
            concept_query, {"workspace_id": workspace_id}
        )
        concept_count = concept_result.scalar()

        # Relationship count
        rel_query = text(
            """
            SELECT COUNT(*)
            FROM relationships r
            WHERE r.source_concept_id IN (
                SELECT DISTINCT cf.concept_id
                FROM concept_files cf
                WHERE cf.workspace_id = :workspace_id
            )
        """
        )
        rel_result = await self.db.execute(rel_query, {"workspace_id": workspace_id})
        relationship_count = rel_result.scalar()

        return {
            "workspace_id": workspace_id,
            "total_files": file_count,
            "total_concepts": concept_count,
            "total_relationships": relationship_count,
        }


================================================================================
FILE: backend/app/services/workspace_service.py
================================================================================

"""
Workspace service for managing study workspaces
"""

from typing import List, Optional, Dict, Any
from datetime import datetime
import json
import logging

from app.models.workspace import (
    Workspace,
    WorkspaceCreate,
    WorkspaceUpdate,
    WorkspaceStats,
)
from app.services.database import DatabaseService

logger = logging.getLogger(__name__)


class WorkspaceService:
    def __init__(self, db_service: DatabaseService):
        self.db = db_service
        logger.setLevel(logging.DEBUG)
        handler = logging.StreamHandler()
        formatter = logging.Formatter(
            "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
        )
        handler.setFormatter(formatter)
        logger.addHandler(handler)

    def create_workspace(self, workspace_data: WorkspaceCreate) -> Workspace:
        """Create a new workspace"""
        data = {
            "name": workspace_data.name,
            "description": workspace_data.description,
            "type": workspace_data.type.value,
            "color": workspace_data.color,
            "folder_path": workspace_data.folder_path,
        }

        workspace_id = self.db.insert("workspaces", data)
        return self.get_workspace(workspace_id)

    def get_workspace(self, workspace_id: int) -> Optional[Workspace]:
        """Get a workspace by ID with stats"""
        workspace_data = self.db.get_by_id("workspaces", workspace_id)
        if not workspace_data:
            return None

        # Get file count and other stats
        file_count = self.db.count("files", "workspace_id = ?", (workspace_id,))

        # Get question stats
        question_stats = self.db.execute_query(
            """
            SELECT
                COUNT(*) as total_questions,
                SUM(CASE WHEN times_correct > 0 THEN 1 ELSE 0 END) as completed_questions
            FROM questions q
            JOIN files f ON q.file_id = f.id
            WHERE f.workspace_id = ?
        """,
            (workspace_id,),
        )

        stats = (
            question_stats[0]
            if question_stats
            else {"total_questions": 0, "completed_questions": None}
        )

        # Get last studied date
        last_studied_result = self.db.execute_query(
            """
            SELECT MAX(timestamp) as last_studied
            FROM progress
            WHERE workspace_id = ? AND action_type = 'quiz_completed'
        """,
            (workspace_id,),
        )

        last_studied = None
        if last_studied_result and last_studied_result[0]["last_studied"]:
            last_studied = datetime.fromisoformat(
                last_studied_result[0]["last_studied"]
            )

        return Workspace(
            id=workspace_data["id"],
            name=workspace_data["name"],
            description=workspace_data["description"],
            type=workspace_data["type"],
            color=workspace_data["color"],
            folder_path=workspace_data.get("folder_path"),
            created_at=datetime.fromisoformat(workspace_data["created_at"]),
            updated_at=datetime.fromisoformat(workspace_data["updated_at"]),
            file_count=file_count,
            total_questions=stats["total_questions"] or 0,
            completed_questions=stats["completed_questions"] or 0,
            last_studied=last_studied,
        )

    def get_all_workspaces(self) -> List[Workspace]:
        """Get all workspaces with stats"""
        logger.debug("Attempting to retrieve all workspaces.")
        try:
            workspaces_data = self.db.get_all("workspaces")
            logger.debug(f"Retrieved {len(workspaces_data)} raw workspaces.")
            workspaces = []
            for w in workspaces_data:
                try:
                    workspace = self.get_workspace(w["id"])
                    if workspace:
                        workspaces.append(workspace)
                except Exception as e:
                    logger.error(
                        f"Error getting detailed workspace for ID {w['id']}: {e}"
                    )
            return workspaces
        except Exception as e:
            logger.error(f"Error retrieving all workspaces: {e}")
            raise

    def update_workspace(
        self, workspace_id: int, update_data: WorkspaceUpdate
    ) -> Optional[Workspace]:
        """Update a workspace"""
        data = {}
        if update_data.name is not None:
            data["name"] = update_data.name
        if update_data.description is not None:
            data["description"] = update_data.description
        if update_data.type is not None:
            data["type"] = update_data.type.value
        if update_data.color is not None:
            data["color"] = update_data.color
        if update_data.folder_path is not None:
            data["folder_path"] = update_data.folder_path

        if data:
            self.db.update("workspaces", workspace_id, data)

        return self.get_workspace(workspace_id)

    def delete_workspace(self, workspace_id: int) -> bool:
        """Delete a workspace and all associated data"""
        # This will cascade delete files, questions, etc. due to foreign keys
        result = self.db.delete("workspaces", workspace_id)
        return result > 0

    def get_workspace_stats(self, workspace_id: int) -> WorkspaceStats:
        """Get detailed statistics for a workspace"""
        # File stats
        file_stats = self.db.execute_query(
            """
            SELECT
                COUNT(*) as total_files,
                SUM(size) as total_size
            FROM files
            WHERE workspace_id = ?
        """,
            (workspace_id,),
        )

        # Question stats
        question_stats = self.db.execute_query(
            """
            SELECT
                COUNT(*) as total_questions,
                AVG(CASE WHEN times_asked > 0 THEN times_correct * 1.0 / times_asked ELSE 0 END) as avg_accuracy,
                SUM(times_asked) as total_attempts
            FROM questions q
            JOIN files f ON q.file_id = f.id
            WHERE f.workspace_id = ?
        """,
            (workspace_id,),
        )

        # Quiz session stats
        session_stats = self.db.execute_query(
            """
            SELECT
                COUNT(*) as total_sessions,
                AVG(correct_answers * 1.0 / total_questions) as avg_score,
                SUM(total_time) as total_time
            FROM quiz_sessions
            WHERE workspace_id = ? AND status = 'completed'
        """,
            (workspace_id,),
        )

        # Progress stats
        progress_stats = self.db.execute_query(
            """
            SELECT
                COUNT(*) as study_sessions,
                MAX(timestamp) as last_study
            FROM progress
            WHERE workspace_id = ? AND action_type IN ('quiz_started', 'quiz_completed')
        """,
            (workspace_id,),
        )

        f_stats = file_stats[0] if file_stats else {"total_files": 0, "total_size": 0}
        q_stats = (
            question_stats[0]
            if question_stats
            else {"total_questions": 0, "avg_accuracy": 0, "total_attempts": 0}
        )
        s_stats = (
            session_stats[0]
            if session_stats
            else {"total_sessions": 0, "avg_score": 0, "total_time": 0}
        )
        p_stats = (
            progress_stats[0]
            if progress_stats
            else {"study_sessions": 0, "last_study": None}
        )

        return WorkspaceStats(
            workspace_id=workspace_id,
            total_files=f_stats["total_files"],
            total_questions=q_stats["total_questions"] or 0,
            correct_answers=int(
                (q_stats["avg_accuracy"] or 0) * (q_stats["total_attempts"] or 0)
            ),
            incorrect_answers=(q_stats["total_attempts"] or 0)
            - int((q_stats["avg_accuracy"] or 0) * (q_stats["total_attempts"] or 0)),
            study_streak=self._calculate_streak(workspace_id),
            average_score=s_stats["avg_score"] or 0,
            last_study_date=(
                datetime.fromisoformat(p_stats["last_study"])
                if p_stats["last_study"]
                else None
            ),
        )

    def _calculate_streak(self, workspace_id: int) -> int:
        """Calculate current study streak for workspace"""
        # Get recent quiz completions
        recent_sessions = self.db.execute_query(
            """
            SELECT DATE(timestamp) as date
            FROM progress
            WHERE workspace_id = ? AND action_type = 'quiz_completed'
            ORDER BY timestamp DESC
            LIMIT 30
        """,
            (workspace_id,),
        )

        if not recent_sessions:
            return 0

        # Calculate streak (consecutive days)
        streak = 0
        current_date = datetime.now().date()

        for session in recent_sessions:
            session_date = datetime.fromisoformat(session["date"]).date()
            if session_date == current_date:
                streak += 1
                current_date = current_date.replace(day=current_date.day - 1)
            elif session_date == current_date.replace(day=current_date.day - 1):
                streak += 1
                current_date = session_date.replace(day=session_date.day - 1)
            else:
                break

        return streak


================================================================================
FILE: backend/main.py
================================================================================

import uvicorn
import os
import sys  # Import sys to check for frozen environment
import logging
from pathlib import Path
from app.app import app  # Import the FastAPI app instance


# Configure logging
def configure_logging():
    log_dir = None
    database_path = os.getenv("DATABASE_PATH")
    if database_path:
        log_dir = Path(database_path).parent / "logs"
        log_dir.mkdir(parents=True, exist_ok=True)

    log_file = log_dir / "backend.log" if log_dir else "backend.log"

    logging.basicConfig(
        level=logging.INFO,
        format="[{asctime}] [{levelname}] {name}: {message}",
        style="{",
        handlers=[
            logging.FileHandler(log_file),
            logging.StreamHandler(sys.stdout),  # Also log to console
        ],
    )
    # Suppress uvicorn access logs to avoid duplication with stdout
    logging.getLogger("uvicorn.access").handlers = []
    logging.getLogger("uvicorn.access").propagate = False


if __name__ == "__main__":
    configure_logging()
    logger = logging.getLogger("backend")
    logger.info("Starting backend application...")

    port = int(os.getenv("PORT", 8080))
    # Disable reload when running in a PyInstaller bundle
    is_frozen = getattr(sys, "frozen", False)
    uvicorn.run(
        "app.app:app",
        host="127.0.0.1",
        port=port,
        reload=False,
        log_level="debug",  # Uvicorn's log_level will still control its own messages
    )


================================================================================
FILE: backend/migrations/README.md
================================================================================

# Database Migrations

This directory contains database migration files for the Recall Study App. The migration system is similar to Liquibase but implemented in Python for SQLite.

## Overview

The migration system provides:
- Version-controlled database schema changes
- Automatic migration application on startup
- Migration tracking and rollback capabilities
- SQL-based migration files

## Migration Files

Migration files are SQL files with the naming convention: `V{version}__{description}.sql`

Examples:
- `V001__initial_schema.sql` - Initial database schema
- `V002__add_user_table.sql` - Add user management tables
- `V003__update_indexes.sql` - Performance improvements

## File Structure

```
backend/migrations/
├── README.md
├── V001__initial_schema.sql
└── V002__test_migration.sql (example)
```

## Usage

### Creating a New Migration

```python
from app.services.database import DatabaseService

db = DatabaseService()
migration_file = db.create_migration("V003__add_new_feature", "Add new feature tables")
```

### Checking Migration Status

```python
status = db.get_migration_status()
print(status)
# Output: {
#   'applied_migrations': ['V001__initial_schema'],
#   'available_migrations': ['V001__initial_schema', 'V002__add_feature'],
#   'pending_migrations': ['V002__add_feature']
# }
```

### Manual Migration Application

```python
success = db.apply_pending_migrations()
if success:
    print("Migrations applied successfully")
```

### Rollback (if rollback script exists)

```python
success = db.rollback_migration("V002__add_feature")
```

## Migration File Format

Each migration file should contain valid SQL statements:

```sql
-- Migration: V003__add_new_feature
-- Description: Add new feature tables
-- Created: 2025-09-20

-- Add your SQL migration statements here
ALTER TABLE users ADD COLUMN email TEXT UNIQUE;
CREATE INDEX idx_users_email ON users(email);

-- Create new table
CREATE TABLE user_preferences (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL,
    preference_key TEXT NOT NULL,
    preference_value TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id)
);
```

## Rollback Support

For migrations that need rollback support, create a corresponding rollback file:

- Migration: `V003__add_new_feature.sql`
- Rollback: `V003__add_new_feature_rollback.sql`

Example rollback file:

```sql
-- Rollback for V003__add_new_feature
-- Remove added column and table

DROP TABLE IF EXISTS user_preferences;
CREATE TABLE users_backup AS SELECT id, name, created_at FROM users;
DROP TABLE users;
ALTER TABLE users_backup RENAME TO users;
-- Note: This is a simplified example. In practice, you'd need to recreate all constraints and indexes
```

## Best Practices

1. **Version Numbers**: Use sequential version numbers (V001, V002, etc.)
2. **Descriptive Names**: Use clear, descriptive names for migrations
3. **Idempotent**: Write migrations that can be run multiple times safely
4. **Test First**: Test migrations on a copy of production data
5. **Backup**: Always backup before applying migrations in production
6. **Small Changes**: Keep migrations focused on specific changes
7. **Documentation**: Comment your SQL for clarity

## Automatic Application

Migrations are automatically applied when the DatabaseService is initialized. The system:

1. Scans the migrations directory for SQL files
2. Checks which migrations have already been applied
3. Applies pending migrations in order
4. Records successful migrations in the `schema_migrations` table

## Migration Tracking

Applied migrations are tracked in the `schema_migrations` table:

```sql
CREATE TABLE schema_migrations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    migration_id TEXT NOT NULL UNIQUE,
    description TEXT,
    applied_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    checksum TEXT
);
```

This ensures migrations are only applied once and provides an audit trail.

## Testing

Run the test script to verify migration functionality:

```bash
cd backend
python -m tests.test_migrations
# or
python tests/test_migrations.py
```

This will:
- Test migration file creation
- Test migration application
- Test database operations
- Verify schema integrity


================================================================================
FILE: backend/migrations/V001__initial_schema.sql
================================================================================

-- Migration: V001__initial_schema
-- Description: Initial database schema for Recall Study App
-- Created: 2025-09-20T09:26:00

-- Workspaces table
CREATE TABLE IF NOT EXISTS workspaces (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    description TEXT,
    type TEXT NOT NULL DEFAULT 'study',
    color TEXT DEFAULT '#007bff',
    folder_path TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Files table
CREATE TABLE IF NOT EXISTS files (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    workspace_id INTEGER NOT NULL,
    name TEXT NOT NULL,
    path TEXT NOT NULL,
    file_type TEXT NOT NULL,
    size INTEGER NOT NULL DEFAULT 0,
    content_hash TEXT,
    question_count INTEGER DEFAULT 0,
    last_processed DATETIME,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (workspace_id) REFERENCES workspaces(id) ON DELETE CASCADE,
    UNIQUE(workspace_id, path)
);

-- Questions table
CREATE TABLE IF NOT EXISTS questions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    file_id INTEGER NOT NULL,
    question_type TEXT NOT NULL,
    question_text TEXT NOT NULL,
    correct_answer TEXT NOT NULL,
    options TEXT, -- JSON array for multiple choice
    explanation TEXT,
    difficulty TEXT DEFAULT 'medium',
    tags TEXT, -- JSON array
    times_asked INTEGER DEFAULT 0,
    times_correct INTEGER DEFAULT 0,
    last_asked DATETIME,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (file_id) REFERENCES files(id) ON DELETE CASCADE
);

-- Quiz sessions table
CREATE TABLE IF NOT EXISTS quiz_sessions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    workspace_id INTEGER NOT NULL,
    file_ids TEXT, -- JSON array of file IDs
    question_count INTEGER DEFAULT 10,
    difficulty_filter TEXT,
    question_types TEXT, -- JSON array
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    started_at DATETIME,
    completed_at DATETIME,
    current_question_index INTEGER DEFAULT 0,
    total_questions INTEGER DEFAULT 0,
    correct_answers INTEGER DEFAULT 0,
    total_time INTEGER DEFAULT 0,
    status TEXT DEFAULT 'created',
    FOREIGN KEY (workspace_id) REFERENCES workspaces(id) ON DELETE CASCADE
);

-- Session questions junction table
CREATE TABLE IF NOT EXISTS session_questions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    session_id INTEGER NOT NULL,
    question_id INTEGER NOT NULL,
    question_order INTEGER NOT NULL,
    user_answer TEXT,
    is_correct BOOLEAN,
    time_taken INTEGER,
    confidence_level INTEGER,
    answered_at DATETIME,
    FOREIGN KEY (session_id) REFERENCES quiz_sessions(id) ON DELETE CASCADE,
    FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE,
    UNIQUE(session_id, question_id)
);

-- Progress tracking table
CREATE TABLE IF NOT EXISTS progress (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id TEXT,
    workspace_id INTEGER NOT NULL,
    file_id INTEGER,
    question_id INTEGER,
    session_id INTEGER,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
    action_type TEXT NOT NULL,
    value REAL,
    metadata TEXT, -- JSON
    FOREIGN KEY (workspace_id) REFERENCES workspaces(id) ON DELETE CASCADE,
    FOREIGN KEY (file_id) REFERENCES files(id) ON DELETE CASCADE,
    FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE,
    FOREIGN KEY (session_id) REFERENCES quiz_sessions(id) ON DELETE CASCADE
);

-- Achievements table
CREATE TABLE IF NOT EXISTS achievements (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT NOT NULL,
    icon TEXT NOT NULL,
    target_value INTEGER NOT NULL,
    category TEXT NOT NULL
);

-- User achievements junction table
CREATE TABLE IF NOT EXISTS user_achievements (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    achievement_id TEXT NOT NULL,
    unlocked_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    progress REAL DEFAULT 0,
    current_value INTEGER DEFAULT 0,
    FOREIGN KEY (achievement_id) REFERENCES achievements(id) ON DELETE CASCADE
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_files_workspace ON files(workspace_id);
CREATE INDEX IF NOT EXISTS idx_questions_file ON questions(file_id);
CREATE INDEX IF NOT EXISTS idx_sessions_workspace ON quiz_sessions(workspace_id);
CREATE INDEX IF NOT EXISTS idx_progress_workspace ON progress(workspace_id);
CREATE INDEX IF NOT EXISTS idx_progress_timestamp ON progress(timestamp);
CREATE INDEX IF NOT EXISTS idx_session_questions_session ON session_questions(session_id);

-- Triggers to update updated_at timestamps
CREATE TRIGGER IF NOT EXISTS update_workspace_timestamp
    AFTER UPDATE ON workspaces
    FOR EACH ROW
    BEGIN
        UPDATE workspaces SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
    END;

CREATE TRIGGER IF NOT EXISTS update_file_timestamp
    AFTER UPDATE ON files
    FOR EACH ROW
    BEGIN
        UPDATE files SET updated_at = CURRENT_TIMESTAMP WHERE id = NEW.id;
    END;


================================================================================
FILE: backend/migrations/V002__test_migration.sql
================================================================================

-- Migration: V002__test_migration
-- Description: Test migration for verification
-- Created: 2025-09-23T11:07:09.937361

-- Add your SQL migration statements here
-- Example:
-- ALTER TABLE users ADD COLUMN email TEXT;
-- CREATE INDEX idx_users_email ON users(email);



================================================================================
FILE: backend/migrations/V004__quiz_improvements.sql
================================================================================

-- Migration: V004__quiz_improvements
-- Description: Add LLM and spaced repetition support to quiz system, plus Knowledge Graph tables
-- Created: 2025-09-24T14:31:00

-- Knowledge Graph Tables

-- Concepts table: represents individual topics or ideas extracted from workspace
CREATE TABLE IF NOT EXISTS concepts (
    concept_id TEXT PRIMARY KEY, -- UUID
    name TEXT NOT NULL,
    description TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Relationships table: represents connections between concepts
CREATE TABLE IF NOT EXISTS relationships (
    relationship_id TEXT PRIMARY KEY, -- UUID
    source_concept_id TEXT NOT NULL,
    target_concept_id TEXT NOT NULL,
    type TEXT NOT NULL, -- 'relates_to', 'dives_deep_to', etc.
    strength REAL, -- optional strength/relevance score
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (source_concept_id) REFERENCES concepts(concept_id) ON DELETE CASCADE,
    FOREIGN KEY (target_concept_id) REFERENCES concepts(concept_id) ON DELETE CASCADE
);

-- Concept-files junction table: links concepts to files where they appear
CREATE TABLE IF NOT EXISTS concept_files (
    concept_file_id TEXT PRIMARY KEY, -- UUID
    concept_id TEXT NOT NULL,
    file_id INTEGER NOT NULL, -- references existing files table
    workspace_id INTEGER NOT NULL, -- references existing workspaces table
    snippet TEXT, -- relevant text snippet
    relevance_score REAL, -- relevance score
    last_accessed_at DATETIME,
    FOREIGN KEY (concept_id) REFERENCES concepts(concept_id) ON DELETE CASCADE,
    FOREIGN KEY (file_id) REFERENCES files(id) ON DELETE CASCADE,
    FOREIGN KEY (workspace_id) REFERENCES workspaces(id) ON DELETE CASCADE
);

-- Quiz Improvements Tables

-- Add columns to questions table for LLM-generated questions
ALTER TABLE questions ADD COLUMN generated_by_llm BOOLEAN DEFAULT FALSE;
ALTER TABLE questions ADD COLUMN generation_prompt TEXT;
ALTER TABLE questions ADD COLUMN confidence_score REAL;
ALTER TABLE questions ADD COLUMN kg_concept_ids TEXT; -- JSON array of concept IDs

-- Create answers table for tracking individual question performance
CREATE TABLE IF NOT EXISTS answers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    question_id INTEGER NOT NULL,
    answer_text TEXT NOT NULL,
    is_correct BOOLEAN NOT NULL,
    time_taken INTEGER NOT NULL, -- Time in seconds
    confidence_level INTEGER, -- User's confidence rating (1-5)
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE
);

-- Create spaced_repetition_data table for spaced repetition algorithm
CREATE TABLE IF NOT EXISTS spaced_repetition_data (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    question_id INTEGER NOT NULL,
    ease_factor REAL DEFAULT 2.5,
    interval_days INTEGER DEFAULT 1,
    review_count INTEGER DEFAULT 0,
    next_review DATETIME,
    kg_concept_id TEXT, -- Optional link to knowledge graph concept
    FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_concepts_name ON concepts(name);
CREATE INDEX IF NOT EXISTS idx_relationships_source ON relationships(source_concept_id);
CREATE INDEX IF NOT EXISTS idx_relationships_target ON relationships(target_concept_id);
CREATE INDEX IF NOT EXISTS idx_concept_files_concept ON concept_files(concept_id);
CREATE INDEX IF NOT EXISTS idx_concept_files_file ON concept_files(file_id);
CREATE INDEX IF NOT EXISTS idx_concept_files_workspace ON concept_files(workspace_id);
CREATE INDEX IF NOT EXISTS idx_answers_question ON answers(question_id);
CREATE INDEX IF NOT EXISTS idx_answers_created_at ON answers(created_at);
CREATE INDEX IF NOT EXISTS idx_spaced_repetition_question ON spaced_repetition_data(question_id);
CREATE INDEX IF NOT EXISTS idx_spaced_repetition_next_review ON spaced_repetition_data(next_review);


================================================================================
FILE: backend/tests/conftest.py
================================================================================

import pytest
from fastapi.testclient import TestClient
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
import os
import tempfile
import uuid
from pathlib import Path
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker

# Import routes
from app.routes.workspaces import router as workspaces_router
from app.routes.files import router as files_router
from app.routes.quiz import router as quiz_router
from app.routes.progress import router as progress_router
from app.routes.search import router as search_router
from app.routes.knowledge_graph import router as knowledge_graph_router

# Import migration service for test database setup
from app.services.migration_service import MigrationService


@pytest.fixture(scope="function", autouse=True)
def setup_test_database(tmp_path):
    """Set up isolated test database for each test."""
    # Create a unique database file for each test
    test_db_path = tmp_path / f"test_recall_{uuid.uuid4().hex}.db"

    # Set environment variable to use test database
    original_db_path = os.environ.get("DATABASE_PATH")
    os.environ["DATABASE_PATH"] = str(test_db_path)

    yield

    # Clean up
    if original_db_path:
        os.environ["DATABASE_PATH"] = original_db_path
    else:
        os.environ.pop("DATABASE_PATH", None)

    # Database file will be automatically cleaned up by tmp_path fixture


@pytest.fixture
def app():
    """Create a test FastAPI app."""
    test_app = FastAPI(title="Test Recall API")

    # Configure CORS
    test_app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

    # Mount static files
    static_dir = Path(__file__).parent.parent / "app" / "static"
    static_dir.mkdir(exist_ok=True)
    test_app.mount("/static", StaticFiles(directory=str(static_dir)), name="static")

    # Include routers
    test_app.include_router(
        workspaces_router, prefix="/api/workspaces", tags=["workspaces"]
    )
    test_app.include_router(files_router, prefix="/api/files", tags=["files"])
    test_app.include_router(quiz_router, prefix="/api/quiz", tags=["quiz"])
    test_app.include_router(progress_router, prefix="/api/progress", tags=["progress"])
    test_app.include_router(search_router, prefix="/api/search", tags=["search"])
    test_app.include_router(
        knowledge_graph_router, prefix="/api/knowledge-graph", tags=["knowledge-graph"]
    )

    return test_app


@pytest.fixture
def client(app):
    """Create a test client for the FastAPI app."""
    with TestClient(app) as test_client:
        yield test_client


@pytest.fixture
def db_session():
    """Create a test database session factory with initialized schema."""
    # Get the test database path from environment
    db_path = os.environ.get("DATABASE_PATH", ":memory:")

    # Initialize database with migrations
    migrations_dir = Path(__file__).parent.parent / "migrations"
    migration_service = MigrationService(str(db_path), str(migrations_dir))

    if not migration_service.apply_pending_migrations():
        raise RuntimeError("Failed to apply database migrations for tests")

    # Create async engine for test database
    engine = create_async_engine(f"sqlite+aiosqlite:///{db_path}", echo=False)

    # Create session factory
    async_session_factory = sessionmaker(
        bind=engine, class_=AsyncSession, expire_on_commit=False
    )

    return async_session_factory


================================================================================
FILE: backend/tests/test_files.py
================================================================================

import pytest


def test_get_workspace_files_empty(client):
    """Test getting files for a workspace with no files."""
    # Create a unique workspace to test against
    import uuid

    unique_name = f"Test Workspace {uuid.uuid4().hex}"
    workspace_data = {"name": unique_name, "folder_path": "/test/path"}
    create_response = client.post("/api/workspaces/", json=workspace_data)
    workspace_id = create_response.json()["id"]

    response = client.get(f"/api/files/workspace/{workspace_id}")
    assert response.status_code == 200
    files = response.json()
    # This workspace should be empty since we just created it
    assert files == []


def test_create_file(client):
    """Test creating a new file."""
    # Create a workspace first
    import uuid

    unique_name = f"Test Workspace {uuid.uuid4().hex}"
    workspace_data = {"name": unique_name, "folder_path": "/test/path"}
    create_workspace_response = client.post("/api/workspaces/", json=workspace_data)
    workspace_id = create_workspace_response.json()["id"]

    file_data = {
        "name": "test.txt",
        "path": "/test/test.txt",
        "file_type": "text",
        "size": 100,
        "workspace_id": workspace_id,
        "content": "This is test content",
    }
    response = client.post("/api/files/", json=file_data)
    assert response.status_code == 200
    data = response.json()
    assert data["name"] == file_data["name"]
    assert data["path"] == file_data["path"]
    assert "id" in data


def test_get_file(client):
    """Test getting a specific file."""
    # Create workspace and file
    import uuid

    unique_name = f"Test Workspace {uuid.uuid4().hex}"
    workspace_data = {"name": unique_name, "folder_path": "/test/path"}
    create_workspace_response = client.post("/api/workspaces/", json=workspace_data)
    workspace_id = create_workspace_response.json()["id"]

    file_data = {
        "name": "test.txt",
        "path": "/test/test.txt",
        "file_type": "text",
        "size": 100,
        "workspace_id": workspace_id,
        "content": "This is test content",
    }
    create_response = client.post("/api/files/", json=file_data)
    file_id = create_response.json()["id"]

    # Get the file
    response = client.get(f"/api/files/{file_id}")
    assert response.status_code == 200
    data = response.json()
    assert data["id"] == file_id
    assert data["name"] == file_data["name"]


def test_get_file_content(client):
    """Test getting file content."""
    # Create workspace and file
    import uuid

    unique_name = f"Test Workspace {uuid.uuid4().hex}"
    workspace_data = {"name": unique_name, "folder_path": "/test/path"}
    create_workspace_response = client.post("/api/workspaces/", json=workspace_data)
    workspace_id = create_workspace_response.json()["id"]

    file_data = {
        "name": "test.txt",
        "path": "/test/test.txt",
        "file_type": "text",
        "size": 100,
        "workspace_id": workspace_id,
        "content": "This is test content",
    }
    create_response = client.post("/api/files/", json=file_data)
    file_id = create_response.json()["id"]

    # Get content
    response = client.get(f"/api/files/{file_id}/content")
    assert response.status_code == 200
    data = response.json()
    # Note: File service currently returns placeholder content
    assert "content" in data
    assert isinstance(data["content"], str)


def test_update_file_content(client):
    """Test updating file content."""
    # Create workspace and file
    import uuid

    unique_name = f"Test Workspace {uuid.uuid4().hex}"
    workspace_data = {"name": unique_name, "folder_path": "/test/path"}
    create_workspace_response = client.post("/api/workspaces/", json=workspace_data)
    workspace_id = create_workspace_response.json()["id"]

    file_data = {
        "name": "test.txt",
        "path": "/test/test.txt",
        "file_type": "text",
        "size": 100,
        "workspace_id": workspace_id,
        "content": "This is test content",
    }
    create_response = client.post("/api/files/", json=file_data)
    file_id = create_response.json()["id"]

    # Update content
    new_content = "Updated content"
    response = client.put(f"/api/files/{file_id}/content?content={new_content}")
    assert response.status_code == 200
    assert response.json()["message"] == "File content updated successfully"

    # Note: File service currently doesn't store actual content, just updates metadata
    # So we can't verify the content was actually updated
    # This test verifies the update operation succeeded


def test_delete_file(client):
    """Test deleting a file."""
    # Create workspace and file
    import uuid

    unique_name = f"Test Workspace {uuid.uuid4().hex}"
    workspace_data = {"name": unique_name, "folder_path": "/test/path"}
    create_workspace_response = client.post("/api/workspaces/", json=workspace_data)
    workspace_id = create_workspace_response.json()["id"]

    file_data = {
        "name": "test.txt",
        "path": "/test/test.txt",
        "file_type": "text",
        "size": 100,
        "workspace_id": workspace_id,
        "content": "This is test content",
    }
    create_response = client.post("/api/files/", json=file_data)
    file_id = create_response.json()["id"]

    # Delete the file
    response = client.delete(f"/api/files/{file_id}")
    assert response.status_code == 200
    assert response.json()["message"] == "File deleted successfully"

    # Verify it's gone
    get_response = client.get(f"/api/files/{file_id}")
    assert get_response.status_code == 404


================================================================================
FILE: backend/tests/test_knowledge_graph.py
================================================================================

"""
Tests for Knowledge Graph functionality
"""

import pytest
import uuid
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession

from app.models import (
    Concept,
    Relationship,
    ConceptFile,
    ConceptCreate,
    RelationshipCreate,
    ConceptFileCreate,
)
from app.services import KnowledgeGraphService


class TestKnowledgeGraphModels:
    """Test Knowledge Graph Pydantic models"""

    def test_concept_create(self):
        """Test ConceptCreate model"""
        concept_data = ConceptCreate(
            name="Machine Learning",
            description="A field of study that gives computers the ability to learn without being explicitly programmed",
        )
        assert concept_data.name == "Machine Learning"
        assert (
            concept_data.description
            == "A field of study that gives computers the ability to learn without being explicitly programmed"
        )
        assert concept_data.concept_id is not None
        assert isinstance(uuid.UUID(concept_data.concept_id), uuid.UUID)

    def test_relationship_create(self):
        """Test RelationshipCreate model"""
        relationship_data = RelationshipCreate(
            source_concept_id=str(uuid.uuid4()),
            target_concept_id=str(uuid.uuid4()),
            type="relates_to",
            strength=0.8,
        )
        assert relationship_data.type == "relates_to"
        assert relationship_data.strength == 0.8
        assert relationship_data.relationship_id is not None

    def test_concept_file_create(self):
        """Test ConceptFileCreate model"""
        concept_file_data = ConceptFileCreate(
            concept_id=str(uuid.uuid4()),
            file_id=1,
            workspace_id=1,
            snippet="Machine learning is a subset of AI",
            relevance_score=0.9,
        )
        assert concept_file_data.snippet == "Machine learning is a subset of AI"
        assert concept_file_data.relevance_score == 0.9
        assert concept_file_data.concept_file_id is not None


class TestKnowledgeGraphService:
    """Test Knowledge Graph Service"""

    @pytest.mark.asyncio
    async def test_create_concept(self, db_session):
        """Test creating a concept"""
        async with db_session() as session:
            kg_service = KnowledgeGraphService(session)

        concept_data = ConceptCreate(
            name="Neural Networks",
            description="A series of algorithms that mimic the operations of a human brain",
        )

        concept = await kg_service.create_concept(concept_data)

        assert concept.name == "Neural Networks"
        assert (
            concept.description
            == "A series of algorithms that mimic the operations of a human brain"
        )
        assert concept.concept_id is not None
        assert concept.created_at is not None
        assert concept.updated_at is not None

    @pytest.mark.asyncio
    async def test_get_concept(self, db_session):
        """Test retrieving a concept"""
        async with db_session() as session:
            kg_service = KnowledgeGraphService(session)

            # Create a concept first
            concept_data = ConceptCreate(name="Deep Learning")
            created_concept = await kg_service.create_concept(concept_data)

            # Retrieve it
            retrieved_concept = await kg_service.get_concept(created_concept.concept_id)

            assert retrieved_concept is not None
            assert retrieved_concept.concept_id == created_concept.concept_id
            assert retrieved_concept.name == "Deep Learning"

    @pytest.mark.asyncio
    async def test_update_concept(self, db_session):
        """Test updating a concept"""
        async with db_session() as session:
            kg_service = KnowledgeGraphService(session)

            # Create a concept
            concept_data = ConceptCreate(name="Supervised Learning")
            created_concept = await kg_service.create_concept(concept_data)

            # Update it
            updated_concept = await kg_service.update_concept(
                created_concept.concept_id,
                name="Supervised Machine Learning",
                description="A type of machine learning using labeled data",
            )

            assert updated_concept is not None
            assert updated_concept.name == "Supervised Machine Learning"
            assert (
                updated_concept.description
                == "A type of machine learning using labeled data"
            )

    @pytest.mark.asyncio
    async def test_delete_concept(self, db_session):
        """Test deleting a concept"""
        async with db_session() as session:
            kg_service = KnowledgeGraphService(session)

            # Create a concept
            concept_data = ConceptCreate(name="Unsupervised Learning")
            created_concept = await kg_service.create_concept(concept_data)

            # Delete it
            deleted = await kg_service.delete_concept(created_concept.concept_id)
            assert deleted is True

            # Verify it's gone
            retrieved = await kg_service.get_concept(created_concept.concept_id)
            assert retrieved is None

    @pytest.mark.asyncio
    async def test_create_relationship(self, db_session):
        """Test creating a relationship between concepts"""
        async with db_session() as session:
            kg_service = KnowledgeGraphService(session)

            # Create two concepts
            concept1_data = ConceptCreate(name="Python")
            concept2_data = ConceptCreate(name="Programming")

            concept1 = await kg_service.create_concept(concept1_data)
            concept2 = await kg_service.create_concept(concept2_data)

            # Create relationship
            relationship_data = RelationshipCreate(
                source_concept_id=concept1.concept_id,
                target_concept_id=concept2.concept_id,
                type="relates_to",
                strength=0.9,
            )

            relationship = await kg_service.create_relationship(relationship_data)

            assert relationship.source_concept_id == concept1.concept_id
            assert relationship.target_concept_id == concept2.concept_id
            assert relationship.type == "relates_to"
            assert relationship.strength == 0.9

    @pytest.mark.asyncio
    async def test_get_relationships_for_concept(self, db_session):
        """Test getting relationships for a concept"""
        async with db_session() as session:
            kg_service = KnowledgeGraphService(session)

            # Create concepts and relationships
            concept1_data = ConceptCreate(name="JavaScript")
            concept2_data = ConceptCreate(name="Web Development")
            concept3_data = ConceptCreate(name="React")

            concept1 = await kg_service.create_concept(concept1_data)
            concept2 = await kg_service.create_concept(concept2_data)
            concept3 = await kg_service.create_concept(concept3_data)

            # Create relationships
            rel1_data = RelationshipCreate(
                source_concept_id=concept1.concept_id,
                target_concept_id=concept2.concept_id,
                type="relates_to",
            )
            rel2_data = RelationshipCreate(
                source_concept_id=concept3.concept_id,
                target_concept_id=concept2.concept_id,
                type="dives_deep_to",
            )

            await kg_service.create_relationship(rel1_data)
            await kg_service.create_relationship(rel2_data)

            # Get relationships for concept2
            relationships = await kg_service.get_relationships_for_concept(
                concept2.concept_id
            )

            assert len(relationships) == 2
            relationship_types = {rel.type for rel in relationships}
            assert "relates_to" in relationship_types
            assert "dives_deep_to" in relationship_types

    @pytest.mark.asyncio
    async def test_create_concept_file_link(self, db_session):
        """Test creating a concept-file link"""
        async with db_session() as session:
            kg_service = KnowledgeGraphService(session)

            # Create a concept
            concept_data = ConceptCreate(name="Database")
            concept = await kg_service.create_concept(concept_data)

            # Create concept-file link
            link_data = ConceptFileCreate(
                concept_id=concept.concept_id,
                file_id=1,
                workspace_id=1,
                snippet="A database is an organized collection of data",
                relevance_score=0.95,
            )

            link = await kg_service.create_concept_file_link(link_data)

            assert link.concept_id == concept.concept_id
            assert link.file_id == 1
            assert link.workspace_id == 1
            assert link.snippet == "A database is an organized collection of data"
            assert link.relevance_score == 0.95

    @pytest.mark.asyncio
    async def test_get_files_for_concept(self, db_session):
        """Test getting files linked to a concept"""
        async with db_session() as session:
            kg_service = KnowledgeGraphService(session)

            # Create a concept
            concept_data = ConceptCreate(name="SQL")
            concept = await kg_service.create_concept(concept_data)

            # Create multiple file links
            link1_data = ConceptFileCreate(
                concept_id=concept.concept_id,
                file_id=1,
                workspace_id=1,
                snippet="SQL is a domain-specific language",
                relevance_score=0.9,
            )
            link2_data = ConceptFileCreate(
                concept_id=concept.concept_id,
                file_id=2,
                workspace_id=1,
                snippet="Structured Query Language",
                relevance_score=0.85,
            )

            await kg_service.create_concept_file_link(link1_data)
            await kg_service.create_concept_file_link(link2_data)

            # Get files for concept
            files = await kg_service.get_files_for_concept(concept.concept_id)

            assert len(files) == 2
            file_ids = {f.file_id for f in files}
            assert 1 in file_ids
            assert 2 in file_ids

    @pytest.mark.asyncio
    async def test_search_concepts(self, db_session):
        """Test searching concepts by name or description"""
        async with db_session() as session:
            kg_service = KnowledgeGraphService(session)

            # Create concepts
            concepts_data = [
                ConceptCreate(
                    name="Python Programming",
                    description="High-level programming language",
                ),
                ConceptCreate(
                    name="Java Programming",
                    description="Object-oriented programming language",
                ),
                ConceptCreate(
                    name="Web Development",
                    description="Building websites and web applications",
                ),
            ]

            for concept_data in concepts_data:
                await kg_service.create_concept(concept_data)

            # Search for "Programming"
            results = await kg_service.search_concepts("Programming", limit=10)

            assert len(results) >= 2
            concept_names = {c.name for c in results}
            assert "Python Programming" in concept_names
            assert "Java Programming" in concept_names

    @pytest.mark.asyncio
    async def test_get_workspace_concepts(self, db_session):
        """Test getting concepts for a workspace"""
        async with db_session() as session:
            kg_service = KnowledgeGraphService(session)

            # Create concepts and link them to files in workspace 1
            concept1_data = ConceptCreate(name="Frontend")
            concept2_data = ConceptCreate(name="Backend")

            concept1 = await kg_service.create_concept(concept1_data)
            concept2 = await kg_service.create_concept(concept2_data)

            # Create file links
            link1_data = ConceptFileCreate(
                concept_id=concept1.concept_id,
                file_id=1,
                workspace_id=1,
                relevance_score=0.9,
            )
            link2_data = ConceptFileCreate(
                concept_id=concept2.concept_id,
                file_id=2,
                workspace_id=1,
                relevance_score=0.85,
            )

            await kg_service.create_concept_file_link(link1_data)
            await kg_service.create_concept_file_link(link2_data)

            # Get workspace concepts
            workspace_concepts = await kg_service.get_workspace_concepts(1)

            assert len(workspace_concepts) == 2
            concept_names = {wc["concept"].name for wc in workspace_concepts}
            assert "Frontend" in concept_names
            assert "Backend" in concept_names

    @pytest.mark.asyncio
    async def test_get_concepts_for_file(self, db_session):
        """Test getting concepts linked to a file"""
        async with db_session() as session:
            kg_service = KnowledgeGraphService(session)

            # Create concepts
            concept1_data = ConceptCreate(name="Database Design")
            concept2_data = ConceptCreate(name="SQL Queries")

            concept1 = await kg_service.create_concept(concept1_data)
            concept2 = await kg_service.create_concept(concept2_data)

            # Create concept-file links
            link1_data = ConceptFileCreate(
                concept_id=concept1.concept_id,
                file_id=1,
                workspace_id=1,
                snippet="Database design principles",
                relevance_score=0.9,
            )
            link2_data = ConceptFileCreate(
                concept_id=concept2.concept_id,
                file_id=1,
                workspace_id=1,
                snippet="SQL query examples",
                relevance_score=0.85,
            )
            link3_data = ConceptFileCreate(
                concept_id=concept1.concept_id,
                file_id=2,
                workspace_id=1,
                snippet="Normalization concepts",
                relevance_score=0.8,
            )

            await kg_service.create_concept_file_link(link1_data)
            await kg_service.create_concept_file_link(link2_data)
            await kg_service.create_concept_file_link(link3_data)

            # Get concepts for file 1
            concepts_file1 = await kg_service.get_concepts_for_file(1)

            assert len(concepts_file1) == 2
            concept_names = {cf.concept_id for cf in concepts_file1}
            assert concept1.concept_id in concept_names
            assert concept2.concept_id in concept_names

            # Get concepts for file 2
            concepts_file2 = await kg_service.get_concepts_for_file(2)

            assert len(concepts_file2) == 1
            assert concepts_file2[0].concept_id == concept1.concept_id

            # Get concepts for non-existent file
            concepts_none = await kg_service.get_concepts_for_file(999)
            assert concepts_none == []

    @pytest.mark.asyncio
    async def test_get_concept_graph(self, db_session):
        """Test getting a concept graph around a central concept"""
        async with db_session() as session:
            kg_service = KnowledgeGraphService(session)

            # Create central concept
            central_concept_data = ConceptCreate(name="Machine Learning")
            central_concept = await kg_service.create_concept(central_concept_data)

            # Create related concepts
            related1_data = ConceptCreate(name="Supervised Learning")
            related2_data = ConceptCreate(name="Unsupervised Learning")
            related3_data = ConceptCreate(name="Neural Networks")

            related1 = await kg_service.create_concept(related1_data)
            related2 = await kg_service.create_concept(related2_data)
            related3 = await kg_service.create_concept(related3_data)

            # Create relationships
            rel1_data = RelationshipCreate(
                source_concept_id=central_concept.concept_id,
                target_concept_id=related1.concept_id,
                type="has_type",
                strength=0.9,
            )
            rel2_data = RelationshipCreate(
                source_concept_id=central_concept.concept_id,
                target_concept_id=related2.concept_id,
                type="has_type",
                strength=0.8,
            )
            rel3_data = RelationshipCreate(
                source_concept_id=related1.concept_id,
                target_concept_id=related3.concept_id,
                type="uses",
                strength=0.7,
            )

            await kg_service.create_relationship(rel1_data)
            await kg_service.create_relationship(rel2_data)
            await kg_service.create_relationship(rel3_data)

            # Get concept graph
            graph = await kg_service.get_concept_graph(
                central_concept.concept_id, depth=2
            )

            # Should include central concept and directly related concepts
            assert len(graph["nodes"]) >= 3  # Central + 2 related
            assert len(graph["edges"]) >= 2  # Relationships from central

            # Check central node
            central_node = next(
                n for n in graph["nodes"] if n["id"] == central_concept.concept_id
            )
            assert central_node["name"] == "Machine Learning"

            # Check edges
            edge_types = {e["type"] for e in graph["edges"]}
            assert "has_type" in edge_types

    @pytest.mark.asyncio
    async def test_get_concept_graph_nonexistent(self, db_session):
        """Test getting concept graph for non-existent concept"""
        async with db_session() as session:
            kg_service = KnowledgeGraphService(session)

            graph = await kg_service.get_concept_graph("nonexistent-concept-id")

            assert graph["nodes"] == []
            assert graph["edges"] == []


================================================================================
FILE: backend/tests/test_migrations.py
================================================================================

"""
Test migration functionality using pytest fixtures
"""

import os
from pathlib import Path
from app.services.database import DatabaseService


def test_migrations():
    """Test the migration system using isolated test database"""
    # DatabaseService will use the DATABASE_PATH environment variable
    # set by the conftest.py fixture, so no need to specify path here
    db_service = DatabaseService()

    # Check migration status
    status = db_service.get_migration_status()
    assert "applied_migrations" in status
    assert "pending_migrations" in status

    # Test creating a new migration
    migration_file = db_service.create_migration(
        "V999__test_migration", "Test migration for verification"
    )
    assert migration_file.exists()

    # Clean up the test migration file
    if migration_file.exists():
        migration_file.unlink()

    # Test applying migrations (should succeed since all are applied)
    success = db_service.apply_pending_migrations()
    assert success is True

    # Check final status
    final_status = db_service.get_migration_status()
    assert len(final_status["applied_migrations"]) >= 1  # At least initial schema

    # Test database operations work
    workspace_id = db_service.insert(
        "workspaces",
        {
            "name": "Test Workspace",
            "description": "Test workspace for migration verification",
            "type": "study",
            "color": "#ff0000",
        },
    )
    assert workspace_id > 0

    # Query the workspace
    workspace = db_service.get_by_id("workspaces", workspace_id)
    assert workspace is not None
    assert workspace["name"] == "Test Workspace"
    assert workspace["description"] == "Test workspace for migration verification"


================================================================================
FILE: backend/tests/test_quiz_improvements.py
================================================================================

"""
Tests for Quiz Improvements functionality
"""

import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from datetime import datetime, timedelta, UTC
from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncSession

from app.models import Question, QuestionCreate, SpacedRepetitionData
from app.services import QuizService


class TestSpacedRepetitionEngine:
    """Test the SM-2 Spaced Repetition Algorithm"""

    def test_calculate_next_review_successful(self):
        """Test next review calculation for successful recall"""
        from app.services.quiz_service import SpacedRepetitionEngine

        engine = SpacedRepetitionEngine()

        # Test first successful review (quality = 5)
        ease_factor, interval, next_review = engine.calculate_next_review(
            ease_factor=2.5,
            interval_days=1,
            review_count=0,
            quality=5,
            last_review=datetime.now(UTC),
        )

        assert ease_factor == 2.6  # 2.5 + (0.1 - 0.0)
        assert interval == 1  # First review always 1 day

        # Test second successful review
        ease_factor, interval, next_review = engine.calculate_next_review(
            ease_factor=2.6,
            interval_days=1,
            review_count=1,
            quality=4,
            last_review=datetime.now(UTC),
        )

        assert ease_factor == 2.6  # 2.6 + (0.1 - 0.1) = 2.6 + 0.0 = 2.6
        assert interval == 6  # Second review is 6 days

        # Test third successful review
        ease_factor, interval, next_review = engine.calculate_next_review(
            ease_factor=2.68,
            interval_days=6,
            review_count=2,
            quality=3,
            last_review=datetime.now(UTC),
        )

        assert ease_factor == 2.58  # 2.68 + (0.1 - 0.2) = 2.68 - 0.1 = 2.58
        assert interval == round(6 * 2.68)  # interval * ease_factor

    def test_calculate_next_review_failed(self):
        """Test next review calculation for failed recall"""
        from app.services.quiz_service import SpacedRepetitionEngine

        engine = SpacedRepetitionEngine()

        # Test failed review (quality < 3)
        ease_factor, interval, next_review = engine.calculate_next_review(
            ease_factor=2.5,
            interval_days=10,
            review_count=3,
            quality=2,
            last_review=datetime.now(UTC),
        )

        assert ease_factor == 2.3  # max(1.3, 2.5 - 0.2)
        assert interval == 1  # Failed reviews reset to 1 day

    def test_ease_factor_bounds(self):
        """Test ease factor stays within bounds"""
        from app.services.quiz_service import SpacedRepetitionEngine

        engine = SpacedRepetitionEngine()

        # Test minimum bound
        ease_factor, _, _ = engine.calculate_next_review(
            ease_factor=1.4,
            interval_days=1,
            review_count=0,
            quality=2,
            last_review=datetime.now(UTC),
        )

        assert ease_factor == 1.3  # Minimum bound

        # Test maximum bound (theoretically, though hard to reach)
        ease_factor, _, _ = engine.calculate_next_review(
            ease_factor=2.9,
            interval_days=1,
            review_count=0,
            quality=5,
            last_review=datetime.now(UTC),
        )

        assert ease_factor <= 3.0  # Maximum bound


class TestQuizService:
    """Test Quiz Service functionality"""

    @pytest.fixture
    def mock_llm_factory(self):
        """Mock LLM factory for testing"""
        mock_factory = MagicMock()
        mock_client = AsyncMock()
        mock_client.generate_text.return_value = """
        [
          {
            "question": "What is machine learning?",
            "type": "short_answer",
            "answer": "Machine learning is a subset of AI that enables computers to learn without being explicitly programmed",
            "explanation": "Machine learning uses algorithms to identify patterns in data",
            "confidence": 0.95
          }
        ]
        """
        mock_factory.get_client.return_value = mock_client
        return mock_factory

    @pytest.mark.asyncio
    async def test_generate_llm_questions(self, db_session, mock_llm_factory):
        """Test LLM question generation"""
        async with db_session() as session:
            quiz_service = QuizService(session, mock_llm_factory)

            questions = await quiz_service.generate_llm_questions(
                file_content="Machine learning is a method of data analysis that automates analytical model building.",
                file_id=1,
                count=1,
                question_types=["short_answer"],
                difficulty="medium",
            )

            assert len(questions) == 1
            question = questions[0]
            assert question.question_text == "What is machine learning?"
            assert question.question_type == "short_answer"
            assert question.generated_by_llm is True
            assert question.confidence_score == 0.95

    @pytest.mark.asyncio
    async def test_update_spaced_repetition_new(self, db_session):
        """Test updating spaced repetition for new question"""
        async with db_session() as session:
            quiz_service = QuizService(session)

            # Create a question first
            question_data = QuestionCreate(
                file_id=1,
                question_type="multiple_choice",
                question_text="What is Python?",
                correct_answer="A programming language",
                options=["A programming language", "A snake", "A database"],
            )

            # Save question to get ID
            saved_question = await quiz_service._save_question(question_data)

            # Update spaced repetition with good performance
            result = await quiz_service.update_spaced_repetition(
                question_id=saved_question.id, answer_quality=5
            )

            assert result.question_id == saved_question.id
            assert result.ease_factor == 2.6  # Initial 2.5 + 0.1
            assert result.interval_days == 1  # First review
            assert result.review_count == 1

    @pytest.mark.asyncio
    async def test_update_spaced_repetition_existing(self, db_session):
        """Test updating spaced repetition for existing data"""
        async with db_session() as session:
            quiz_service = QuizService(session)

            # Create a question
            question_data = QuestionCreate(
                file_id=1,
                question_type="true_false",
                question_text="Python is a programming language",
                correct_answer="True",
            )
            saved_question = await quiz_service._save_question(question_data)

            # First update
            await quiz_service.update_spaced_repetition(
                question_id=saved_question.id, answer_quality=5
            )

            # Second update
            result = await quiz_service.update_spaced_repetition(
                question_id=saved_question.id, answer_quality=4
            )

            assert result.question_id == saved_question.id
            assert result.review_count == 2
            assert result.interval_days == 6  # Second review interval

    @pytest.mark.asyncio
    async def test_get_questions_due_for_review(self, db_session):
        """Test getting questions due for review"""
        async with db_session() as session:
            quiz_service = QuizService(session)

            # Create questions and spaced repetition data
            question_data = QuestionCreate(
                file_id=1,
                question_type="multiple_choice",
                question_text="What is AI?",
                correct_answer="Artificial Intelligence",
            )
            saved_question = await quiz_service._save_question(question_data)

            # Create spaced repetition data that's due
            past_date = datetime.now(UTC) - timedelta(days=1)
            await quiz_service.update_spaced_repetition(
                question_id=saved_question.id, answer_quality=5
            )

            # Manually update the next_review to be in the past
            from sqlalchemy import text

            await session.execute(
                text(
                    "UPDATE spaced_repetition_data SET next_review = :past_date WHERE question_id = :question_id"
                ),
                {"past_date": past_date, "question_id": saved_question.id},
            )
            await session.commit()

            # Get due questions
            due_questions = await quiz_service.get_questions_due_for_review(limit=10)

            assert len(due_questions) >= 1
            found_question = None
            for dq in due_questions:
                if dq["question"].id == saved_question.id:
                    found_question = dq
                    break

            assert found_question is not None
            assert found_question["question"].question_text == "What is AI?"

    @pytest.mark.asyncio
    async def test_get_adaptive_question_set(self, db_session):
        """Test getting adaptive question set"""
        async with db_session() as session:
            quiz_service = QuizService(session)

            # Create a file in workspace 1
            file_query = text(
                """
                INSERT INTO files (workspace_id, name, path, file_type, size, created_at, updated_at)
                VALUES (1, 'test.txt', 'test.txt', 'text', 100, :created_at, :updated_at)
            """
            )
            await session.execute(
                file_query,
                {"created_at": datetime.now(UTC), "updated_at": datetime.now(UTC)},
            )
            await session.commit()

            # Get the file ID
            file_result = await session.execute(text("SELECT last_insert_rowid()"))
            file_id = file_result.scalar()

            # Create some questions for this file
            questions_data = [
                QuestionCreate(
                    file_id=file_id,
                    question_type="multiple_choice",
                    question_text=f"Question {i}",
                    correct_answer=f"Answer {i}",
                )
                for i in range(5)
            ]

            saved_questions = []
            for q_data in questions_data:
                saved_q = await quiz_service._save_question(q_data)
                saved_questions.append(saved_q)

            # Get adaptive set
            adaptive_questions = await quiz_service.get_adaptive_question_set(
                workspace_id=1, count=3
            )

            assert len(adaptive_questions) == 3
            # Should prioritize questions with fewer asks
            question_ids = {q.id for q in adaptive_questions}
            saved_ids = {q.id for q in saved_questions}
            assert question_ids.issubset(saved_ids)

    def test_build_generation_prompt(self):
        """Test LLM prompt building"""
        quiz_service = QuizService(None)

        prompt = quiz_service._build_generation_prompt(
            content="Python is a programming language.",
            count=2,
            question_types=["multiple_choice", "short_answer"],
            difficulty="easy",
        )

        assert "Python is a programming language." in prompt
        assert "2 diverse quiz questions" in prompt
        assert "multiple_choice, short_answer" in prompt
        assert "easy difficulty level" in prompt
        assert "JSON array" in prompt

    def test_parse_llm_response(self):
        """Test LLM response parsing"""
        quiz_service = QuizService(None)

        response = """
        [
          {
            "question": "What is Python?",
            "type": "short_answer",
            "answer": "A programming language",
            "explanation": "Python is a high-level programming language",
            "confidence": 0.9
          }
        ]
        """

        parsed = quiz_service._parse_llm_response(response)

        assert len(parsed) == 1
        assert parsed[0]["question"] == "What is Python?"
        assert parsed[0]["type"] == "short_answer"
        assert parsed[0]["confidence"] == 0.9

    def test_parse_llm_response_malformed(self):
        """Test parsing malformed LLM response"""
        quiz_service = QuizService(None)

        # Test with no JSON
        parsed = quiz_service._parse_llm_response("This is not JSON")
        assert parsed == []

        # Test with invalid JSON
        parsed = quiz_service._parse_llm_response('{"invalid": json}')
        assert parsed == []


class TestQuizAPI:
    """Test Quiz API endpoints"""

    @pytest.mark.asyncio
    async def test_generate_llm_questions_endpoint(self, client, db_session):
        """Test the LLM question generation endpoint"""
        # This would require setting up test client with proper fixtures
        # For now, just test that the endpoint exists and can be called
        pass

    @pytest.mark.asyncio
    async def test_spaced_repetition_update_endpoint(self, client, db_session):
        """Test spaced repetition update endpoint"""
        # Test with valid quality score
        pass

    @pytest.mark.asyncio
    async def test_spaced_repetition_update_invalid_quality(self, client):
        """Test spaced repetition with invalid quality score"""
        # Should return 400 for quality < 0 or > 5
        pass

    @pytest.mark.asyncio
    async def test_get_due_questions_endpoint(self, client, db_session):
        """Test getting questions due for review"""
        pass

    @pytest.mark.asyncio
    async def test_adaptive_quiz_endpoint(self, client, db_session):
        """Test adaptive quiz generation endpoint"""
        pass

    @pytest.mark.asyncio
    async def test_weak_areas_endpoint(self, client, db_session):
        """Test weak areas analysis endpoint"""
        pass


================================================================================
FILE: backend/tests/test_quiz_service.py
================================================================================

"""
Tests for Quiz Service functionality
"""

import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from datetime import datetime, timedelta, UTC
from sqlalchemy import text
from sqlalchemy.ext.asyncio import AsyncSession
import json

from app.models import Question, QuestionCreate, SpacedRepetitionData
from app.services import QuizService


class TestSpacedRepetitionEngine:
    """Test the SM-2 Spaced Repetition Algorithm"""

    def test_calculate_next_review_successful(self):
        """Test next review calculation for successful recall"""
        from app.services.quiz_service import SpacedRepetitionEngine

        engine = SpacedRepetitionEngine()

        # Test first successful review (quality = 5)
        ease_factor, interval, next_review = engine.calculate_next_review(
            ease_factor=2.5,
            interval_days=1,
            review_count=0,
            quality=5,
            last_review=datetime.now(UTC),
        )

        assert ease_factor == 2.6  # 2.5 + (0.1 - 0.0)
        assert interval == 1  # First review always 1 day

        # Test second successful review
        ease_factor, interval, next_review = engine.calculate_next_review(
            ease_factor=2.6,
            interval_days=1,
            review_count=1,
            quality=4,
            last_review=datetime.now(UTC),
        )

        assert ease_factor == 2.6  # 2.6 + (0.1 - 0.1) = 2.6 + 0.0 = 2.6
        assert interval == 6  # Second review is 6 days

        # Test third successful review
        ease_factor, interval, next_review = engine.calculate_next_review(
            ease_factor=2.68,
            interval_days=6,
            review_count=2,
            quality=3,
            last_review=datetime.now(UTC),
        )

        assert ease_factor == 2.58  # 2.68 + (0.1 - 0.2) = 2.68 - 0.1 = 2.58
        assert interval == round(6 * 2.68)  # interval * ease_factor

    def test_calculate_next_review_failed(self):
        """Test next review calculation for failed recall"""
        from app.services.quiz_service import SpacedRepetitionEngine

        engine = SpacedRepetitionEngine()

        # Test failed review (quality < 3)
        ease_factor, interval, next_review = engine.calculate_next_review(
            ease_factor=2.5,
            interval_days=10,
            review_count=3,
            quality=2,
            last_review=datetime.now(UTC),
        )

        assert ease_factor == 2.3  # max(1.3, 2.5 - 0.2)
        assert interval == 1  # Failed reviews reset to 1 day

    def test_ease_factor_bounds(self):
        """Test ease factor stays within bounds"""
        from app.services.quiz_service import SpacedRepetitionEngine

        engine = SpacedRepetitionEngine()

        # Test minimum bound
        ease_factor, _, _ = engine.calculate_next_review(
            ease_factor=1.4,
            interval_days=1,
            review_count=0,
            quality=2,
            last_review=datetime.now(UTC),
        )

        assert ease_factor == 1.3  # Minimum bound

        # Test maximum bound (theoretically, though hard to reach)
        ease_factor, _, _ = engine.calculate_next_review(
            ease_factor=2.9,
            interval_days=1,
            review_count=0,
            quality=5,
            last_review=datetime.now(UTC),
        )

        assert ease_factor <= 3.0  # Maximum bound


class TestQuizService:
    """Test Quiz Service functionality"""

    @pytest.fixture
    def mock_llm_factory(self):
        """Mock LLM factory for testing"""
        mock_factory = MagicMock()
        mock_client = AsyncMock()
        mock_client.generate_text.return_value = """
        [
          {
            "question": "What is machine learning?",
            "type": "short_answer",
            "answer": "Machine learning is a subset of AI that enables computers to learn without being explicitly programmed",
            "explanation": "Machine learning uses algorithms to identify patterns in data",
            "confidence": 0.95
          }
        ]
        """
        mock_factory.get_client.return_value = mock_client
        return mock_factory

    @pytest.mark.asyncio
    async def test_generate_llm_questions(self, db_session, mock_llm_factory):
        """Test LLM question generation"""
        async with db_session() as session:
            quiz_service = QuizService(session, mock_llm_factory)

        questions = await quiz_service.generate_llm_questions(
            file_content="Machine learning is a method of data analysis that automates analytical model building.",
            file_id=1,
            count=1,
            question_types=["short_answer"],
            difficulty="medium",
        )

        assert len(questions) == 1
        question = questions[0]
        assert question.question_text == "What is machine learning?"
        assert question.question_type == "short_answer"
        assert question.generated_by_llm is True
        assert question.confidence_score == 0.95

    @pytest.mark.asyncio
    async def test_generate_llm_questions_multiple_choice(self, db_session):
        """Test LLM question generation with multiple choice questions"""
        mock_factory = MagicMock()
        mock_client = AsyncMock()
        mock_client.generate_text.return_value = """
        [
          {
            "question": "What is Python?",
            "type": "multiple_choice",
            "answer": "A programming language",
            "options": ["A programming language", "A snake", "A database", "A web browser"],
            "explanation": "Python is a high-level programming language",
            "confidence": 0.9
          }
        ]
        """
        mock_factory.get_client.return_value = mock_client

        async with db_session() as session:
            quiz_service = QuizService(session, mock_factory)

            questions = await quiz_service.generate_llm_questions(
                file_content="Python is a programming language used for web development.",
                file_id=1,
                count=1,
            )

            assert len(questions) == 1
            question = questions[0]
            assert question.question_type == "multiple_choice"
            assert question.options == [
                "A programming language",
                "A snake",
                "A database",
                "A web browser",
            ]
            assert question.correct_answer == "A programming language"

    @pytest.mark.asyncio
    async def test_generate_llm_questions_llm_failure(self, db_session):
        """Test LLM question generation when LLM fails"""
        mock_factory = MagicMock()
        mock_client = AsyncMock()
        mock_client.generate_text.side_effect = Exception("LLM service unavailable")
        mock_factory.get_client.return_value = mock_client

        async with db_session() as session:
            quiz_service = QuizService(session, mock_factory)

            questions = await quiz_service.generate_llm_questions(
                file_content="Some content",
                file_id=1,
                count=1,
            )

            # Should return empty list on LLM failure
            assert questions == []

    @pytest.mark.asyncio
    async def test_update_spaced_repetition_new(self, db_session):
        """Test updating spaced repetition for new question"""
        async with db_session() as session:
            quiz_service = QuizService(session)

            # Create a question first
            question_data = QuestionCreate(
                file_id=1,
                question_type="multiple_choice",
                question_text="What is Python?",
                correct_answer="A programming language",
                options=["A programming language", "A snake", "A database"],
            )

            # Save question to get ID
            saved_question = await quiz_service._save_question(question_data)

            # Update spaced repetition with good performance
            result = await quiz_service.update_spaced_repetition(
                question_id=saved_question.id, answer_quality=5
            )

            assert result.question_id == saved_question.id
            assert result.ease_factor == 2.6  # Initial 2.5 + 0.1
            assert result.interval_days == 1  # First review
            assert result.review_count == 1

    @pytest.mark.asyncio
    async def test_update_spaced_repetition_existing(self, db_session):
        """Test updating spaced repetition for existing data"""
        async with db_session() as session:
            quiz_service = QuizService(session)

            # Create a question
            question_data = QuestionCreate(
                file_id=1,
                question_type="true_false",
                question_text="Python is a programming language",
                correct_answer="True",
            )
            saved_question = await quiz_service._save_question(question_data)

            # First update
            await quiz_service.update_spaced_repetition(
                question_id=saved_question.id, answer_quality=5
            )

            # Second update
            result = await quiz_service.update_spaced_repetition(
                question_id=saved_question.id, answer_quality=4
            )

            assert result.question_id == saved_question.id
            assert result.review_count == 2
            assert result.interval_days == 6  # Second review interval

    @pytest.mark.asyncio
    async def test_update_spaced_repetition_failed_review(self, db_session):
        """Test updating spaced repetition for failed review"""
        async with db_session() as session:
            quiz_service = QuizService(session)

            # Create a question
            question_data = QuestionCreate(
                file_id=1,
                question_type="short_answer",
                question_text="What is AI?",
                correct_answer="Artificial Intelligence",
            )
            saved_question = await quiz_service._save_question(question_data)

            # Successful review first
            await quiz_service.update_spaced_repetition(
                question_id=saved_question.id, answer_quality=5
            )

            # Failed review
            result = await quiz_service.update_spaced_repetition(
                question_id=saved_question.id, answer_quality=2
            )

            assert result.question_id == saved_question.id
            assert result.interval_days == 1  # Reset to 1 day
            assert result.ease_factor < 2.6  # Should decrease

    @pytest.mark.asyncio
    async def test_get_questions_due_for_review(self, db_session):
        """Test getting questions due for review"""
        async with db_session() as session:
            quiz_service = QuizService(session)

            # Create questions and spaced repetition data
            question_data = QuestionCreate(
                file_id=1,
                question_type="multiple_choice",
                question_text="What is AI?",
                correct_answer="Artificial Intelligence",
            )
            saved_question = await quiz_service._save_question(question_data)

            # Create spaced repetition data that's due
            past_date = datetime.now(UTC) - timedelta(days=1)
            await quiz_service.update_spaced_repetition(
                question_id=saved_question.id, answer_quality=5
            )

            # Manually update the next_review to be in the past
            from sqlalchemy import text

            await session.execute(
                text(
                    "UPDATE spaced_repetition_data SET next_review = :past_date WHERE question_id = :question_id"
                ),
                {"past_date": past_date, "question_id": saved_question.id},
            )
            await session.commit()

            # Get due questions
            due_questions = await quiz_service.get_questions_due_for_review(limit=10)

            assert len(due_questions) >= 1
            found_question = None
            for dq in due_questions:
                if dq["question"].id == saved_question.id:
                    found_question = dq
                    break

            assert found_question is not None
            assert found_question["question"].question_text == "What is AI?"

    @pytest.mark.asyncio
    async def test_get_questions_due_for_review_with_concept_filter(self, db_session):
        """Test getting questions due for review with concept filter"""
        async with db_session() as session:
            quiz_service = QuizService(session)

            # Create question
            question_data = QuestionCreate(
                file_id=1,
                question_type="short_answer",
                question_text="What is ML?",
                correct_answer="Machine Learning",
            )
            saved_question = await quiz_service._save_question(question_data)

            # Update with concept
            await quiz_service.update_spaced_repetition(
                question_id=saved_question.id,
                answer_quality=5,
                concept_id="ml-concept-123",
            )

            # Manually set past due date
            past_date = datetime.now(UTC) - timedelta(days=1)
            from sqlalchemy import text

            await session.execute(
                text(
                    "UPDATE spaced_repetition_data SET next_review = :past_date WHERE question_id = :question_id"
                ),
                {"past_date": past_date, "question_id": saved_question.id},
            )
            await session.commit()

            # Get due questions with concept filter
            due_questions = await quiz_service.get_questions_due_for_review(
                limit=10, concept_ids=["ml-concept-123"]
            )

            assert len(due_questions) >= 1

            # Get due questions with different concept filter
            due_questions_filtered = await quiz_service.get_questions_due_for_review(
                limit=10, concept_ids=["different-concept"]
            )

            # Should not include our question
            found = any(
                dq["question"].id == saved_question.id for dq in due_questions_filtered
            )
            assert not found

    @pytest.mark.asyncio
    async def test_get_adaptive_question_set(self, db_session):
        """Test getting adaptive question set"""
        async with db_session() as session:
            quiz_service = QuizService(session)

            # Create a workspace first
            from app.services.workspace_service import WorkspaceService

            workspace_service = WorkspaceService(None)  # We don't need DB for this test
            workspace_data = {
                "name": "Test Workspace",
                "description": "Test workspace for adaptive questions",
                "folder_path": "/tmp/test",
            }
            # For this test, we'll assume workspace 1 exists or create it
            # Since we're using isolated DB, let's create a file in workspace 1

            # Create a file in workspace 1
            file_query = text(
                """
                INSERT INTO files (workspace_id, name, path, file_type, size, created_at, updated_at)
                VALUES (1, 'test.txt', 'test.txt', 'text', 100, :created_at, :updated_at)
            """
            )
            await session.execute(
                file_query,
                {"created_at": datetime.now(UTC), "updated_at": datetime.now(UTC)},
            )
            await session.commit()

            # Get the file ID
            file_result = await session.execute(text("SELECT last_insert_rowid()"))
            file_id = file_result.scalar()

            # Create some questions for this file
            questions_data = [
                QuestionCreate(
                    file_id=file_id,
                    question_type="multiple_choice",
                    question_text=f"Question {i}",
                    correct_answer=f"Answer {i}",
                )
                for i in range(5)
            ]

            saved_questions = []
            for q_data in questions_data:
                saved_q = await quiz_service._save_question(q_data)
                saved_questions.append(saved_q)

            # Get adaptive set
            adaptive_questions = await quiz_service.get_adaptive_question_set(
                workspace_id=1, count=3
            )

            assert len(adaptive_questions) == 3
            # Should prioritize questions with fewer asks
            question_ids = {q.id for q in adaptive_questions}
            saved_ids = {q.id for q in saved_questions}
            assert question_ids.issubset(saved_ids)

    @pytest.mark.asyncio
    async def test_save_question(self, db_session):
        """Test saving a question to database"""
        async with db_session() as session:
            quiz_service = QuizService(session)

        question_data = QuestionCreate(
            file_id=1,
            question_type="multiple_choice",
            question_text="What is Docker?",
            correct_answer="A containerization platform",
            options=[
                "A containerization platform",
                "A database",
                "A programming language",
            ],
            explanation="Docker allows you to package applications in containers",
            difficulty="medium",
            tags=["docker", "containers"],
            generated_by_llm=False,
            confidence_score=0.8,
            kg_concept_ids=["docker-concept", "containers-concept"],
        )

        saved_question = await quiz_service._save_question(question_data)

        assert saved_question.id is not None
        assert saved_question.file_id == 1
        assert saved_question.question_text == "What is Docker?"
        assert saved_question.correct_answer == "A containerization platform"
        assert saved_question.options == [
            "A containerization platform",
            "A database",
            "A programming language",
        ]
        assert (
            saved_question.explanation
            == "Docker allows you to package applications in containers"
        )
        assert saved_question.difficulty == "medium"
        assert saved_question.generated_by_llm is False
        assert saved_question.confidence_score == 0.8
        assert saved_question.kg_concept_ids == ["docker-concept", "containers-concept"]

    def test_build_generation_prompt(self):
        """Test LLM prompt building"""
        quiz_service = QuizService(None)

        prompt = quiz_service._build_generation_prompt(
            content="Python is a programming language.",
            count=2,
            question_types=["multiple_choice", "short_answer"],
            difficulty="easy",
        )

        assert "Python is a programming language." in prompt
        assert "2 diverse quiz questions" in prompt
        assert "multiple_choice, short_answer" in prompt
        assert "easy difficulty level" in prompt
        assert "JSON array" in prompt

    def test_build_generation_prompt_no_difficulty(self):
        """Test LLM prompt building without difficulty"""
        quiz_service = QuizService(None)

        prompt = quiz_service._build_generation_prompt(
            content="JavaScript is a programming language.",
            count=1,
            question_types=None,
        )

        assert "JavaScript is a programming language." in prompt
        assert "1 diverse quiz questions" in prompt
        assert "multiple choice, true/false, short answer" in prompt
        assert "difficulty level" not in prompt

    def test_parse_llm_response(self):
        """Test LLM response parsing"""
        quiz_service = QuizService(None)

        response = """
        [
          {
            "question": "What is Python?",
            "type": "short_answer",
            "answer": "A programming language",
            "explanation": "Python is a high-level programming language",
            "confidence": 0.9
          }
        ]
        """

        parsed = quiz_service._parse_llm_response(response)

        assert len(parsed) == 1
        assert parsed[0]["question"] == "What is Python?"
        assert parsed[0]["type"] == "short_answer"
        assert parsed[0]["confidence"] == 0.9

    def test_parse_llm_response_malformed(self):
        """Test parsing malformed LLM response"""
        quiz_service = QuizService(None)

        # Test with no JSON
        parsed = quiz_service._parse_llm_response("This is not JSON")
        assert parsed == []

        # Test with invalid JSON
        parsed = quiz_service._parse_llm_response('{"invalid": json}')
        assert parsed == []

    def test_parse_llm_response_with_options(self):
        """Test parsing LLM response with multiple choice options"""
        quiz_service = QuizService(None)

        response = """
        [
          {
            "question": "What does CPU stand for?",
            "type": "multiple_choice",
            "answer": "Central Processing Unit",
            "options": ["Central Processing Unit", "Computer Power Unit", "Central Program Unit", "Computer Processing Unit"],
            "explanation": "CPU is the brain of the computer",
            "confidence": 0.95
          }
        ]
        """

        parsed = quiz_service._parse_llm_response(response)

        assert len(parsed) == 1
        assert parsed[0]["options"] == [
            "Central Processing Unit",
            "Computer Power Unit",
            "Central Program Unit",
            "Computer Processing Unit",
        ]
        assert parsed[0]["answer"] == "Central Processing Unit"


================================================================================
FILE: backend/tests/test_search.py
================================================================================

import pytest
import os
import tempfile


def test_search_content_empty_query(client):
    """Test search with empty query."""
    request_data = {"workspace_id": 1, "query": "", "folder_path": "/tmp"}
    response = client.post("/api/search/content", json=request_data)
    assert response.status_code == 400
    assert "cannot be empty" in response.json()["detail"]


def test_search_content_invalid_path(client):
    """Test search with invalid folder path."""
    request_data = {
        "workspace_id": 1,
        "query": "test",
        "folder_path": "/nonexistent/path",
    }
    response = client.post("/api/search/content", json=request_data)
    assert response.status_code == 404
    assert "not found" in response.json()["detail"]


def test_search_content_no_matches(client):
    """Test search that returns no matches."""
    with tempfile.TemporaryDirectory() as temp_dir:
        # Create a test file with content that won't match
        test_file = os.path.join(temp_dir, "test.txt")
        with open(test_file, "w") as f:
            f.write("This is some test content that won't match our search.")

        request_data = {
            "workspace_id": 1,
            "query": "nonexistentword",
            "folder_path": temp_dir,
        }
        response = client.post("/api/search/content", json=request_data)
        assert response.status_code == 200
        assert response.json() == []


def test_search_content_with_matches(client):
    """Test search that finds matches."""
    with tempfile.TemporaryDirectory() as temp_dir:
        # Create a test file with content that will match
        test_file = os.path.join(temp_dir, "test.txt")
        with open(test_file, "w") as f:
            f.write(
                "This is some test content.\nAnother line with test in it.\nNo match here."
            )

        request_data = {"workspace_id": 1, "query": "test", "folder_path": temp_dir}
        response = client.post("/api/search/content", json=request_data)
        assert response.status_code == 200
        results = response.json()
        assert len(results) == 1
        assert results[0]["name"] == "test.txt"
        assert len(results[0]["matches"]) == 2  # Two lines contain "test"


def test_search_content_case_insensitive(client):
    """Test that search is case insensitive."""
    with tempfile.TemporaryDirectory() as temp_dir:
        test_file = os.path.join(temp_dir, "test.txt")
        with open(test_file, "w") as f:
            f.write("This is some TEST content.")

        request_data = {
            "workspace_id": 1,
            "query": "test",  # lowercase
            "folder_path": temp_dir,
        }
        response = client.post("/api/search/content", json=request_data)
        assert response.status_code == 200
        results = response.json()
        assert len(results) == 1


def test_search_content_multiple_files(client):
    """Test search across multiple files."""
    with tempfile.TemporaryDirectory() as temp_dir:
        # Create multiple test files
        file1 = os.path.join(temp_dir, "file1.txt")
        file2 = os.path.join(temp_dir, "file2.txt")
        file3 = os.path.join(temp_dir, "file3.txt")

        with open(file1, "w") as f:
            f.write("This has the search term.")
        with open(file2, "w") as f:
            f.write("This also has the search term.")
        with open(file3, "w") as f:
            f.write("This does not have it.")

        request_data = {
            "workspace_id": 1,
            "query": "search term",
            "folder_path": temp_dir,
        }
        response = client.post("/api/search/content", json=request_data)
        assert response.status_code == 200
        results = response.json()
        assert len(results) == 2  # Two files match
        file_names = [r["name"] for r in results]
        assert "file1.txt" in file_names
        assert "file2.txt" in file_names
        assert "file3.txt" not in file_names


def test_search_content_skips_binary_files(client):
    """Test that binary files are skipped."""
    with tempfile.TemporaryDirectory() as temp_dir:
        # Create a binary file (containing null bytes)
        binary_file = os.path.join(temp_dir, "binary.dat")
        with open(binary_file, "wb") as f:
            f.write(b"\x00\x01\x02\x03text\x00\x00")

        request_data = {"workspace_id": 1, "query": "text", "folder_path": temp_dir}
        response = client.post("/api/search/content", json=request_data)
        assert response.status_code == 200
        # Binary file should be skipped, so no results
        assert response.json() == []


def test_search_content_skips_node_modules(client):
    """Test that node_modules directory is skipped."""
    with tempfile.TemporaryDirectory() as temp_dir:
        # Create node_modules directory with a file
        node_modules_dir = os.path.join(temp_dir, "node_modules")
        os.makedirs(node_modules_dir)
        test_file = os.path.join(node_modules_dir, "test.txt")
        with open(test_file, "w") as f:
            f.write("This should not be found because it's in node_modules.")

        request_data = {"workspace_id": 1, "query": "found", "folder_path": temp_dir}
        response = client.post("/api/search/content", json=request_data)
        assert response.status_code == 200
        # Should not find the file in node_modules
        assert response.json() == []


================================================================================
FILE: backend/tests/test_workspaces.py
================================================================================

import pytest
from unittest.mock import patch


def test_get_workspaces_empty(client):
    """Test getting workspaces when none exist."""
    response = client.get("/api/workspaces/")
    assert response.status_code == 200
    assert response.json() == []


def test_create_workspace(client):
    """Test creating a new workspace."""
    workspace_data = {"name": "Test Workspace", "folder_path": "/test/path"}
    response = client.post("/api/workspaces/", json=workspace_data)
    assert response.status_code == 200
    data = response.json()
    assert data["name"] == workspace_data["name"]
    assert data["folder_path"] == workspace_data["folder_path"]
    assert "id" in data


def test_get_workspace(client):
    """Test getting a specific workspace."""
    # First create a workspace
    workspace_data = {"name": "Test Workspace", "folder_path": "/test/path"}
    create_response = client.post("/api/workspaces/", json=workspace_data)
    workspace_id = create_response.json()["id"]

    # Then get it
    response = client.get(f"/api/workspaces/{workspace_id}")
    assert response.status_code == 200
    data = response.json()
    assert data["id"] == workspace_id
    assert data["name"] == workspace_data["name"]


def test_get_workspace_not_found(client):
    """Test getting a non-existent workspace."""
    response = client.get("/api/workspaces/999")
    assert response.status_code == 404
    assert response.json()["detail"] == "Workspace not found"


def test_update_workspace(client):
    """Test updating a workspace."""
    # Create workspace
    workspace_data = {"name": "Test Workspace", "folder_path": "/test/path"}
    create_response = client.post("/api/workspaces/", json=workspace_data)
    workspace_id = create_response.json()["id"]

    # Update it
    update_data = {"name": "Updated Workspace", "folder_path": "/updated/path"}
    response = client.put(f"/api/workspaces/{workspace_id}", json=update_data)
    assert response.status_code == 200
    data = response.json()
    assert data["name"] == update_data["name"]
    assert data["folder_path"] == update_data["folder_path"]


def test_delete_workspace(client):
    """Test deleting a workspace."""
    # Create workspace
    workspace_data = {"name": "Test Workspace", "path": "/test/path"}
    create_response = client.post("/api/workspaces/", json=workspace_data)
    workspace_id = create_response.json()["id"]

    # Delete it
    response = client.delete(f"/api/workspaces/{workspace_id}")
    assert response.status_code == 200
    assert response.json()["message"] == "Workspace deleted successfully"

    # Verify it's gone
    get_response = client.get(f"/api/workspaces/{workspace_id}")
    assert get_response.status_code == 404


def test_get_workspace_stats(client):
    """Test getting workspace statistics."""
    # Create workspace
    workspace_data = {"name": "Test Workspace", "path": "/test/path"}
    create_response = client.post("/api/workspaces/", json=workspace_data)
    workspace_id = create_response.json()["id"]

    # Get stats
    response = client.get(f"/api/workspaces/{workspace_id}/stats")
    assert response.status_code == 200
    data = response.json()
    # Stats structure depends on your WorkspaceStats model
    assert isinstance(data, dict)


================================================================================
FILE: build.yaml
================================================================================

# Electron Forge build configuration for packaging Recall into a Windows .exe

# This YAML file describes what files and folders are included in the packaged .exe
# and how the Electron Forge build process should behave.

# This file is intended for use with electron-forge and electron-builder (if needed).
# Place this file at the root of your project as 'build.yaml'.

# For electron-forge, most configuration is in package.json, but you can use this YAML
# for clarity or if you use electron-builder as well.

appId: com.raghu-vijaykumar.recall
productName: Recall
files:
  # Main Electron/Node/Frontend build output
  - dist/**/*
  # Backend Python executable (built by PyInstaller)
  - backend/dist/recall-backend.exe
  # Static assets (if not already in dist)
  - backend/app/static/**/*
  # Database files (if needed at runtime)
  - database/**/*
  # Any HTML components for frontend
  - frontend/components/**/*.html
  # Main process and preload scripts
  - main.js
  - preload.js
  # Any other required files
  - package.json
  - index.html
  - style.css
  - render.js

# Exclude development and build artifacts
exclude:
  - node_modules/
  - backend/.venv-build/
  - backend/__pycache__/
  - backend/build/
  - backend/dist/
  - .git/
  - scripts/
  - tests/
  - "**/*.map"

# Windows-specific options
win:
  target:
    - nsis
    - portable
  icon: build/icon.ico

# Extra metadata
extraMetadata:
  version: 1.0.0
  author: Raghu Vijaykumar
# If using electron-builder, you can reference this file in your package.json:
# "build": "build.yaml"


================================================================================
FILE: check_db.py
================================================================================

import sqlite3
import os
from pathlib import Path

# Database path configuration
DATABASE_PATH = os.getenv("DATABASE_PATH", str(Path.home() / ".recall" / "recall.db"))

print(f"Database path: {DATABASE_PATH}")

conn = sqlite3.connect(DATABASE_PATH)
cursor = conn.cursor()
cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
tables = cursor.fetchall()
print("Tables:", [t[0] for t in tables])

# Check if topic-related tables exist
topic_tables = ["topic_areas", "learning_paths", "learning_recommendations"]
for table in topic_tables:
    if table in [t[0] for t in tables]:
        cursor.execute(f"SELECT COUNT(*) FROM {table}")
        count = cursor.fetchone()[0]
        print(f"{table}: {count} records")
    else:
        print(f"{table}: TABLE NOT FOUND")

# Check for concepts and workspaces
cursor.execute("SELECT COUNT(*) FROM concepts")
concept_count = cursor.fetchone()[0]
print(f"concepts: {concept_count} records")

cursor.execute("SELECT COUNT(*) FROM workspaces")
workspace_count = cursor.fetchone()[0]
print(f"workspaces: {workspace_count} records")

if workspace_count > 0:
    cursor.execute("SELECT id, name FROM workspaces")
    workspaces = cursor.fetchall()
    print("Workspaces:")
    for ws in workspaces:
        print(f"  ID: {ws[0]}, Name: {ws[1]}")

conn.close()


================================================================================
FILE: electron/main.ts
================================================================================

import { app, BrowserWindow, ipcMain, nativeTheme, Menu, dialog, protocol } from "electron";
import path from "node:path";
import os from "os";
import { spawn } from "child_process";
import fs from "fs";
import fsp from "fs/promises"; // Import fs.promises for async file operations
import mime from "mime-types"; // Import mime-types for better MIME detection
import log from 'electron-log'; // Import electron-log
import http from "http";

// Configure electron-log
log.transports.file.level = 'info';
log.transports.file.maxSize = 5 * 1024 * 1024; // 5MB
log.transports.file.format = '[{y}-{m}-{d} {h}:{i}:{s}.{ms}] [{level}] {text}';
log.transports.file.fileName = 'main.log';

// Set the log file path to a known location in user data
log.transports.file.resolvePath = () => path.join(app.getPath('userData'), 'logs', 'main.log');

// Handle uncaught exceptions and unhandled rejections to prevent Windows error dialogs
process.on('uncaughtException', (error) => {
  log.error('Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  log.error('Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// Utility function to copy directories recursively
async function copyDirectory(source: string, destination: string): Promise<void> {
  await fsp.mkdir(destination, { recursive: true });
  const entries = await fsp.readdir(source, { withFileTypes: true });

  for (const entry of entries) {
    const srcPath = path.join(source, entry.name);
    const destPath = path.join(destination, entry.name);

    if (entry.isDirectory()) {
      await copyDirectory(srcPath, destPath);
    } else {
      await fsp.copyFile(srcPath, destPath);
    }
  }
}

// Global variables for backend management
let backendProcess: any = null;
let backendReady = false;

// Global variables for file streaming server
let fileServer: http.Server | null = null;
let fileServerPort: number = 0;

// Backend management functions
function setupDatabase() {
  const dbDir = path.join(os.homedir(), '.recall');
  const dbPath = path.join(dbDir, 'recall.db');

  // Create database directory if it doesn't exist
  if (!fs.existsSync(dbDir)) {
    fs.mkdirSync(dbDir, { recursive: true });
  }

  // Database will be created on the fly by the backend if it doesn't exist
  return dbPath;
}

function startBackend(port: number): Promise<number> {
  return new Promise(async (resolve, reject) => {
    const dbPath = setupDatabase();
    const backendExecutablePath = path.join(__dirname, '..', 'backend', 'dist', 'recall-backend.exe');

    log.info(`Attempting to start backend server on port ${port}...`);
    log.info('Database path:', dbPath);
    log.info('Backend executable:', backendExecutablePath);

    const env = {
      ...process.env,
      DATABASE_PATH: dbPath,
      PORT: port.toString(), // Pass the port to the backend
    };

    backendProcess = spawn(backendExecutablePath, [], {
      cwd: path.join(__dirname, '..', 'backend'),
      env: env,
      stdio: ['pipe', 'pipe', 'pipe']
    });

    const checkReady = (output: string) => {
      if (output.includes('Application startup complete') && !backendReady) {
        backendReady = true;
        log.info(`Backend server is ready on port ${port}!`);
        resolve(port);
      }
    };

    backendProcess.stdout.on('data', (data: Buffer) => {
      const output = data.toString();
      log.info('Backend stdout:', output);
      checkReady(output);
    });

    backendProcess.stderr.on('data', (data: Buffer) => {
      const output = data.toString();
      log.error('Backend stderr:', output);
      if (output.includes('error while attempting to bind on address')) {
        reject(new Error('Port in use'));
      }
      checkReady(output);
    });

    backendProcess.on('close', (code: number) => {
      log.info(`Backend process exited with code ${code}`);
      backendReady = false;
    });

    backendProcess.on('error', (error: Error) => {
      log.error('Failed to start backend:', error);
      reject(error);
    });

    setTimeout(() => {
      if (!backendReady) {
        log.error('Backend startup timeout');
        reject(new Error('Backend startup timeout'));
      }
    }, 30000);
  });
}

async function findAvailablePortAndStartBackend(startPort: number, maxRetries: number): Promise<number> {
  let currentPort = startPort;
  for (let i = 0; i < maxRetries; i++) {
    try {
      await startBackend(currentPort);
      return currentPort;
    } catch (error: any) {
      if (error.message === 'Port in use') {
        log.warn(`Port ${currentPort} is in use, trying next port...`);
        currentPort++;
      } else {
        throw error; // Re-throw other errors
      }
    }
  }
  throw new Error(`Failed to start backend after ${maxRetries} retries. All ports from ${startPort} to ${currentPort - 1} are in use.`);
}

function stopBackend(): Promise<void> {
  return new Promise((resolve) => {
    if (backendProcess) {
      log.info('Stopping backend server...');

      // On Windows, SIGTERM may not work reliably, so we use a more aggressive approach
      if (process.platform === 'win32') {
        // For Windows, try SIGKILL immediately since SIGTERM often doesn't work
        backendProcess.kill('SIGKILL');
        setTimeout(() => {
          resolve();
        }, 1000); // Give it 1 second to terminate
      } else {
        // For Unix-like systems, try SIGTERM first, then SIGKILL if needed
        backendProcess.kill('SIGTERM');

        const timeout = setTimeout(() => {
          if (backendProcess && !backendProcess.killed) {
            backendProcess.kill('SIGKILL');
          }
          resolve();
        }, 3000); // Reduced timeout since we have lifespan handler now

        backendProcess.on('close', () => {
          clearTimeout(timeout);
          resolve();
        });
      }
    } else {
      resolve();
    }
  });
}

// File streaming server functions
function startFileServer(workspacePath: string): Promise<number> {
  return new Promise((resolve, reject) => {
    // Find an available port starting from 3000
    let port = 3000;
    const maxPort = 3100;

    const tryPort = (currentPort: number) => {
      if (currentPort > maxPort) {
        reject(new Error('No available ports for file server'));
        return;
      }

      const server = http.createServer(async (req, res) => {
        if (!req.url) {
          res.writeHead(400);
          res.end('Bad Request');
          return;
        }

        try {
          // Decode URL and construct file path
          const decodedPath = decodeURIComponent(req.url);
          const filePath = path.join(workspacePath, decodedPath);

          // Security check: ensure the file is within the workspace
          const resolvedPath = path.resolve(filePath);
          const resolvedWorkspace = path.resolve(workspacePath);

          if (!resolvedPath.startsWith(resolvedWorkspace)) {
            res.writeHead(403);
            res.end('Forbidden');
            return;
          }

          // Check if file exists
          const stats = await fsp.stat(filePath);
          if (!stats.isFile()) {
            res.writeHead(404);
            res.end('Not Found');
            return;
          }

          // Set appropriate headers with custom MIME type handling
          let mimeType = mime.lookup(filePath) || 'application/octet-stream';

          // Handle MKV files specifically (mime-types library may not recognize them)
          if (filePath.toLowerCase().endsWith('.mkv')) {
            mimeType = 'video/x-matroska';
          }

          res.writeHead(200, {
            'Content-Type': mimeType,
            'Content-Length': stats.size,
            'Accept-Ranges': 'bytes',
            'Cache-Control': 'no-cache'
          });

          // Stream the file
          const fileStream = fs.createReadStream(filePath);
          fileStream.pipe(res);

          fileStream.on('error', (error) => {
            log.error('File streaming error:', error);
            if (!res.headersSent) {
              res.writeHead(500);
              res.end('Internal Server Error');
            }
          });

        } catch (error) {
          log.error('File server error:', error);
          if (!res.headersSent) {
            res.writeHead(404);
            res.end('Not Found');
          }
        }
      });

      server.listen(currentPort, '127.0.0.1', () => {
        log.info(`File streaming server started on port ${currentPort}`);
        fileServer = server;
        fileServerPort = currentPort;
        resolve(currentPort);
      });

      server.on('error', (err: any) => {
        if (err.code === 'EADDRINUSE') {
          tryPort(currentPort + 1);
        } else {
          reject(err);
        }
      });
    };

    tryPort(port);
  });
}

function stopFileServer(): Promise<void> {
  return new Promise((resolve) => {
    if (fileServer) {
      log.info('Stopping file streaming server...');
      fileServer.close(() => {
        fileServer = null;
        fileServerPort = 0;
        resolve();
      });
    } else {
      resolve();
    }
  });
}

let currentWorkspacePath: string | null = null;
let fileWatcher: fs.FSWatcher | null = null;

const createWindow = () => {
  const win = new BrowserWindow({
    width: 1000,
    height: 700,
    webPreferences: {
      preload: path.join(__dirname, "preload.js"),
      // webSecurity: false, // Disable web security for development - Re-enable for production
      nodeIntegration: false,
      contextIsolation: true,
    },
  });

  if (app.isPackaged || !process.env.VITE_DEV_SERVER_URL) {
    win.loadURL(`app://./index.html`);
  } else {
    win.loadURL(process.env.VITE_DEV_SERVER_URL);
    win.webContents.openDevTools();
  }

  // Create application menu
  createMenu(win);

  // Listen for workspace changes to set up file watching
  ipcMain.on('workspace-changed', (event, workspacePath: string) => {
    setupFileWatcher(workspacePath);
  });

  return win;
};

async function setupFileWatcher(workspacePath: string) {
  // Clean up existing watcher
  if (fileWatcher) {
    fileWatcher.close();
    fileWatcher = null;
  }

  // Stop existing file server
  await stopFileServer();

  currentWorkspacePath = workspacePath;

  try {
    // Start file streaming server for the workspace
    await startFileServer(workspacePath);

    fileWatcher = fs.watch(workspacePath, { recursive: true }, (eventType, filename) => {
      if (filename) {
        // Send file system change event to renderer
        const windows = BrowserWindow.getAllWindows();
        windows.forEach(win => {
          win.webContents.send('file-system-changed', {
            eventType,
            filename,
            fullPath: path.join(workspacePath, filename)
          });
        });
      }
    });

    log.info(`File watcher and streaming server set up for workspace: ${workspacePath}`);
  } catch (error) {
    log.error(`Failed to set up file watcher/server for ${workspacePath}:`, error);
  }
}

const createMenu = (win: any) => {
  const template: any[] = [
    {
      label: 'File',
      submenu: [
        {
          label: 'Save',
          accelerator: 'CmdOrCtrl+S',
          click: () => {
            win.webContents.send('menu-save-file');
          }
        },
        { type: 'separator' },
        {
          label: 'Open Folder',
          accelerator: 'CmdOrCtrl+O',
          click: () => {
            openFolderDialog();
          }
        },
        { type: 'separator' },
        {
          label: 'Exit',
          accelerator: process.platform === 'darwin' ? 'Cmd+Q' : 'Ctrl+Q',
          click: () => {
            app.quit();
          }
        }
      ]
    },
    {
      label: 'Edit',
      submenu: [
        { role: 'undo' },
        { role: 'redo' },
        { type: 'separator' },
        { role: 'cut' },
        { role: 'copy' },
        { role: 'paste' },
        { role: 'selectall' }
      ]
    },
    {
      label: 'View',
      submenu: [
        {
          label: 'Knowledge Graph',
          click: () => {
            win.webContents.send('menu-show-knowledge-graph');
          }
        },
        {
          label: 'Quiz',
          click: () => {
            win.webContents.send('menu-show-quiz');
          }
        },
        {
          label: 'Progress',
          click: () => {
            win.webContents.send('menu-show-progress');
          }
        },
        { type: 'separator' },
        { role: 'reload' },
        { role: 'forcereload' },
        { role: 'toggledevtools' },
        { type: 'separator' },
        { role: 'resetzoom' },
        { role: 'zoomin' },
        { role: 'zoomout' },
        { type: 'separator' },
        { role: 'togglefullscreen' }
      ]
    },
    {
      label: 'Settings',
      submenu: [
        {
          label: 'Developer Settings',
          accelerator: 'CmdOrCtrl+,',
          click: () => {
            win.webContents.send('menu-show-settings');
          }
        },
        { type: 'separator' },
        {
          label: 'Toggle Theme',
          accelerator: 'CmdOrCtrl+T',
          click: () => {
            win.webContents.send('menu-toggle-theme');
          }
        }
      ]
    },
    {
      label: 'Help',
      submenu: [
        {
          label: 'About Recall',
          click: () => {
            dialog.showMessageBox(win, {
              type: 'info',
              title: 'About Recall',
              message: 'Recall - Study App',
              detail: 'A VSCode-like study application for managing workspaces and files.'
            });
          }
        }
      ]
    }
  ];

  // macOS specific menu adjustments
  if (process.platform === 'darwin') {
    template.unshift({
      label: app.getName(),
      submenu: [
        { role: 'about' },
        { type: 'separator' },
        { role: 'services', submenu: [] },
        { type: 'separator' },
        { role: 'hide' },
        { role: 'hideothers' },
        { role: 'unhide' },
        { type: 'separator' },
        { role: 'quit' }
      ]
    });

    // Window menu for macOS
    template.splice(5, 0, {
      label: 'Window',
      submenu: [
        { role: 'minimize' },
        { role: 'close' }
      ]
    });
  }

  const menu = Menu.buildFromTemplate(template);
  Menu.setApplicationMenu(menu);
};

ipcMain.handle("dark-mode:toggle", () => {
  if (nativeTheme.shouldUseDarkColors) {
    nativeTheme.themeSource = "light";
  } else {
    nativeTheme.themeSource = "dark";
  }
  return nativeTheme.shouldUseDarkColors;
});

ipcMain.handle("dark-mode:system", () => {
  nativeTheme.themeSource = "system";
});

ipcMain.handle("dark-mode:get", () => {
  return nativeTheme.shouldUseDarkColors;
});

app.whenReady().then(async () => {
  // Register a custom protocol to serve frontend files with correct MIME types
  protocol.handle('app', async (request) => {
    let filePath = path.join(__dirname, '..', 'frontend', request.url.slice('app://./'.length));
    if (request.url === 'app://./index.html') {
      filePath = path.join(__dirname, '..', 'frontend', 'index.html');
    }

    try {
      const fileContent = await fsp.readFile(filePath);
      const mimeType = mime.lookup(filePath) || 'application/octet-stream';
      // Create a new ArrayBuffer from the Buffer to avoid SharedArrayBuffer issues
      const arrayBuffer = new Uint8Array(fileContent).buffer;
      return new Response(arrayBuffer, {
        headers: {
          'Content-Type': mimeType,
        },
      });
    } catch (error) {
      log.error(`Failed to load file: ${filePath}`, error);
      return new Response('File not found', { status: 404 });
    }
  });

  ipcMain.handle("ping", () => "pong");

ipcMain.handle("read-html-file", async (event, componentPath: string) => {
    try {
      // Resolve the path relative to the frontend dist directory
      const fullPath = path.join(__dirname, '..', 'dist', 'frontend', 'components', componentPath);
      const fileContent = await fsp.readFile(fullPath, 'utf8');
      return fileContent;
    } catch (error) {
      log.error(`Failed to read HTML file: ${componentPath}`, error);
      throw new Error(`Failed to read HTML file: ${componentPath}`);
    }
  });

ipcMain.handle("get-folder-tree", async (event, folderPath: string) => {
    try {
      const buildTree = async (dirPath: string, relativePath: string = ""): Promise<any> => {
        const items: any[] = [];

        try {
          const entries = await fsp.readdir(dirPath, { withFileTypes: true });

          for (const entry of entries) {
            // Skip hidden files/directories and common unwanted ones
            if (entry.name.startsWith('.') ||
                entry.name === 'node_modules' ||
                entry.name === '__pycache__' ||
                entry.name === '.git') {
              continue;
            }

            const fullPath = path.join(dirPath, entry.name);
            const itemRelativePath = relativePath ? `${relativePath}/${entry.name}` : entry.name;

            if (entry.isDirectory()) {
              const children = await buildTree(fullPath, itemRelativePath);
              items.push({
                name: entry.name,
                path: itemRelativePath,
                type: 'directory',
                children: children
              });
            } else {
              items.push({
                name: entry.name,
                path: itemRelativePath,
                type: 'file'
              });
            }
          }
        } catch (error) {
          log.error(`Error reading directory ${dirPath}:`, error);
        }

        // Sort: directories first, then files, alphabetically
        return items.sort((a, b) => {
          if (a.type !== b.type) {
            return a.type === 'directory' ? -1 : 1;
          }
          return a.name.localeCompare(b.name);
        });
      };

      return await buildTree(folderPath);
    } catch (error) {
      log.error(`Failed to get folder tree for ${folderPath}:`, error);
      throw new Error(`Failed to get folder tree: ${error}`);
    }
  });

ipcMain.handle("read-file-content", async (event, filePath: string) => {
    try {
      const content = await fsp.readFile(filePath, 'utf-8');
      return content;
    } catch (error) {
      log.error(`Failed to read file ${filePath}:`, error);
      throw new Error(`Failed to read file: ${error}`);
    }
  });

ipcMain.handle("read-file-base64", async (event, filePath: string) => {
    try {
      const buffer = await fsp.readFile(filePath);
      const base64 = buffer.toString('base64');
      const mimeType = mime.lookup(filePath) || 'application/octet-stream';
      return { base64, mimeType };
    } catch (error) {
      log.error(`Failed to read file as base64 ${filePath}:`, error);
      throw new Error(`Failed to read file: ${error}`);
    }
  });

ipcMain.handle("get-file-stats", async (event, filePath: string) => {
    try {
      const stats = await fsp.stat(filePath);
      return {
        size: stats.size,
        mtime: stats.mtime,
        ctime: stats.ctime,
        isDirectory: stats.isDirectory(),
        isFile: stats.isFile()
      };
    } catch (error) {
      log.error(`Failed to get stats for file ${filePath}:`, error);
      throw new Error(`Failed to get file stats: ${error}`);
    }
  });

ipcMain.handle("get-file-server-port", () => {
    return fileServerPort;
  });

ipcMain.handle("file-operations:create", async (event, { basePath, type, name }: { basePath: string; type: 'file' | 'directory'; name: string }) => {
    try {
      const fullPath = path.join(basePath, name);

      if (type === 'file') {
        await fsp.writeFile(fullPath, '');
      } else {
        await fsp.mkdir(fullPath, { recursive: true });
      }

      log.info(`Created ${type}: ${fullPath}`);
      return { success: true, path: fullPath };
    } catch (error) {
      log.error(`Failed to create ${type} ${basePath}/${name}:`, error);
      throw new Error(`Failed to create ${type}: ${error}`);
    }
  });

ipcMain.handle("file-operations:rename", async (event, { oldPath, newName }: { oldPath: string; newName: string }) => {
    try {
      const newPath = path.join(path.dirname(oldPath), newName);
      await fsp.rename(oldPath, newPath);

      log.info(`Renamed ${oldPath} to ${newPath}`);
      return { success: true, oldPath, newPath };
    } catch (error) {
      log.error(`Failed to rename ${oldPath} to ${newName}:`, error);
      throw new Error(`Failed to rename: ${error}`);
    }
  });

ipcMain.handle("file-operations:move", async (event, { sourcePath, destinationPath }: { sourcePath: string; destinationPath: string }) => {
    try {
      const destPath = path.join(destinationPath, path.basename(sourcePath));
      await fsp.rename(sourcePath, destPath);

      log.info(`Moved ${sourcePath} to ${destPath}`);
      return { success: true, sourcePath, destinationPath: destPath };
    } catch (error) {
      log.error(`Failed to move ${sourcePath} to ${destinationPath}:`, error);
      throw new Error(`Failed to move: ${error}`);
    }
  });

ipcMain.handle("file-operations:copy", async (event, { sourcePath, destinationPath }: { sourcePath: string; destinationPath: string }) => {
    try {
      const destPath = path.join(destinationPath, path.basename(sourcePath));

      const stats = await fsp.stat(sourcePath);
      if (stats.isDirectory()) {
        await copyDirectory(sourcePath, destPath);
      } else {
        await fsp.copyFile(sourcePath, destPath);
      }

      log.info(`Copied ${sourcePath} to ${destPath}`);
      return { success: true, sourcePath, destinationPath: destPath };
    } catch (error) {
      log.error(`Failed to copy ${sourcePath} to ${destinationPath}:`, error);
      throw new Error(`Failed to copy: ${error}`);
    }
  });

ipcMain.handle("file-operations:delete", async (event, { targetPath }: { targetPath: string }) => {
    try {
      const stats = await fsp.stat(targetPath);
      if (stats.isDirectory()) {
        await fsp.rm(targetPath, { recursive: true, force: true });
      } else {
        await fsp.unlink(targetPath);
      }

      log.info(`Deleted ${targetPath}`);
      return { success: true, path: targetPath };
    } catch (error) {
      log.error(`Failed to delete ${targetPath}:`, error);
      throw new Error(`Failed to delete: ${error}`);
    }
  });

  try {
    // Start the backend server
    log.info('Initializing Recall application...');
    const backendPort = await findAvailablePortAndStartBackend(8000, 3); // Try ports 8000, 8001, 8002

    // Create the main window after backend is ready
    createWindow();

    app.on("activate", () => {
      if (BrowserWindow.getAllWindows().length === 0) createWindow();
    });

  } catch (error) {
    log.error('Failed to start backend:', error);
    app.quit();
  }
});

app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("before-quit", async (event) => {
  event.preventDefault();
  //await stopBackend();
  app.quit();
});

// Handle app quit on macOS
app.on("activate", () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Folder dialog and workspace creation
async function openFolderDialog() {
  const windows = BrowserWindow.getAllWindows();
  if (windows.length === 0) return;

  const win = windows[0];

  try {
    const result = await dialog.showOpenDialog(win, {
      properties: ['openDirectory'],
      title: 'Select Folder to Open as Workspace'
    }) as any;

    if (!result.canceled && result.filePaths.length > 0) {
      const folderPath = result.filePaths[0];
      const folderName = path.basename(folderPath);

      // Send the folder path to the renderer process
      win.webContents.send('folder-selected', {
        path: folderPath,
        name: folderName
      });
    }
  } catch (err) {
    log.error('Error opening folder dialog:', err);
  }
}


================================================================================
FILE: electron/preload.d.ts
================================================================================

import { IpcRenderer } from 'electron';

declare global {
  interface Window {
    versions: {
      node: () => string;
      chrome: () => string;
      electron: () => string;
      ping: () => Promise<string>;
    };
    darkMode: {
      toggle: () => Promise<boolean>;
      system: () => Promise<void>;
      get: () => Promise<boolean>;
    };
    menuEvents: {
      on: (channel: string, callback: (...args: any[]) => void) => void;
      off: (channel: string, callback: (...args: any[]) => void) => void;
    };
    electronAPI: {
      readHtmlFile: (filePath: string) => Promise<string>;
      getFolderTree: (folderPath: string) => Promise<any[]>;
    readFileContent: (filePath: string) => Promise<string>;
    readFileBase64: (filePath: string) => Promise<{ base64: string; mimeType: string }>;

      // File operations
      createFile: (basePath: string, name: string) => Promise<{ success: boolean; path: string }>;
      createDirectory: (basePath: string, name: string) => Promise<{ success: boolean; path: string }>;
      renameFile: (oldPath: string, newName: string) => Promise<{ success: boolean; oldPath: string; newPath: string }>;
      moveFile: (sourcePath: string, destinationPath: string) => Promise<{ success: boolean; sourcePath: string; destinationPath: string }>;
      copyFile: (sourcePath: string, destinationPath: string) => Promise<{ success: boolean; sourcePath: string; destinationPath: string }>;
      deleteFile: (targetPath: string) => Promise<{ success: boolean; path: string }>;

      // File system watching
      onFileSystemChange: (callback: (event: any, data: any) => void) => void;
      offFileSystemChange: (callback: (event: any, data: any) => void) => void;

      // Workspace management
      notifyWorkspaceChanged: (workspacePath: string) => void;
    };
  }
}


================================================================================
FILE: electron/preload.ts
================================================================================

const { contextBridge, ipcRenderer } = require("electron");

contextBridge.exposeInMainWorld("versions", {
  node: () => process.versions.node,
  chrome: () => process.versions.chrome,
  electron: () => process.versions.electron,
  ping: () => ipcRenderer.invoke("ping"),
});

contextBridge.exposeInMainWorld("darkMode", {
  toggle: () => ipcRenderer.invoke("dark-mode:toggle"),
  system: () => ipcRenderer.invoke("dark-mode:system"),
  get: () => ipcRenderer.invoke("dark-mode:get"),
});

contextBridge.exposeInMainWorld("menuEvents", {
  on: (channel: string, callback: (...args: any[]) => void) => {
    const validChannels = [
      'menu-new-file',
      'menu-save-file',
      'menu-create-workspace',
      'menu-open-workspace',
      'menu-refresh-files',
      'menu-show-workspaces',
      'menu-show-files',
      'menu-show-knowledge-graph',
      'menu-show-quiz',
      'menu-show-progress',
      'menu-toggle-theme',
      'folder-selected'
    ];

    if (validChannels.includes(channel)) {
      ipcRenderer.on(channel, (_: any, ...args: any[]) => callback(...args));
    }
  },
  off: (channel: string, callback: (...args: any[]) => void) => {
    ipcRenderer.off(channel, callback);
  }
});

contextBridge.exposeInMainWorld("electronAPI", {
  readHtmlFile: (filePath: string) => ipcRenderer.invoke("read-html-file", filePath),
  getFolderTree: (folderPath: string) => ipcRenderer.invoke("get-folder-tree", folderPath),
  readFileContent: (filePath: string) => ipcRenderer.invoke("read-file-content", filePath),
  readFileBase64: (filePath: string) => ipcRenderer.invoke("read-file-base64", filePath),
  getFileStats: (filePath: string) => ipcRenderer.invoke("get-file-stats", filePath),
  getFileServerPort: () => ipcRenderer.invoke("get-file-server-port"),

  // File operations
  createFile: (basePath: string, name: string) => ipcRenderer.invoke("file-operations:create", { basePath, type: 'file', name }),
  createDirectory: (basePath: string, name: string) => ipcRenderer.invoke("file-operations:create", { basePath, type: 'directory', name }),
  renameFile: (oldPath: string, newName: string) => ipcRenderer.invoke("file-operations:rename", { oldPath, newName }),
  moveFile: (sourcePath: string, destinationPath: string) => ipcRenderer.invoke("file-operations:move", { sourcePath, destinationPath }),
  copyFile: (sourcePath: string, destinationPath: string) => ipcRenderer.invoke("file-operations:copy", { sourcePath, destinationPath }),
  deleteFile: (targetPath: string) => ipcRenderer.invoke("file-operations:delete", { targetPath }),

  // File system watching
  onFileSystemChange: (callback: (event: any, data: any) => void) => {
    ipcRenderer.on('file-system-changed', callback);
  },
  offFileSystemChange: (callback: (event: any, data: any) => void) => {
    ipcRenderer.off('file-system-changed', callback);
  },

  // Workspace management
  notifyWorkspaceChanged: (workspacePath: string) => ipcRenderer.send('workspace-changed', workspacePath),
});


================================================================================
FILE: forge.config.js
================================================================================

const { FusesPlugin } = require("@electron-forge/plugin-fuses");
const { FuseV1Options, FuseVersion } = require("@electron/fuses");

module.exports = {
  build: {
    files: ["dist/electron/**/*", "dist/frontend/**/*"],
  },
  packagerConfig: {
    asar: false,
    ignore: [
      /\.ts$/,
      /src$/,
      /tsconfig\.json$/,
      /\.git$/,
      /\.vscode$/,
      /\.log$/,
      /backend\//,
    ],
    extraResource: ["backend/dist/recall-backend.exe"],
  },
  rebuildConfig: {},
  makers: [
    {
      name: "@electron-forge/maker-squirrel",
      config: {},
    },
    {
      name: "@electron-forge/maker-zip",
      platforms: ["darwin"],
    },
    {
      name: "@electron-forge/maker-deb",
      config: {},
    },
    {
      name: "@electron-forge/maker-rpm",
      config: {},
    },
  ],
  plugins: [
    // Fuses are used to enable/disable various Electron functionality
    // at package time, before code signing the application
    new FusesPlugin({
      version: FuseVersion.V1,
      [FuseV1Options.RunAsNode]: false,
      [FuseV1Options.EnableCookieEncryption]: true,
      [FuseV1Options.EnableNodeOptionsEnvironmentVariable]: false,
      [FuseV1Options.EnableNodeCliInspectArguments]: false,
      [FuseV1Options.EnableEmbeddedAsarIntegrityValidation]: true,
      [FuseV1Options.OnlyLoadAppFromAsar]: true,
    }),
  ],
};


================================================================================
FILE: frontend/components/chat/Chat.tsx
================================================================================

import React, { useState, useRef, useEffect } from 'react';
import { API_BASE } from '../../src/core/api';
import RichMarkdownRenderer from '../../src/shared/RichMarkdownRenderer';

interface Message {
  id: string;
  content: string;
  role: 'user' | 'assistant';
  timestamp: Date;
}

interface ChatProps {
  currentWorkspaceId: number | null;
}

const Chat: React.FC<ChatProps> = ({ currentWorkspaceId }) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const sendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputMessage,
      role: 'user',
      timestamp: new Date(),
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      // TODO: Implement actual chat API call
      // For now, simulate a response
      setTimeout(() => {
        const assistantMessage: Message = {
          id: (Date.now() + 1).toString(),
          content: `I received your message: "${userMessage.content}". This is a placeholder response. Chat functionality will be implemented soon.`,
          role: 'assistant',
          timestamp: new Date(),
        };
        setMessages(prev => [...prev, assistantMessage]);
        setIsLoading(false);
      }, 1000);
    } catch (error) {
      console.error('Failed to send message:', error);
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  return (
    <div id="chat-tab" className="tab-content active">
      <div className="chat-header">
        <h2>AI Chat Assistant</h2>
      </div>
      <div className="chat-container">
        <div className="chat-messages">
          {messages.length === 0 ? (
            <div className="chat-placeholder">
              <div className="placeholder-content">
                <h3>👋 Welcome to AI Chat!</h3>
                <p>Ask me anything about your code, get help with debugging, or discuss your projects.</p>
                <div className="placeholder-suggestions">
                  <div className="suggestion">💡 Try: "Explain this code snippet"</div>
                  <div className="suggestion">🔧 Try: "Help me debug this error"</div>
                  <div className="suggestion">📚 Try: "What are best practices for React?"</div>
                </div>
              </div>
            </div>
          ) : (
            messages.map((message) => (
              <div
                key={message.id}
                className={`message ${message.role === 'user' ? 'user-message' : 'assistant-message'}`}
              >
                <div className="message-content">
                  <RichMarkdownRenderer content={message.content} />
                </div>
                <div className="message-timestamp">
                  {message.timestamp.toLocaleTimeString()}
                </div>
              </div>
            ))
          )}
          {isLoading && (
            <div className="message assistant-message loading">
              <div className="message-content">
                <div className="typing-indicator">
                  <span></span>
                  <span></span>
                  <span></span>
                </div>
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>

        <div className="chat-input-container">
          <div className="chat-input-wrapper">
            <textarea
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Type your message here..."
              className="chat-input"
              rows={1}
              disabled={isLoading}
            />
            <button
              onClick={sendMessage}
              disabled={!inputMessage.trim() || isLoading}
              className="chat-send-btn"
            >
              {isLoading ? '⏳' : '📤'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Chat;


================================================================================
FILE: frontend/components/file-explorer/FileExplorer.tsx
================================================================================

import React, { useState } from 'react';
import {
  useFileExplorerState,
  useWorkspaceLoading,
  useFolderTreeLoading,
  useLocalStoragePersistence,
  useMonacoEditor,
  useFileSystemWatcher,
  useWorkspaceNotification,
} from './hooks/fileExplorerHooks.js';
import { useFileOperations } from './hooks/useFileOperations.js';
import { useContextMenu } from './hooks/useContextMenu.js';
import { useDragAndDrop } from './hooks/useDragAndDrop.js';
import { useFileManagement } from './hooks/useFileManagement.js';
import { filterTreeBySearch } from './utils/fileExplorerUtils.js';
import FileTree from './components/FileTree';
import FileSearch from './components/FileSearch';
import EditorTabs from './components/EditorTabs';
import FileOperationModals from './components/FileOperationModals';
import FileContextMenu from './components/FileContextMenu';
import MarkdownEditor from './components/MarkdownEditor';
import NonTextViewer from './components/NonTextViewer.js';
import Progress from '../progress/Progress';
import Quiz from '../quiz/Quiz';
import { KnowledgeGraph } from '../knowledge-graph/KnowledgeGraph';
import Chat from '../chat/Chat';
import { useTheme } from '../../src/core/ThemeContext';

interface FileExplorerProps {
  currentWorkspaceId: number | null;
}

const FileExplorer: React.FC<FileExplorerProps> = ({ currentWorkspaceId }) => {
  const { isDark } = useTheme();
  const {
    workspace,
    setWorkspace,
    folderTree,
    setFolderTree,
    expandedDirs,
    setExpandedDirs,
    openFiles,
    setOpenFiles,
    recentlyOpened,
    setRecentlyOpened,
    activeFileId,
    setActiveFileId,
    searchQuery,
    setSearchQuery,
    searchResults,
    setSearchResults,
    isSearching,
    setIsSearching,
    activeView,
    setActiveView,
    monacoEditorRef,
    contextMenu,
    setContextMenu,
    showRenameModal,
    setShowRenameModal,
    showMoveModal,
    setShowMoveModal,
    showCopyModal,
    setShowCopyModal,
    showDeleteConfirm,
    setShowDeleteConfirm,
    selectedItem,
    setSelectedItem,
    newName,
    setNewName,
    copiedItemPath,
    setCopiedItemPath,
    draggedItem,
    setDraggedItem,
    createBasePath,
    setCreateBasePath,
  } = useFileExplorerState();


  const [showCreateModal, setShowCreateModal] = useState(false);
  const [fileName, setFileName] = useState('');

  // Custom hooks
  useWorkspaceLoading(currentWorkspaceId, setWorkspace);
  useFolderTreeLoading(workspace, setFolderTree);
  useLocalStoragePersistence(setRecentlyOpened, setOpenFiles, setActiveFileId, openFiles);
  useMonacoEditor(monacoEditorRef, activeFileId, openFiles);
  useFileSystemWatcher(workspace, () => loadFolderTree());
  useWorkspaceNotification(workspace);

  const loadFolderTree = async () => {
    if (!workspace?.folder_path) {
      console.log('No folder_path in workspace:', workspace);
      return;
    }

    console.log('Loading folder tree for:', workspace.folder_path);
    try {
      const tree = await (window as any).electronAPI.getFolderTree(workspace.folder_path);
      console.log('Folder tree loaded:', tree);
      setFolderTree(tree);
    } catch (error) {
      console.error('Failed to load folder tree:', error);
    }
  };

  const toggleDirectory = (path: string) => {
    setExpandedDirs(prev => {
      const newSet = new Set(prev);
      if (newSet.has(path)) {
        newSet.delete(path);
      } else {
        newSet.add(path);
      }
      return newSet;
    });
  };

  // Use hooks for file operations, context menu, drag and drop, and file management
  const { handleCreateFile, handleCreateDirectory, handleRename, handleMove, handleCopy, handleDelete } = useFileOperations(
    workspace,
    selectedItem,
    newName,
    fileName,
    createBasePath,
    setShowCreateModal,
    setShowRenameModal,
    setShowMoveModal,
    setShowCopyModal,
    setShowDeleteConfirm,
    setFileName,
    setNewName,
    setSelectedItem,
    setCreateBasePath,
    loadFolderTree
  );

  const { handleContextMenu, handleContextMenuAction } = useContextMenu(
    contextMenu,
    workspace,
    copiedItemPath,
    setContextMenu,
    setSelectedItem,
    setCreateBasePath,
    setShowCreateModal,
    setNewName,
    setShowRenameModal,
    setShowMoveModal,
    setCopiedItemPath,
    setShowDeleteConfirm,
    handleCreateDirectory,
    loadFolderTree
  );

  const { handleDragStart, handleDragOver, handleDrop } = useDragAndDrop(
    draggedItem,
    workspace,
    setDraggedItem,
    loadFolderTree
  );

  const { openFile, closeTab, openSearchResult } = useFileManagement(
    workspace,
    currentWorkspaceId,
    openFiles,
    activeFileId,
    monacoEditorRef,
    setOpenFiles,
    setActiveFileId
  );

  // Check if active file is a markdown file
  const activeFile = openFiles.find(file => file.id === activeFileId);
  const isMarkdownFile = activeFile && (activeFile.name.endsWith('.md') || activeFile.name.endsWith('.markdown'));
  const isNonTextFile = activeFile && (/\.(jpg|jpeg|png|gif|bmp|webp|svg|pdf|mp4|avi|mov|mkv|webm|flv|wmv|mpg|mpeg|3gp|m4v|mp3|wav|ogg|flac|aac|m4a|wma|aiff|au)$/i.test(activeFile.name));







  return (
    <div id="files-tab" className="tab-content active">
      <div className="files-container">
        <div className="sidebar">
          <div className="icon-bar">
            <button
              className={`icon-btn ${activeView === 'explorer' ? 'active' : ''}`}
              onClick={() => setActiveView('explorer')}
              title="File Explorer"
            >
              📁
            </button>
            <button
              className={`icon-btn ${activeView === 'search' ? 'active' : ''}`}
              onClick={() => setActiveView('search')}
              title="Search"
            >
              🔍
            </button>
            <button
              className={`icon-btn ${activeView === 'progress' ? 'active' : ''}`}
              onClick={() => setActiveView('progress')}
              title="Progress"
            >
              📊
            </button>
            <button
              className={`icon-btn ${activeView === 'knowledge-graph' ? 'active' : ''}`}
              onClick={() => setActiveView('knowledge-graph')}
              title="Knowledge Graph"
            >
              🧠
            </button>
            <button
              className={`icon-btn ${activeView === 'quiz' ? 'active' : ''}`}
              onClick={() => setActiveView('quiz')}
              title="Quiz"
            >
              ❓
            </button>
            <button
              className={`icon-btn ${activeView === 'chat' ? 'active' : ''}`}
              onClick={() => setActiveView('chat')}
              title="AI Chat"
            >
              💬
            </button>
          </div>
          <div className="sidebar-header">
            <h3>
              {activeView === 'explorer' ? 'EXPLORER' :
               activeView === 'search' ? 'SEARCH' :
               activeView === 'progress' ? 'PROGRESS' :
               activeView === 'knowledge-graph' ? 'KNOWLEDGE GRAPH' :
               activeView === 'quiz' ? 'QUIZ' :
               activeView === 'chat' ? 'AI CHAT' : 'EXPLORER'}
            </h3>
            <div className="sidebar-actions">
              {activeView === 'explorer' && (
                <button
                  className="sidebar-btn"
                  title="Refresh folder tree"
                  onClick={() => loadFolderTree()}
                >
                  🔄
                </button>
              )}
            </div>
          </div>
          {activeView === 'explorer' && (
            <>
              <div className="search-container">
                <input
                  type="text"
                  placeholder="Search files..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="search-input"
                />
                {searchQuery && (
                  <button
                    className="clear-search-btn"
                    onClick={() => setSearchQuery('')}
                    title="Clear search"
                  >
                    ×
                  </button>
                )}
              </div>
              <FileTree
                folderTree={folderTree}
                expandedDirs={expandedDirs}
                openFiles={openFiles}
                draggedItem={draggedItem}
                searchQuery={searchQuery}
                toggleDirectory={toggleDirectory}
                openFile={openFile}
                handleContextMenu={handleContextMenu}
                handleDragStart={handleDragStart}
                handleDragOver={handleDragOver}
                handleDrop={handleDrop}
                filterTreeBySearch={filterTreeBySearch}
              />
            </>
          )}
          {activeView === 'search' && (
            <>
              <div className="search-container">
                <input
                  type="text"
                  placeholder="Search files..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="search-input"
                />
                {searchQuery && (
                  <button
                    className="clear-search-btn"
                    onClick={() => setSearchQuery('')}
                    title="Clear search"
                  >
                    ×
                  </button>
                )}
              </div>
              <FileSearch
                searchQuery={searchQuery}
                setSearchQuery={setSearchQuery}
                searchResults={searchResults}
                setSearchResults={setSearchResults}
                isSearching={isSearching}
                setIsSearching={setIsSearching}
                currentWorkspaceId={currentWorkspaceId}
                workspace={workspace}
                openSearchResult={openSearchResult}
              />
            </>
          )}
          {activeView === 'progress' && (
            <div className="sidebar-content">
              <Progress currentWorkspaceId={currentWorkspaceId} />
            </div>
          )}
          {activeView === 'knowledge-graph' && (
            <div className="sidebar-content">
              {currentWorkspaceId ? (
                <KnowledgeGraph workspaceId={currentWorkspaceId} />
              ) : (
                <div className="placeholder-content">
                  <h4>Please select a workspace</h4>
                  <p>The Knowledge Graph requires a workspace to be selected.</p>
                </div>
              )}
            </div>
          )}
          {activeView === 'quiz' && (
            <div className="sidebar-content">
              <Quiz currentWorkspaceId={currentWorkspaceId} />
            </div>
          )}
          {activeView === 'chat' && (
            <div className="sidebar-content">
              <Chat currentWorkspaceId={currentWorkspaceId} />
            </div>
          )}
        </div>

        <div className="main-editor">
          <EditorTabs
            openFiles={openFiles}
            activeFileId={activeFileId}
            setActiveFileId={setActiveFileId}
            closeTab={closeTab}
            monacoEditorRef={monacoEditorRef}
          />

          <div className="editor-container">
            {openFiles.length === 0 ? (
              <div className="welcome-screen">
                <div className="welcome-content">
                  <h2>Welcome to Recall</h2>
                  <p>Select a file from the explorer to start editing</p>
                  <div className="welcome-actions">
                    <button
                      className="btn-primary"
                      onClick={() => setShowCreateModal(true)}
                    >
                      Create New File
                    </button>
                  </div>
                </div>
              </div>
            ) : isMarkdownFile && activeFile ? (
              <MarkdownEditor
                activeFile={activeFile}
                monacoEditorRef={monacoEditorRef}
              />
            ) : isNonTextFile && activeFile ? (
              <NonTextViewer
                activeFile={activeFile.file}
              />
            ) : (
              <div id="monaco-editor" className="monaco-editor"></div>
            )}
          </div>
        </div>
      </div>

      <FileOperationModals
        showCreateModal={showCreateModal}
        showRenameModal={showRenameModal}
        showMoveModal={showMoveModal}
        showCopyModal={showCopyModal}
        showDeleteConfirm={showDeleteConfirm}
        fileName={fileName}
        newName={newName}
        selectedItem={selectedItem}
        createBasePath={createBasePath}
        setFileName={setFileName}
        setNewName={setNewName}
        setSelectedItem={setSelectedItem}
        setCreateBasePath={setCreateBasePath}
        setShowCreateModal={setShowCreateModal}
        setShowRenameModal={setShowRenameModal}
        setShowMoveModal={setShowMoveModal}
        setShowCopyModal={setShowCopyModal}
        setShowDeleteConfirm={setShowDeleteConfirm}
        handleCreateFile={handleCreateFile}
        handleRename={handleRename}
        handleMove={handleMove}
        handleCopy={handleCopy}
        handleDelete={handleDelete}
      />

      <FileContextMenu
        contextMenu={contextMenu}
        copiedItemPath={copiedItemPath}
        handleContextMenuAction={handleContextMenuAction}
        setContextMenu={setContextMenu}
      />
    </div>
  );
};

export default FileExplorer;


================================================================================
FILE: frontend/components/file-explorer/components/AudioViewer.tsx
================================================================================

import React, { useState, useEffect } from 'react';
import { File } from '../../../src/core/types';

interface AudioViewerProps {
  activeFile: File;
}

const AudioViewer: React.FC<AudioViewerProps> = ({ activeFile }) => {
  const [streamingUrl, setStreamingUrl] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const setupStreaming = async () => {
      setLoading(true);
      setError(null);

      try {
        // Get the file server port
        const port = await (window as any).electronAPI.getFileServerPort();

        if (!port) {
          setError('File streaming server not available');
          setLoading(false);
          return;
        }

        // Create streaming URL - need to get relative path from workspace
        // For now, we'll use the full path and let the server handle it
        // In a real implementation, you'd want to compute the relative path from workspace root
        const relativePath = activeFile.path.replace(/\\/g, '/'); // Normalize path separators
        const url = `http://127.0.0.1:${port}/${encodeURIComponent(relativePath)}`;
        setStreamingUrl(url);
        setLoading(false);
      } catch (err: any) {
        console.error('Failed to setup audio streaming:', err);
        setError('Failed to setup audio streaming');
        setLoading(false);
      }
    };

    setupStreaming();
  }, [activeFile.path]);

  if (loading) {
    return (
      <div className="audio-viewer">
        <div className="audio-container">
          <div className="loading">Loading audio...</div>
        </div>
        <div className="file-info">
          <p><strong>File:</strong> {activeFile.name}</p>
          <p><strong>Path:</strong> {activeFile.path}</p>
          <p><strong>Size:</strong> {activeFile.size} bytes</p>
        </div>
      </div>
    );
  }

  if (error || !streamingUrl) {
    return (
      <div className="audio-viewer">
        <div className="audio-container">
          <div className="error-content">
            <h3>Failed to Load Audio</h3>
            <p>{error || 'Could not display the audio file.'}</p>
            <p>File: {activeFile.name}</p>
            <p>Path: {activeFile.path}</p>
          </div>
        </div>
        <div className="file-info">
          <p><strong>File:</strong> {activeFile.name}</p>
          <p><strong>Path:</strong> {activeFile.path}</p>
          <p><strong>Size:</strong> {activeFile.size} bytes</p>
        </div>
      </div>
    );
  }

  return (
    <div className="audio-viewer">
      <div className="audio-container">
        <audio
          src={streamingUrl}
          className="viewer-audio"
          controls
          onError={(e) => {
            console.error('Failed to load audio:', activeFile.path);
            setError('Failed to play audio');
          }}
        >
          Your browser does not support the audio element.
        </audio>
      </div>
      <div className="file-info">
        <p><strong>File:</strong> {activeFile.name}</p>
        <p><strong>Path:</strong> {activeFile.path}</p>
        <p><strong>Size:</strong> {activeFile.size} bytes</p>
      </div>
    </div>
  );
};

export default AudioViewer;


================================================================================
FILE: frontend/components/file-explorer/components/EditorTabs.tsx
================================================================================

import React from 'react';
import { Tab, MonacoEditor } from '../../../src/core/types';
import { getFileIcon } from '../../../src/shared/utils';

interface EditorTabsProps {
  openFiles: Tab[];
  activeFileId: number | null;
  setActiveFileId: (id: number | null) => void;
  closeTab: (fileId: number) => void;
  monacoEditorRef: React.MutableRefObject<MonacoEditor | null>;
}

const EditorTabs: React.FC<EditorTabsProps> = ({
  openFiles,
  activeFileId,
  setActiveFileId,
  closeTab,
  monacoEditorRef,
}) => {
  // Group files by name to detect duplicates
  const nameCounts = openFiles.reduce((acc, tab) => {
    acc[tab.name] = (acc[tab.name] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  const getDisplayName = (tab: Tab) => {
    if (nameCounts[tab.name] > 1) {
      // For duplicate names, show parent directory
      const pathParts = tab.file.path.split('/');
      const parentDir = pathParts.length > 1 ? pathParts[pathParts.length - 2] : '';
      return `${tab.name} (${parentDir})`;
    }
    return tab.name;
  };

  return (
    <div className="tab-bar">
      {openFiles.map(tab => (
        <div
          key={tab.id}
          className={`tab ${activeFileId === tab.id ? 'active' : ''}`}
          onClick={() => {
            setActiveFileId(tab.id);
            if (monacoEditorRef.current) {
              monacoEditorRef.current.setValue(tab.file.content || '');
            }
          }}
        >
          <span className="tab-icon">{getFileIcon(tab.name)}</span>
          <span className="tab-name" title={tab.file.path}>{getDisplayName(tab)}</span>
          <button
            className="tab-close"
            onClick={(e) => {
              e.stopPropagation();
              closeTab(tab.id);
            }}
            title="Close (Ctrl+W)"
          >
            ×
          </button>
        </div>
      ))}
    </div>
  );
};

export default EditorTabs;


================================================================================
FILE: frontend/components/file-explorer/components/FileContextMenu.tsx
================================================================================

import React from 'react';
import { FolderTreeNode } from '../../core/types.js';

interface FileContextMenuProps {
  contextMenu: { x: number; y: number; item: FolderTreeNode | null } | null;
  copiedItemPath: string | null;
  handleContextMenuAction: (action: string) => void;
  setContextMenu: (menu: { x: number; y: number; item: FolderTreeNode | null } | null) => void;
}

const FileContextMenu: React.FC<FileContextMenuProps> = ({
  contextMenu,
  copiedItemPath,
  handleContextMenuAction,
  setContextMenu,
}) => {
  if (!contextMenu) return null;

  return (
    <div
      className="context-menu"
      style={{ left: contextMenu.x, top: contextMenu.y }}
      onClick={() => setContextMenu(null)}
    >
      <div className="context-menu-content" onClick={(e) => e.stopPropagation()}>
        <button onClick={() => handleContextMenuAction('new-file')}>New File</button>
        <button onClick={() => handleContextMenuAction('new-folder')}>New Folder</button>
        {contextMenu.item && (
          <>
            <hr />
            <button onClick={() => handleContextMenuAction('rename')}>Rename</button>
            <button onClick={() => handleContextMenuAction('move')}>Move</button>
            <button onClick={() => handleContextMenuAction('copy')}>Copy</button>
            {copiedItemPath && (
              <button onClick={() => handleContextMenuAction('paste')}>Paste</button>
            )}
            <hr />
            <button
              className="danger"
              onClick={() => handleContextMenuAction('delete')}
            >
              Delete
            </button>
          </>
        )}
      </div>
    </div>
  );
};

export default FileContextMenu;


================================================================================
FILE: frontend/components/file-explorer/components/FileOperationModals.tsx
================================================================================

import React from 'react';
import { FolderTreeNode } from '../../core/types.js';

interface FileOperationModalsProps {
  showCreateModal: boolean;
  showRenameModal: boolean;
  showMoveModal: boolean;
  showCopyModal: boolean;
  showDeleteConfirm: boolean;
  fileName: string;
  newName: string;
  selectedItem: FolderTreeNode | null;
  createBasePath: string;
  setFileName: (name: string) => void;
  setNewName: (name: string) => void;
  setSelectedItem: (item: FolderTreeNode | null) => void;
  setCreateBasePath: (path: string) => void;
  setShowCreateModal: (show: boolean) => void;
  setShowRenameModal: (show: boolean) => void;
  setShowMoveModal: (show: boolean) => void;
  setShowCopyModal: (show: boolean) => void;
  setShowDeleteConfirm: (show: boolean) => void;
  handleCreateFile: (e: React.FormEvent) => void;
  handleRename: (e: React.FormEvent) => void;
  handleMove: (e: React.FormEvent) => void;
  handleCopy: (e: React.FormEvent) => void;
  handleDelete: () => void;
}

const FileOperationModals: React.FC<FileOperationModalsProps> = ({
  showCreateModal,
  showRenameModal,
  showMoveModal,
  showCopyModal,
  showDeleteConfirm,
  fileName,
  newName,
  selectedItem,
  createBasePath,
  setFileName,
  setNewName,
  setSelectedItem,
  setCreateBasePath,
  setShowCreateModal,
  setShowRenameModal,
  setShowMoveModal,
  setShowCopyModal,
  setShowDeleteConfirm,
  handleCreateFile,
  handleRename,
  handleMove,
  handleCopy,
  handleDelete,
}) => {
  return (
    <>
      {showCreateModal && (
        <div className="modal">
          <div className="modal-content">
            <h3>Create New File</h3>
            <form onSubmit={handleCreateFile}>
              <input
                type="text"
                placeholder="filename.ext (e.g., script.py, notes.md)"
                value={fileName}
                onChange={(e) => setFileName(e.target.value)}
                required
              />
              <div className="modal-actions">
                <button
                  type="button"
                  className="btn-secondary"
                  onClick={() => {
                    setShowCreateModal(false);
                    setFileName('');
                  }}
                >
                  Cancel
                </button>
                <button type="submit" className="btn-primary">Create</button>
              </div>
            </form>
          </div>
        </div>
      )}

      {showRenameModal && selectedItem && (
        <div className="modal">
          <div className="modal-content">
            <h3>Rename {selectedItem.type === 'directory' ? 'Folder' : 'File'}</h3>
            <form onSubmit={handleRename}>
              <input
                type="text"
                placeholder="New name"
                value={newName}
                onChange={(e) => setNewName(e.target.value)}
                required
              />
              <div className="modal-actions">
                <button
                  type="button"
                  className="btn-secondary"
                  onClick={() => {
                    setShowRenameModal(false);
                    setNewName('');
                    setSelectedItem(null);
                  }}
                >
                  Cancel
                </button>
                <button type="submit" className="btn-primary">Rename</button>
              </div>
            </form>
          </div>
        </div>
      )}

      {showMoveModal && selectedItem && (
        <div className="modal">
          <div className="modal-content">
            <h3>Move {selectedItem.type === 'directory' ? 'Folder' : 'File'}</h3>
            <form onSubmit={handleMove}>
              <input
                type="text"
                placeholder="New path (relative to workspace root)"
                value={newName}
                onChange={(e) => setNewName(e.target.value)}
                required
              />
              <div className="modal-actions">
                <button
                  type="button"
                  className="btn-secondary"
                  onClick={() => {
                    setShowMoveModal(false);
                    setNewName('');
                    setSelectedItem(null);
                  }}
                >
                  Cancel
                </button>
                <button type="submit" className="btn-primary">Move</button>
              </div>
            </form>
          </div>
        </div>
      )}

      {showCopyModal && selectedItem && (
        <div className="modal">
          <div className="modal-content">
            <h3>Copy {selectedItem.type === 'directory' ? 'Folder' : 'File'}</h3>
            <form onSubmit={handleCopy}>
              <input
                type="text"
                placeholder="Destination path (relative to workspace root)"
                value={newName}
                onChange={(e) => setNewName(e.target.value)}
                required
              />
              <div className="modal-actions">
                <button
                  type="button"
                  className="btn-secondary"
                  onClick={() => {
                    setShowCopyModal(false);
                    setNewName('');
                    setSelectedItem(null);
                  }}
                >
                  Cancel
                </button>
                <button type="submit" className="btn-primary">Copy</button>
              </div>
            </form>
          </div>
        </div>
      )}

      {showDeleteConfirm && selectedItem && (
        <div className="modal">
          <div className="modal-content">
            <h3>Delete {selectedItem.type === 'directory' ? 'Folder' : 'File'}</h3>
            <p>Are you sure you want to delete "{selectedItem.name}"? This action cannot be undone.</p>
            <div className="modal-actions">
              <button
                type="button"
                className="btn-secondary"
                onClick={() => {
                  setShowDeleteConfirm(false);
                  setSelectedItem(null);
                }}
              >
                Cancel
              </button>
              <button
                type="button"
                className="btn-danger"
                onClick={handleDelete}
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default FileOperationModals;


================================================================================
FILE: frontend/components/file-explorer/components/FileSearch.tsx
================================================================================

import React from 'react';
import { API_BASE } from '../../../src/core/api';
import { FolderTreeNode, Workspace } from '../../../src/core/types';
import { getFileIcon } from '../../../src/shared/utils';

interface FileSearchProps {
  searchQuery: string;
  setSearchQuery: (query: string) => void;
  searchResults: any[];
  setSearchResults: (results: any[]) => void;
  isSearching: boolean;
  setIsSearching: (searching: boolean) => void;
  currentWorkspaceId: number | null;
  workspace: Workspace | null;
  openSearchResult: (result: any) => void;
}

const FileSearch: React.FC<FileSearchProps> = ({
  searchQuery,
  setSearchQuery,
  searchResults,
  setSearchResults,
  isSearching,
  setIsSearching,
  currentWorkspaceId,
  workspace,
  openSearchResult,
}) => {
  const performContentSearch = async () => {
    if (!searchQuery.trim() || !workspace?.folder_path) return;

    setIsSearching(true);
    try {
      const response = await fetch(`${API_BASE}/search/content`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          workspace_id: currentWorkspaceId,
          query: searchQuery,
          folder_path: workspace.folder_path
        })
      });

      if (response.ok) {
        const results = await response.json();
        setSearchResults(results);
      } else {
        console.error('Search failed:', response.statusText);
        setSearchResults([]);
      }
    } catch (error) {
      console.error('Search error:', error);
      setSearchResults([]);
    } finally {
      setIsSearching(false);
    }
  };

  const renderSearchResults = () => {
    // Group results by directory path
    const groupedResults = searchResults.reduce((groups: any, result: any) => {
      const pathParts = result.path.split('/');
      const dirPath = pathParts.slice(0, -1).join('/') || '/';

      if (!groups[dirPath]) {
        groups[dirPath] = [];
      }
      groups[dirPath].push(result);
      return groups;
    }, {});

    return Object.entries(groupedResults).map(([dirPath, files]: [string, any]) => (
      <div key={dirPath} className="search-group">
        <div className="search-group-header">
          <span className="search-group-path">{dirPath === '/' ? 'Root' : dirPath}</span>
        </div>
        <div className="search-group-files">
          {files.map((result: any) => (
            <div
              key={result.path}
              className="search-result-item"
              onClick={() => openSearchResult(result)}
            >
              <div className="search-result-header">
                <span className="search-result-icon">{getFileIcon(result.name)}</span>
                <span className="search-result-name">{result.name}</span>
              </div>
              {result.matches && result.matches.length > 0 && (
                <div className="search-result-matches">
                  {result.matches.slice(0, 3).map((match: any, index: number) => (
                    <div key={index} className="search-match">
                      <span className="search-match-line">Line {match.line}:</span>
                      <span className="search-match-text">{match.text}</span>
                    </div>
                  ))}
                  {result.matches.length > 3 && (
                    <div className="search-match-more">
                      ... and {result.matches.length - 3} more matches
                    </div>
                  )}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    ));
  };

  return (
    <div className="search-results">
      <div className="search-input-container">
        <input
          type="text"
          placeholder="Search file contents..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="search-input"
          onKeyPress={(e) => e.key === 'Enter' && performContentSearch()}
        />
        <button
          className="search-btn"
          onClick={performContentSearch}
          disabled={isSearching || !searchQuery.trim()}
        >
          {isSearching ? '🔄' : '🔍'}
        </button>
        {searchQuery && (
          <button
            className="clear-search-btn"
            onClick={() => {
              setSearchQuery('');
              setSearchResults([]);
            }}
            title="Clear search"
          >
            ×
          </button>
        )}
      </div>
      <div className="search-results-list">
        {searchResults.length > 0 ? (
          renderSearchResults()
        ) : searchQuery && !isSearching ? (
          <div className="empty-search">
            <p>No files found containing "{searchQuery}"</p>
          </div>
        ) : isSearching ? (
          <div className="searching">
            <p>Searching...</p>
          </div>
        ) : (
          <div className="empty-search">
            <p>Enter a search term to find files by content</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default FileSearch;


================================================================================
FILE: frontend/components/file-explorer/components/FileTree.tsx
================================================================================

import React from 'react';
import { FolderTreeNode, Tab } from '../../../src/core/types';
import { getFileIcon } from '../../../src/shared/utils';

interface FileTreeProps {
  folderTree: FolderTreeNode[];
  expandedDirs: Set<string>;
  openFiles: Tab[];
  draggedItem: FolderTreeNode | null;
  searchQuery: string;
  toggleDirectory: (path: string) => void;
  openFile: (node: FolderTreeNode) => void;
  handleContextMenu: (e: React.MouseEvent, item: FolderTreeNode | null) => void;
  handleDragStart: (e: React.DragEvent, item: FolderTreeNode) => void;
  handleDragOver: (e: React.DragEvent) => void;
  handleDrop: (e: React.DragEvent, targetItem: FolderTreeNode) => void;
  filterTreeBySearch: (nodes: FolderTreeNode[], query: string) => FolderTreeNode[];
}

const FileTree: React.FC<FileTreeProps> = ({
  folderTree,
  expandedDirs,
  openFiles,
  draggedItem,
  searchQuery,
  toggleDirectory,
  openFile,
  handleContextMenu,
  handleDragStart,
  handleDragOver,
  handleDrop,
  filterTreeBySearch,
}) => {
  const renderTreeNode = (node: FolderTreeNode, level: number = 0): React.ReactNode => {
    const isExpanded = expandedDirs.has(node.path);
    const isActive = openFiles.some(tab => tab.file.path === node.path);

    return (
      <div key={node.path}>
        <div
          className={`tree-item ${isActive ? 'active' : ''} ${draggedItem?.path === node.path ? 'dragging' : ''}`}
          style={{ paddingLeft: `${level * 16 + 8}px` }}
          onClick={() => node.type === 'directory' ? toggleDirectory(node.path) : openFile(node)}
          onContextMenu={(e) => handleContextMenu(e, node)}
          draggable={true}
          onDragStart={(e) => handleDragStart(e, node)}
          onDragOver={node.type === 'directory' ? handleDragOver : undefined}
          onDrop={node.type === 'directory' ? (e) => handleDrop(e, node) : undefined}
        >
          {node.type === 'directory' ? (
            <span className="tree-icon">
              {isExpanded ? '📂' : '📁'}
            </span>
          ) : (
            <span className="tree-icon">{getFileIcon(node.name)}</span>
          )}
          <span className="tree-name">{node.name}</span>
        </div>
        {node.type === 'directory' && isExpanded && node.children && (
          <div>
            {node.children.map(child => renderTreeNode(child, level + 1))}
          </div>
        )}
      </div>
    );
  };

  const filteredTree = searchQuery ? filterTreeBySearch(folderTree, searchQuery) : folderTree;

  return (
    <div className="file-tree">
      {filteredTree.length > 0 ? (
        filteredTree.map(node => renderTreeNode(node))
      ) : searchQuery ? (
        <div className="empty-tree">
          <p>No files match your search</p>
        </div>
      ) : (
        <div className="empty-tree">
          <p>No files found in workspace folder</p>
        </div>
      )}
    </div>
  );
};

export default FileTree;


================================================================================
FILE: frontend/components/file-explorer/components/ImageViewer.tsx
================================================================================

import React, { useState, useEffect } from 'react';
import { File } from '../../../src/core/types';

interface ImageViewerProps {
  activeFile: File;
}

const ImageViewer: React.FC<ImageViewerProps> = ({ activeFile }) => {
  const [imageData, setImageData] = useState<{ base64: string; mimeType: string } | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [zoom, setZoom] = useState(1);
  const [imageSize, setImageSize] = useState({ width: 0, height: 0 });
  const imageRef = React.useRef<HTMLImageElement>(null);

  const handleZoomIn = () => {
    setZoom(prev => Math.min(prev * 1.2, 5));
  };

  const handleZoomOut = () => {
    setZoom(prev => Math.max(prev / 1.2, 0.1));
  };

  const handleFitToWindow = () => {
    if (imageSize.width && imageSize.height) {
      const container = document.querySelector('.image-container') as HTMLElement;
      if (container) {
        const containerRect = container.getBoundingClientRect();
        const scaleX = containerRect.width / imageSize.width;
        const scaleY = containerRect.height / imageSize.height;
        const fitScale = Math.min(scaleX, scaleY, 1); // Don't scale up smaller images
        setZoom(fitScale);
      }
    }
  };

  const handleImageLoad = (e: React.SyntheticEvent<HTMLImageElement>) => {
    const img = e.currentTarget;
    setImageSize({ width: img.naturalWidth, height: img.naturalHeight });
    // Auto-fit on first load
    setTimeout(handleFitToWindow, 100);
  };

  const handleWheel = (e: React.WheelEvent) => {
    e.preventDefault();
    if (e.deltaY < 0) {
      handleZoomIn();
    } else {
      handleZoomOut();
    }
  };

  useEffect(() => {
    setLoading(true);
    setError(null);
    setZoom(1); // Reset zoom when loading new image
    (window as any).electronAPI.readFileBase64(activeFile.path)
      .then((data: { base64: string; mimeType: string }) => {
        setImageData(data);
        setLoading(false);
      })
      .catch((err: any) => {
        console.error('Failed to load image:', err);
        setError('Failed to load image');
        setLoading(false);
      });
  }, [activeFile.path]);

  if (loading) {
    return (
      <div className="image-viewer">
        <div className="image-container">
          <div className="loading">Loading image...</div>
        </div>
        <div className="file-info">
          <p><strong>File:</strong> {activeFile.name}</p>
          <p><strong>Path:</strong> {activeFile.path}</p>
          <p><strong>Size:</strong> {activeFile.size} bytes</p>
        </div>
      </div>
    );
  }

  if (error || !imageData) {
    return (
      <div className="image-viewer">
        <div className="image-container">
          <div className="error-content">
            <h3>Failed to Load Image</h3>
            <p>{error || 'Could not display the image file.'}</p>
            <p>File: {activeFile.name}</p>
            <p>Path: {activeFile.path}</p>
          </div>
        </div>
        <div className="file-info">
          <p><strong>File:</strong> {activeFile.name}</p>
          <p><strong>Path:</strong> {activeFile.path}</p>
          <p><strong>Size:</strong> {activeFile.size} bytes</p>
        </div>
      </div>
    );
  }

  return (
    <div className="image-viewer">
      <div className="image-controls">
        <button onClick={handleZoomOut} title="Zoom Out">🔍-</button>
        <button onClick={handleFitToWindow} title="Fit to Window">📐</button>
        <button onClick={handleZoomIn} title="Zoom In">🔍+</button>
        <span className="zoom-level">{Math.round(zoom * 100)}%</span>
      </div>
      <div
        className="image-container scrollable"
        onWheel={handleWheel}
      >
        <img
          ref={imageRef}
          src={`data:${imageData.mimeType};base64,${imageData.base64}`}
          alt={activeFile.name}
          className="viewer-image"
          style={{
            transform: `scale(${zoom})`,
            transformOrigin: 'top left',
          }}
          onLoad={handleImageLoad}
        />
      </div>
      <div className="file-info">
        <p><strong>File:</strong> {activeFile.name}</p>
        <p><strong>Path:</strong> {activeFile.path}</p>
        <p><strong>Size:</strong> {activeFile.size} bytes</p>
        <p><strong>Dimensions:</strong> {imageSize.width} × {imageSize.height}</p>
      </div>
    </div>
  );
};

export default ImageViewer;


================================================================================
FILE: frontend/components/file-explorer/components/MarkdownEditor.tsx
================================================================================

import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Tab, MonacoEditor } from '../../../src/core/types';
import RichMarkdownRenderer from '../../../src/shared/RichMarkdownRenderer';

interface MarkdownEditorProps {
  activeFile: Tab | null;
  monacoEditorRef: React.MutableRefObject<MonacoEditor | null>;
}

const MarkdownEditor: React.FC<MarkdownEditorProps> = ({ activeFile, monacoEditorRef }) => {
  const [markdownContent, setMarkdownContent] = useState('');
  const [splitRatio, setSplitRatio] = useState(50); // Percentage for left panel
  const [isDragging, setIsDragging] = useState(false);
  const [isPreviewOnly, setIsPreviewOnly] = useState(false);
  const editorContainerRef = useRef<HTMLDivElement>(null);
  const splitContainerRef = useRef<HTMLDivElement>(null);
  const localMonacoRef = useRef<MonacoEditor | null>(null);

  // Initialize Monaco editor for this markdown component
  useEffect(() => {
    const initializeLocalMonaco = () => {
      const checkMonaco = () => {
        if (typeof (window as any).require !== 'undefined') {
          (window as any).require.config({
            paths: {
              vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs'
            }
          });

          (window as any).require(['vs/editor/editor.main'], () => {
            if (editorContainerRef.current && !localMonacoRef.current) {
              localMonacoRef.current = (window as any).monaco.editor.create(editorContainerRef.current, {
                value: activeFile?.file?.content || '',
                language: 'markdown',
                theme: 'vs-dark',
                automaticLayout: true,
                fontSize: 14,
                minimap: { enabled: false },
                scrollBeyondLastLine: false,
                wordWrap: 'on'
              });

              // Sync content changes to preview
              const editor = (localMonacoRef.current as any);
              if (editor && editor.onDidChangeModelContent) {
                editor.onDidChangeModelContent(() => {
                  if (localMonacoRef.current) {
                    const content = localMonacoRef.current.getValue();
                    setMarkdownContent(content);
                  }
                });
              }
            }
          });
        } else {
          setTimeout(checkMonaco, 100);
        }
      };

      checkMonaco();
    };

    initializeLocalMonaco();

    return () => {
      if (localMonacoRef.current) {
        (localMonacoRef.current as any).dispose();
        localMonacoRef.current = null;
      }
    };
  }, []);

  // Update content when active file changes
  useEffect(() => {
    if (activeFile?.file?.content) {
      setMarkdownContent(activeFile.file.content);
      if (localMonacoRef.current) {
        localMonacoRef.current.setValue(activeFile.file.content);
      }
    } else {
      setMarkdownContent('');
      if (localMonacoRef.current) {
        localMonacoRef.current.setValue('');
      }
    }
  }, [activeFile]);

  // Handle mouse drag for splitter
  const handleMouseDown = useCallback((e: React.MouseEvent) => {
    setIsDragging(true);
    e.preventDefault();
  }, []);

  const handleMouseMove = useCallback((e: MouseEvent) => {
    if (!isDragging || !splitContainerRef.current) return;

    const container = splitContainerRef.current;
    const rect = container.getBoundingClientRect();
    const newRatio = ((e.clientX - rect.left) / rect.width) * 100;

    // Constrain ratio between 20% and 80%
    const constrainedRatio = Math.max(20, Math.min(80, newRatio));
    setSplitRatio(constrainedRatio);
  }, [isDragging]);

  const handleMouseUp = useCallback(() => {
    setIsDragging(false);
  }, []);

  // Add global mouse event listeners
  useEffect(() => {
    if (isDragging) {
      document.addEventListener('mousemove', handleMouseMove);
      document.addEventListener('mouseup', handleMouseUp);
      document.body.style.cursor = 'col-resize';
      document.body.style.userSelect = 'none';
    } else {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      document.body.style.cursor = '';
      document.body.style.userSelect = '';
    }

    return () => {
      document.removeEventListener('mousemove', handleMouseMove);
      document.removeEventListener('mouseup', handleMouseUp);
      document.body.style.cursor = '';
      document.body.style.userSelect = '';
    };
  }, [isDragging, handleMouseMove, handleMouseUp]);

  if (!activeFile) {
    return (
      <div className="markdown-editor-empty">
        <div className="welcome-content">
          <h2>Select a Markdown File</h2>
          <p>Open a .md or .markdown file to start editing with rich preview</p>
        </div>
      </div>
    );
  }

  return (
    <div className="markdown-editor">
      {/* Editor Toolbar */}
      <div className="markdown-toolbar">
        <div className="toolbar-left">
          <span className="file-info">
            {activeFile.name}
          </span>
        </div>
        <div className="toolbar-right">
          {!isPreviewOnly && (
            <span className="split-info">
              {Math.round(splitRatio)}% • {Math.round(100 - splitRatio)}%
            </span>
          )}
          <button
            className={`mode-toggle ${isPreviewOnly ? 'active' : ''}`}
            onClick={() => setIsPreviewOnly(!isPreviewOnly)}
            title={isPreviewOnly ? "Switch to Edit Mode" : "Switch to Preview Only"}
          >
            {isPreviewOnly ? '✏️ Edit' : '👁️ Preview'}
          </button>
        </div>
      </div>

      {/* Content Area */}
      {isPreviewOnly ? (
        <div className="markdown-preview-only">
          <div className="markdown-preview">
            <RichMarkdownRenderer
              content={markdownContent}
              className="markdown-preview-content"
            />
          </div>
        </div>
      ) : (
        <div
          ref={splitContainerRef}
          className="markdown-split-container"
          style={{ cursor: isDragging ? 'col-resize' : 'default' }}
        >
          {/* Left Panel - Monaco Editor */}
          <div
            className="markdown-editor-panel"
            style={{ width: `${splitRatio}%` }}
          >
            <div
              ref={editorContainerRef}
              className="monaco-editor"
              style={{ width: '100%', height: '100%' }}
            />
          </div>

          {/* Splitter */}
          <div
            className="markdown-splitter"
            onMouseDown={handleMouseDown}
          >
            <div className="splitter-handle"></div>
          </div>

          {/* Right Panel - Preview */}
          <div
            className="markdown-preview-panel"
            style={{ width: `${100 - splitRatio}%` }}
          >
            <div className="markdown-preview">
              <RichMarkdownRenderer
                content={markdownContent}
                className="markdown-preview-content"
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default MarkdownEditor;


================================================================================
FILE: frontend/components/file-explorer/components/NonTextViewer.tsx
================================================================================

import React from 'react';
import { File } from '../../../src/core/types';
import ImageViewer from './ImageViewer';
import PdfViewer from './PdfViewer';
import VideoViewer from './VideoViewer';
import AudioViewer from './AudioViewer';

interface NonTextViewerProps {
  activeFile: File;
}

const NonTextViewer: React.FC<NonTextViewerProps> = ({ activeFile }) => {
  const isImage = /\.(jpg|jpeg|png|gif|bmp|webp|svg)$/i.test(activeFile.name);
  const isPdf = /\.pdf$/i.test(activeFile.name);
  const isVideo = /\.(mp4|avi|mov|mkv|webm|flv|wmv|mpg|mpeg|3gp|m4v)$/i.test(activeFile.name);
  const isAudio = /\.(mp3|wav|ogg|flac|aac|m4a|wma|aiff|au)$/i.test(activeFile.name);

  if (isImage) {
    return <ImageViewer activeFile={activeFile} />;
  }

  if (isPdf) {
    return <PdfViewer activeFile={activeFile} />;
  }

  if (isVideo) {
    return <VideoViewer activeFile={activeFile} />;
  }

  if (isAudio) {
    return <AudioViewer activeFile={activeFile} />;
  }

  return (
    <div className="unsupported-file-viewer">
      <div className="unsupported-content">
        <h3>Unsupported File Type</h3>
        <p>This file type is not supported for viewing.</p>
        <p>File: {activeFile.name}</p>
        <p>Type: {activeFile.file_type}</p>
      </div>
    </div>
  );
};

export default NonTextViewer;


================================================================================
FILE: frontend/components/file-explorer/components/PdfViewer.tsx
================================================================================

import React, { useState, useEffect } from 'react';
import { File } from '../../../src/core/types';

interface PdfViewerProps {
  activeFile: File;
}

const PdfViewer: React.FC<PdfViewerProps> = ({ activeFile }) => {
  const [pdfData, setPdfData] = useState<{ base64: string; mimeType: string } | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    setLoading(true);
    setError(null);
    (window as any).electronAPI.readFileBase64(activeFile.path)
      .then((data: { base64: string; mimeType: string }) => {
        setPdfData(data);
        setLoading(false);
      })
      .catch((err: any) => {
        console.error('Failed to load PDF:', err);
        setError('Failed to load PDF');
        setLoading(false);
      });
  }, [activeFile.path]);

  if (loading) {
    return (
      <div className="pdf-viewer">
        <div className="pdf-container">
          <div className="loading">Loading PDF...</div>
        </div>
        <div className="file-info">
          <p><strong>File:</strong> {activeFile.name}</p>
          <p><strong>Path:</strong> {activeFile.path}</p>
          <p><strong>Size:</strong> {activeFile.size} bytes</p>
        </div>
      </div>
    );
  }

  if (error || !pdfData) {
    return (
      <div className="pdf-viewer">
        <div className="pdf-container">
          <div className="error-content">
            <h3>Failed to Load PDF</h3>
            <p>{error || 'Could not display the PDF file.'}</p>
            <p>File: {activeFile.name}</p>
            <p>Path: {activeFile.path}</p>
          </div>
        </div>
        <div className="file-info">
          <p><strong>File:</strong> {activeFile.name}</p>
          <p><strong>Path:</strong> {activeFile.path}</p>
          <p><strong>Size:</strong> {activeFile.size} bytes</p>
        </div>
      </div>
    );
  }

  return (
    <div className="pdf-viewer">
      <div className="pdf-container">
        <iframe
          src={`data:${pdfData.mimeType};base64,${pdfData.base64}`}
          className="viewer-pdf"
          title={activeFile.name}
        />
      </div>
      <div className="file-info">
        <p><strong>File:</strong> {activeFile.name}</p>
        <p><strong>Path:</strong> {activeFile.path}</p>
        <p><strong>Size:</strong> {activeFile.size} bytes</p>
      </div>
    </div>
  );
};

export default PdfViewer;


================================================================================
FILE: frontend/components/file-explorer/components/VideoViewer.tsx
================================================================================

import React, { useState, useEffect } from 'react';
import { File } from '../../../src/core/types';

interface VideoViewerProps {
  activeFile: File;
}

const VideoViewer: React.FC<VideoViewerProps> = ({ activeFile }) => {
  const [streamingUrl, setStreamingUrl] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const setupStreaming = async () => {
      setLoading(true);
      setError(null);

      try {
        // Get the file server port
        const port = await (window as any).electronAPI.getFileServerPort();

        if (!port) {
          setError('File streaming server not available');
          setLoading(false);
          return;
        }

        // Create streaming URL - need to get relative path from workspace
        // For now, we'll use the full path and let the server handle it
        // In a real implementation, you'd want to compute the relative path from workspace root
        const relativePath = activeFile.path.replace(/\\/g, '/'); // Normalize path separators
        const url = `http://127.0.0.1:${port}/${encodeURIComponent(relativePath)}`;
        setStreamingUrl(url);
        setLoading(false);
      } catch (err: any) {
        console.error('Failed to setup video streaming:', err);
        setError('Failed to setup video streaming');
        setLoading(false);
      }
    };

    setupStreaming();
  }, [activeFile.path]);

  if (loading) {
    return (
      <div className="video-viewer">
        <div className="video-container">
          <div className="loading">Loading video...</div>
        </div>
        <div className="file-info">
          <p><strong>File:</strong> {activeFile.name}</p>
          <p><strong>Path:</strong> {activeFile.path}</p>
          <p><strong>Size:</strong> {activeFile.size} bytes</p>
        </div>
      </div>
    );
  }

  if (error || !streamingUrl) {
    return (
      <div className="video-viewer">
        <div className="video-container">
          <div className="error-content">
            <h3>Failed to Load Video</h3>
            <p>{error || 'Could not display the video file.'}</p>
            <p>File: {activeFile.name}</p>
            <p>Path: {activeFile.path}</p>
          </div>
        </div>
        <div className="file-info">
          <p><strong>File:</strong> {activeFile.name}</p>
          <p><strong>Path:</strong> {activeFile.path}</p>
          <p><strong>Size:</strong> {activeFile.size} bytes</p>
        </div>
      </div>
    );
  }

  return (
    <div className="video-viewer">
      <div className="video-container">
        <video
          src={streamingUrl}
          className="viewer-video"
          controls
          onError={(e) => {
            console.error('Failed to load video:', activeFile.path);
            setError('Failed to play video');
          }}
        >
          Your browser does not support the video tag.
        </video>
      </div>
      <div className="file-info">
        <p><strong>File:</strong> {activeFile.name}</p>
        <p><strong>Path:</strong> {activeFile.path}</p>
        <p><strong>Size:</strong> {activeFile.size} bytes</p>
      </div>
    </div>
  );
};

export default VideoViewer;


================================================================================
FILE: frontend/components/file-explorer/hooks/fileExplorerHooks.ts
================================================================================

import { useState, useEffect, useRef } from 'react';
import { API_BASE } from '../../../src/core/api';
import { File, Tab, MonacoEditor, FolderTreeNode, Workspace } from '../../../src/core/types';

export const useFileExplorerState = () => {
  const [workspace, setWorkspace] = useState<Workspace | null>(null);
  const [folderTree, setFolderTree] = useState<FolderTreeNode[]>([]);
  const [expandedDirs, setExpandedDirs] = useState<Set<string>>(new Set());
  const [openFiles, setOpenFiles] = useState<Tab[]>([]);
  const [recentlyOpened, setRecentlyOpened] = useState<Tab[]>([]);
  const [activeFileId, setActiveFileId] = useState<number | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<any[]>([]);
  const [isSearching, setIsSearching] = useState(false);
  const [activeView, setActiveView] = useState<'explorer' | 'search' | 'progress' | 'knowledge-graph' | 'quiz' | 'chat'>('explorer');
  const monacoEditorRef = useRef<MonacoEditor | null>(null);

  // File operations state
  const [contextMenu, setContextMenu] = useState<{ x: number; y: number; item: FolderTreeNode | null } | null>(null);
  const [showRenameModal, setShowRenameModal] = useState(false);
  const [showMoveModal, setShowMoveModal] = useState(false);
  const [showCopyModal, setShowCopyModal] = useState(false);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  const [selectedItem, setSelectedItem] = useState<FolderTreeNode | null>(null);
  const [newName, setNewName] = useState('');
  const [copiedItemPath, setCopiedItemPath] = useState<string | null>(null);
  const [draggedItem, setDraggedItem] = useState<FolderTreeNode | null>(null);
  const [createBasePath, setCreateBasePath] = useState<string>('');

  return {
    workspace,
    setWorkspace,
    folderTree,
    setFolderTree,
    expandedDirs,
    setExpandedDirs,
    openFiles,
    setOpenFiles,
    recentlyOpened,
    setRecentlyOpened,
    activeFileId,
    setActiveFileId,
    searchQuery,
    setSearchQuery,
    searchResults,
    setSearchResults,
    isSearching,
    setIsSearching,
    activeView,
    setActiveView,
    monacoEditorRef,
    contextMenu,
    setContextMenu,
    showRenameModal,
    setShowRenameModal,
    showMoveModal,
    setShowMoveModal,
    showCopyModal,
    setShowCopyModal,
    showDeleteConfirm,
    setShowDeleteConfirm,
    selectedItem,
    setSelectedItem,
    newName,
    setNewName,
    copiedItemPath,
    setCopiedItemPath,
    draggedItem,
    setDraggedItem,
    createBasePath,
    setCreateBasePath,
  };
};

export const useWorkspaceLoading = (currentWorkspaceId: number | null, setWorkspace: (workspace: Workspace | null) => void) => {
  useEffect(() => {
    const loadWorkspace = async () => {
      if (!currentWorkspaceId) return;

      console.log('Loading workspace:', currentWorkspaceId);
      try {
        const response = await fetch(`${API_BASE}/workspaces/${currentWorkspaceId}`);
        const workspaceData = await response.json();
        console.log('Workspace data:', workspaceData);
        setWorkspace(workspaceData);
      } catch (error) {
        console.error('Failed to load workspace:', error);
      }
    };

    if (currentWorkspaceId) {
      loadWorkspace();
    }
  }, [currentWorkspaceId, setWorkspace]);
};

export const useFolderTreeLoading = (workspace: Workspace | null, setFolderTree: (tree: FolderTreeNode[]) => void) => {
  useEffect(() => {
    const loadFolderTree = async () => {
      if (!workspace?.folder_path) {
        console.log('No folder_path in workspace:', workspace);
        return;
      }

      console.log('Loading folder tree for:', workspace.folder_path);
      try {
        const tree = await (window as any).electronAPI.getFolderTree(workspace.folder_path);
        console.log('Folder tree loaded:', tree);
        setFolderTree(tree);
      } catch (error) {
        console.error('Failed to load folder tree:', error);
      }
    };

    if (workspace?.folder_path) {
      loadFolderTree();
    }
  }, [workspace, setFolderTree]);
};

export const useLocalStoragePersistence = (
  setRecentlyOpened: (tabs: Tab[]) => void,
  setOpenFiles: (tabs: Tab[]) => void,
  setActiveFileId: (id: number | null) => void,
  openFiles: Tab[]
) => {
  useEffect(() => {
    try {
      const saved = localStorage.getItem('recentlyOpened');
      if (saved) {
        try {
          setRecentlyOpened(JSON.parse(saved));
        } catch (error) {
          console.error('Failed to parse recentlyOpened from localStorage:', error);
        }
      }
    } catch (error) {
      console.error('Failed to access localStorage for recentlyOpened:', error);
    }

    try {
      const savedOpen = localStorage.getItem('openFiles');
      if (savedOpen) {
        try {
          const parsed = JSON.parse(savedOpen);
          setOpenFiles(parsed);
          if (parsed.length > 0) {
            setActiveFileId(parsed[parsed.length - 1].id);
          }
        } catch (error) {
          console.error('Failed to parse openFiles from localStorage:', error);
        }
      }
    } catch (error) {
      console.error('Failed to access localStorage for openFiles:', error);
    }
  }, [setRecentlyOpened, setOpenFiles, setActiveFileId]);

  useEffect(() => {
    try {
      localStorage.setItem('openFiles', JSON.stringify(openFiles));
    } catch (error) {
      console.error('Failed to save openFiles to localStorage:', error);
    }
  }, [openFiles]);
};

export const useMonacoEditor = (
  monacoEditorRef: React.MutableRefObject<MonacoEditor | null>,
  activeFileId: number | null,
  openFiles: Tab[]
) => {
  useEffect(() => {
    const initializeMonacoEditor = () => {
      const checkMonaco = () => {
        if (typeof (window as any).require !== 'undefined') {
          (window as any).require.config({
            paths: {
              vs: 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs'
            }
          });

          (window as any).require(['vs/editor/editor.main'], () => {
            const container = document.getElementById('monaco-editor');
            if (container) {
              monacoEditorRef.current = (window as any).monaco.editor.create(container, {
                value: '// Welcome to Recall\n// Start editing your files here',
                language: 'plaintext',
                theme: 'vs-dark',
                automaticLayout: true,
                fontSize: 14,
                minimap: { enabled: false },
                scrollBeyondLastLine: false,
                wordWrap: 'on'
              });
              console.log('Monaco Editor initialized successfully');

              // Set content for active file if loaded from localStorage
              if (activeFileId) {
                const activeTab = openFiles.find(t => t.id === activeFileId);
                if (activeTab && monacoEditorRef.current) {
                  monacoEditorRef.current.setValue(activeTab.file.content || '');
                }
              }
            }
          });
        } else {
          setTimeout(checkMonaco, 100);
        }
      };

      checkMonaco();
    };

    initializeMonacoEditor();
  }, [monacoEditorRef, activeFileId, openFiles]);
};

export const useFileSystemWatcher = (workspace: Workspace | null, loadFolderTree: () => void) => {
  useEffect(() => {
    const handleFileSystemChange = (event: any, data: any) => {
      console.log('File system changed:', data);
      loadFolderTree();
    };

    (window as any).electronAPI.onFileSystemChange(handleFileSystemChange);

    return () => {
      (window as any).electronAPI.offFileSystemChange(handleFileSystemChange);
    };
  }, [workspace, loadFolderTree]);
};

export const useWorkspaceNotification = (workspace: Workspace | null) => {
  useEffect(() => {
    if (workspace?.folder_path) {
      (window as any).electronAPI.notifyWorkspaceChanged(workspace.folder_path);
    }
  }, [workspace]);
};


================================================================================
FILE: frontend/components/file-explorer/hooks/useContextMenu.ts
================================================================================

import { FolderTreeNode, Workspace } from '../../core/types.js';

export const useContextMenu = (
  contextMenu: { x: number; y: number; item: FolderTreeNode | null } | null,
  workspace: Workspace | null,
  copiedItemPath: string | null,
  setContextMenu: (menu: { x: number; y: number; item: FolderTreeNode | null } | null) => void,
  setSelectedItem: (item: FolderTreeNode | null) => void,
  setCreateBasePath: (path: string) => void,
  setShowCreateModal: (show: boolean) => void,
  setNewName: (name: string) => void,
  setShowRenameModal: (show: boolean) => void,
  setShowMoveModal: (show: boolean) => void,
  setCopiedItemPath: (path: string | null) => void,
  setShowDeleteConfirm: (show: boolean) => void,
  handleCreateDirectory: (basePath: string, name: string) => void,
  loadFolderTree: () => void
) => {
  const handleContextMenu = (e: React.MouseEvent, item: FolderTreeNode | null) => {
    e.preventDefault();

    // Calculate position to keep menu within viewport
    const menuWidth = 180;
    const menuHeight = 200; // Approximate height
    let x = e.clientX;
    let y = e.clientY;

    // Adjust horizontal position
    if (x + menuWidth > window.innerWidth) {
      x = window.innerWidth - menuWidth - 10;
    }

    // Adjust vertical position
    if (y + menuHeight > window.innerHeight) {
      y = window.innerHeight - menuHeight - 10;
    }

    setContextMenu({ x, y, item });
  };

  const handleContextMenuAction = (action: string) => {
    if (!contextMenu?.item) return;

    setSelectedItem(contextMenu.item);
    setContextMenu(null);

    const basePath = workspace?.folder_path ? `${workspace.folder_path}/${contextMenu.item.path}` : '';

    switch (action) {
      case 'new-file':
        setCreateBasePath(basePath);
        setShowCreateModal(true);
        break;
      case 'new-folder':
        const folderName = prompt('Enter folder name:');
        if (folderName && basePath) {
          handleCreateDirectory(basePath, folderName);
        }
        break;
      case 'rename':
        setNewName(contextMenu.item.name);
        setShowRenameModal(true);
        break;
      case 'move':
        setNewName(contextMenu.item.path);
        setShowMoveModal(true);
        break;
      case 'copy':
        setCopiedItemPath(`${workspace?.folder_path}/${contextMenu.item.path}`);
        break;
      case 'paste':
        if (copiedItemPath && basePath) {
          (window as any).electronAPI.copyFile(copiedItemPath, basePath).then(() => {
            loadFolderTree();
          }).catch((error: any) => {
            console.error('Failed to paste:', error);
            alert('Failed to paste');
          });
        }
        break;
      case 'delete':
        setShowDeleteConfirm(true);
        break;
    }
  };

  return {
    handleContextMenu,
    handleContextMenuAction,
  };
};


================================================================================
FILE: frontend/components/file-explorer/hooks/useDragAndDrop.ts
================================================================================

import { FolderTreeNode, Workspace } from '../../core/types.js';

export const useDragAndDrop = (
  draggedItem: FolderTreeNode | null,
  workspace: Workspace | null,
  setDraggedItem: (item: FolderTreeNode | null) => void,
  loadFolderTree: () => void
) => {
  const handleDragStart = (e: React.DragEvent, item: FolderTreeNode) => {
    setDraggedItem(item);
    e.dataTransfer.effectAllowed = 'move';
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = 'move';
  };

  const handleDrop = async (e: React.DragEvent, targetItem: FolderTreeNode) => {
    e.preventDefault();
    if (!draggedItem || !workspace?.folder_path || draggedItem.path === targetItem.path) return;

    // Only allow dropping on directories
    if (targetItem.type !== 'directory') return;

    const sourcePath = `${workspace.folder_path}/${draggedItem.path}`;
    const destPath = `${workspace.folder_path}/${targetItem.path}`;

    try {
      await (window as any).electronAPI.moveFile(sourcePath, destPath);
      setDraggedItem(null);
      loadFolderTree();
    } catch (error) {
      console.error('Failed to move item:', error);
      alert('Failed to move item');
      setDraggedItem(null);
    }
  };

  return {
    handleDragStart,
    handleDragOver,
    handleDrop,
  };
};


================================================================================
FILE: frontend/components/file-explorer/hooks/useFileManagement.ts
================================================================================

import { File, Tab, FolderTreeNode, MonacoEditor, Workspace } from '../../../src/core/types';
import { getFileTypeFromName } from '../../../src/shared/utils';

export const useFileManagement = (
  workspace: Workspace | null,
  currentWorkspaceId: number | null,
  openFiles: Tab[],
  activeFileId: number | null,
  monacoEditorRef: React.MutableRefObject<MonacoEditor | null>,
  setOpenFiles: (tabs: Tab[] | ((prev: Tab[]) => Tab[])) => void,
  setActiveFileId: (id: number | null) => void
) => {
  const isBinaryFile = (content: string): boolean => {
    // Check for null bytes or other binary indicators
    return content.includes('\0') || /[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x9F]/.test(content);
  };

  const openFile = async (node: FolderTreeNode) => {
    if (!workspace?.folder_path || !currentWorkspaceId) return;

    const fullPath = `${workspace.folder_path}/${node.path}`;
    const isNonTextFile = /\.(jpg|jpeg|png|gif|bmp|webp|svg|pdf|mp4|avi|mov|mkv|webm|flv|wmv|mpg|mpeg|3gp|m4v|mp3|wav|ogg|flac|aac|m4a|wma|aiff|au)$/i.test(node.name);

    try {
      // For non-text files (images, PDFs, videos, audio), we don't need to read content as text
      if (isNonTextFile) {
        // Get file stats to get size
        const stats = await (window as any).electronAPI.getFileStats(fullPath);

        const tempFile: File = {
          id: Date.now(), // Temporary ID
          name: node.name,
          path: node.path, // Use relative path for consistency
          file_type: getFileTypeFromName(node.name),
          size: stats.size,
          workspace_id: currentWorkspaceId,
          content: '' // Not needed for viewer
        };

        const existingTab = openFiles.find(f => f.file.path === node.path);
        if (existingTab) {
          setActiveFileId(existingTab.id);
          return;
        }

        const tab: Tab = {
          id: tempFile.id,
          name: tempFile.name,
          file: tempFile,
          isActive: false
        };

        setOpenFiles(prev => [...prev, tab]);
        setActiveFileId(tempFile.id);
        return;
      }

      const content = await (window as any).electronAPI.readFileContent(fullPath);

      // Check if file is binary
      if (isBinaryFile(content)) {
        // Create a special file object for binary files
        const tempFile: File = {
          id: Date.now(), // Temporary ID
          name: node.name,
          path: node.path,
          file_type: 'binary',
          size: content.length,
          workspace_id: currentWorkspaceId,
          content: `This is a binary file and cannot be opened in the editor.\n\nFile: ${node.name}\nPath: ${node.path}\nSize: ${content.length} bytes`
        };

        const existingTab = openFiles.find(f => f.file.path === node.path);
        if (existingTab) {
          setActiveFileId(existingTab.id);
          if (monacoEditorRef.current) {
            monacoEditorRef.current.setValue(tempFile.content);
          }
          return;
        }

        const tab: Tab = {
          id: tempFile.id,
          name: tempFile.name,
          file: tempFile,
          isActive: false
        };

        setOpenFiles(prev => [...prev, tab]);
        setActiveFileId(tempFile.id);

        if (monacoEditorRef.current) {
          monacoEditorRef.current.setValue(tempFile.content);
        }
        return;
      }

      // Create a temporary file object for the tab
      const tempFile: File = {
        id: Date.now(), // Temporary ID
        name: node.name,
        path: node.path,
        file_type: getFileTypeFromName(node.name),
        size: content.length,
        workspace_id: currentWorkspaceId,
        content: content
      };

      const existingTab = openFiles.find(f => f.file.path === node.path);
      if (existingTab) {
        setActiveFileId(existingTab.id);
        if (monacoEditorRef.current) {
          monacoEditorRef.current.setValue(content);
        }
        return;
      }

      const tab: Tab = {
        id: tempFile.id,
        name: tempFile.name,
        file: tempFile,
        isActive: false
      };

      setOpenFiles(prev => [...prev, tab]);
      setActiveFileId(tempFile.id);

      if (monacoEditorRef.current) {
        monacoEditorRef.current.setValue(content);
      }
    } catch (error) {
      console.error('Failed to open file:', error);
      alert('Failed to open file');
    }
  };

  const closeTab = (fileId: number) => {
    const remainingTabs = openFiles.filter(f => f.id !== fileId);
    setOpenFiles(remainingTabs);
    if (activeFileId === fileId) {
      if (remainingTabs.length > 0) {
        const newActiveId = remainingTabs[remainingTabs.length - 1].id;
        setActiveFileId(newActiveId);
        if (monacoEditorRef.current) {
          const newActiveTab = remainingTabs.find(t => t.id === newActiveId);
          if (newActiveTab) {
            monacoEditorRef.current.setValue(newActiveTab.file.content || '');
          }
        }
      } else {
        setActiveFileId(null);
      }
    }
  };

  const openSearchResult = async (result: any) => {
    if (!workspace?.folder_path || !currentWorkspaceId || !result.path) return;

    const fullPath = `${workspace.folder_path}/${result.path}`;
    const isNonTextFile = /\.(jpg|jpeg|png|gif|bmp|webp|svg|pdf|mp4|avi|mov|mkv|webm|flv|wmv|mpg|mpeg|3gp|m4v|mp3|wav|ogg|flac|aac|m4a|wma|aiff|au)$/i.test(result.name);

    try {
      // For non-text files (images, PDFs, videos, audio), we don't need to read content as text
      if (isNonTextFile) {
        // Get file stats to get size
        const stats = await (window as any).electronAPI.getFileStats(fullPath);

        const tempFile: File = {
          id: Date.now(),
          name: result.name,
          path: result.path, // Use relative path for consistency
          file_type: getFileTypeFromName(result.name),
          size: stats.size,
          workspace_id: currentWorkspaceId,
          content: '' // Not needed for viewer
        };

        const existingTab = openFiles.find(f => f.file.path === result.path);
        if (existingTab) {
          setActiveFileId(existingTab.id);
          return;
        }

        const tab: Tab = {
          id: tempFile.id,
          name: tempFile.name,
          file: tempFile,
          isActive: false
        };

        setOpenFiles(prev => [...prev, tab]);
        setActiveFileId(tempFile.id);
        return;
      }

      const content = await (window as any).electronAPI.readFileContent(fullPath);

      // Check if file is binary
      if (isBinaryFile(content)) {
        // Create a special file object for binary files
        const tempFile: File = {
          id: Date.now(),
          name: result.name,
          path: result.path,
          file_type: 'binary',
          size: content.length,
          workspace_id: currentWorkspaceId,
          content: `This is a binary file and cannot be opened in the editor.\n\nFile: ${result.name}\nPath: ${result.path}\nSize: ${content.length} bytes`
        };

        const existingTab = openFiles.find(f => f.file.path === result.path);
        if (existingTab) {
          setActiveFileId(existingTab.id);
          if (monacoEditorRef.current) {
            monacoEditorRef.current.setValue(tempFile.content);
          }
          return;
        }

        const tab: Tab = {
          id: tempFile.id,
          name: tempFile.name,
          file: tempFile,
          isActive: false
        };

        setOpenFiles(prev => [...prev, tab]);
        setActiveFileId(tempFile.id);

        if (monacoEditorRef.current) {
          monacoEditorRef.current.setValue(tempFile.content);
        }
        return;
      }

      const tempFile: File = {
        id: Date.now(),
        name: result.name,
        path: result.path,
        file_type: getFileTypeFromName(result.name),
        size: content.length,
        workspace_id: currentWorkspaceId,
        content: content
      };

      const existingTab = openFiles.find(f => f.file.path === result.path);
      if (existingTab) {
        setActiveFileId(existingTab.id);
        if (monacoEditorRef.current) {
          monacoEditorRef.current.setValue(content);
        }
        return;
      }

      const tab: Tab = {
        id: tempFile.id,
        name: tempFile.name,
        file: tempFile,
        isActive: false
      };

      setOpenFiles(prev => [...prev, tab]);
      setActiveFileId(tempFile.id);

      if (monacoEditorRef.current) {
        monacoEditorRef.current.setValue(content);
      }
    } catch (error) {
      console.error('Failed to open search result:', error);
      alert('Failed to open file');
    }
  };

  return {
    openFile,
    closeTab,
    openSearchResult,
  };
};


================================================================================
FILE: frontend/components/file-explorer/hooks/useFileOperations.ts
================================================================================

import { FolderTreeNode, Workspace } from '../../core/types.js';

export const useFileOperations = (
  workspace: Workspace | null,
  selectedItem: FolderTreeNode | null,
  newName: string,
  fileName: string,
  createBasePath: string,
  setShowCreateModal: (show: boolean) => void,
  setShowRenameModal: (show: boolean) => void,
  setShowMoveModal: (show: boolean) => void,
  setShowCopyModal: (show: boolean) => void,
  setShowDeleteConfirm: (show: boolean) => void,
  setFileName: (name: string) => void,
  setNewName: (name: string) => void,
  setSelectedItem: (item: FolderTreeNode | null) => void,
  setCreateBasePath: (path: string) => void,
  loadFolderTree: () => void
) => {
  const handleCreateFile = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!fileName.trim() || !workspace?.folder_path) return;

    const basePath = createBasePath || workspace.folder_path;

    try {
      await (window as any).electronAPI.createFile(basePath, fileName);
      setShowCreateModal(false);
      setFileName('');
      setCreateBasePath('');
      loadFolderTree();
    } catch (error) {
      console.error('Failed to create file:', error);
      alert('Failed to create file');
    }
  };

  const handleCreateDirectory = async (basePath: string, name: string) => {
    if (!name.trim()) return;

    try {
      await (window as any).electronAPI.createDirectory(basePath, name);
      loadFolderTree();
    } catch (error) {
      console.error('Failed to create directory:', error);
      alert('Failed to create directory');
    }
  };

  const handleRename = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newName.trim() || !selectedItem || !workspace?.folder_path) return;

    const fullPath = `${workspace.folder_path}/${selectedItem.path}`;

    try {
      await (window as any).electronAPI.renameFile(fullPath, newName);
      setShowRenameModal(false);
      setNewName('');
      setSelectedItem(null);
      loadFolderTree();
    } catch (error) {
      console.error('Failed to rename:', error);
      alert('Failed to rename');
    }
  };

  const handleMove = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newName.trim() || !selectedItem || !workspace?.folder_path) return;

    const sourcePath = `${workspace.folder_path}/${selectedItem.path}`;
    const destPath = `${workspace.folder_path}/${newName}`;

    try {
      await (window as any).electronAPI.moveFile(sourcePath, destPath);
      setShowMoveModal(false);
      setNewName('');
      setSelectedItem(null);
      loadFolderTree();
    } catch (error) {
      console.error('Failed to move:', error);
      alert('Failed to move');
    }
  };

  const handleCopy = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newName.trim() || !selectedItem || !workspace?.folder_path) return;

    const sourcePath = `${workspace.folder_path}/${selectedItem.path}`;
    const destPath = `${workspace.folder_path}/${newName}`;

    try {
      await (window as any).electronAPI.copyFile(sourcePath, destPath);
      setShowCopyModal(false);
      setNewName('');
      setSelectedItem(null);
      loadFolderTree();
    } catch (error) {
      console.error('Failed to copy:', error);
      alert('Failed to copy');
    }
  };

  const handleDelete = async () => {
    if (!selectedItem || !workspace?.folder_path) return;

    const fullPath = `${workspace.folder_path}/${selectedItem.path}`;

    try {
      await (window as any).electronAPI.deleteFile(fullPath);
      setShowDeleteConfirm(false);
      setSelectedItem(null);
      loadFolderTree();
    } catch (error) {
      console.error('Failed to delete:', error);
      alert('Failed to delete');
    }
  };

  return {
    handleCreateFile,
    handleCreateDirectory,
    handleRename,
    handleMove,
    handleCopy,
    handleDelete,
  };
};


================================================================================
FILE: frontend/components/file-explorer/utils/fileExplorerUtils.test.ts
================================================================================

import { describe, it, expect } from 'vitest'
import { filterTreeBySearch } from './fileExplorerUtils'
import { FolderTreeNode } from '../../../src/core/types'

describe('filterTreeBySearch', () => {
  const sampleTree: FolderTreeNode[] = [
    {
      name: 'src',
      path: 'src',
      type: 'directory',
      children: [
        { name: 'App.tsx', path: 'src/App.tsx', type: 'file' },
        { name: 'index.ts', path: 'src/index.ts', type: 'file' },
        {
          name: 'components',
          path: 'src/components',
          type: 'directory',
          children: [
            { name: 'Button.tsx', path: 'src/components/Button.tsx', type: 'file' },
            { name: 'Header.ts', path: 'src/components/Header.ts', type: 'file' }
          ]
        }
      ]
    },
    { name: 'README.md', path: 'README.md', type: 'file' },
    { name: 'package.json', path: 'package.json', type: 'file' }
  ]

  it('returns all nodes when query is empty', () => {
    const result = filterTreeBySearch(sampleTree, '')
    expect(result).toEqual(sampleTree)
  })

  it('returns all nodes when query is whitespace', () => {
    const result = filterTreeBySearch(sampleTree, '   ')
    expect(result).toEqual(sampleTree)
  })

  it('filters files that match the query', () => {
    const result = filterTreeBySearch(sampleTree, 'tsx')
    expect(result).toEqual([
      {
        name: 'src',
        path: 'src',
        type: 'directory',
        children: [
          { name: 'App.tsx', path: 'src/App.tsx', type: 'file' },
          {
            name: 'components',
            path: 'src/components',
            type: 'directory',
            children: [
              { name: 'Button.tsx', path: 'src/components/Button.tsx', type: 'file' }
            ]
          }
        ]
      }
    ])
  })

  it('filters directories that match the query', () => {
    const result = filterTreeBySearch(sampleTree, 'components')
    expect(result).toEqual([
      {
        name: 'src',
        path: 'src',
        type: 'directory',
        children: [
          {
            name: 'components',
            path: 'src/components',
            type: 'directory',
            children: []
          }
        ]
      }
    ])
  })

  it('returns empty array when no matches', () => {
    const result = filterTreeBySearch(sampleTree, 'nonexistent')
    expect(result).toEqual([])
  })

  it('is case insensitive', () => {
    const result = filterTreeBySearch(sampleTree, 'README')
    expect(result).toEqual([{ name: 'README.md', path: 'README.md', type: 'file' }])
  })

  it('filters nested directories correctly', () => {
    const result = filterTreeBySearch(sampleTree, 'header')
    expect(result).toEqual([
      {
        name: 'src',
        path: 'src',
        type: 'directory',
        children: [
          {
            name: 'components',
            path: 'src/components',
            type: 'directory',
            children: [
              { name: 'Header.ts', path: 'src/components/Header.ts', type: 'file' }
            ]
          }
        ]
      }
    ])
  })

  it('includes directory if it matches the query', () => {
    const result = filterTreeBySearch(sampleTree, 'src')
    expect(result).toEqual([
      {
        name: 'src',
        path: 'src',
        type: 'directory',
        children: []
      }
    ])
  })
})


================================================================================
FILE: frontend/components/file-explorer/utils/fileExplorerUtils.ts
================================================================================

import { FolderTreeNode } from '../../core/types.js';

export const filterTreeBySearch = (nodes: FolderTreeNode[], query: string): FolderTreeNode[] => {
  if (!query.trim()) return nodes;

  const lowerQuery = query.toLowerCase();

  return nodes.reduce((filtered: FolderTreeNode[], node) => {
    const matchesName = node.name.toLowerCase().includes(lowerQuery);

    if (node.type === 'directory' && node.children) {
      const filteredChildren = filterTreeBySearch(node.children, query);
      if (matchesName || filteredChildren.length > 0) {
        filtered.push({
          ...node,
          children: filteredChildren
        });
      }
    } else if (matchesName) {
      filtered.push(node);
    }

    return filtered;
  }, []);
};


================================================================================
FILE: frontend/components/knowledge-graph/AssociatedFiles.tsx
================================================================================

import React, { useEffect, useState } from 'react';
import { ApiService } from '../../src/core/api';

interface AssociatedFile {
  concept_file_id: string;
  file_id: number;
  workspace_id: number;
  snippet?: string;
  relevance_score?: number;
  last_accessed_at?: string;
}

interface AssociatedFilesProps {
  conceptId: string;
  onFileClick?: (fileId: number) => void;
}

export const AssociatedFiles: React.FC<AssociatedFilesProps> = ({
  conceptId,
  onFileClick,
}) => {
  const [files, setFiles] = useState<AssociatedFile[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    if (conceptId) {
      loadAssociatedFiles();
    }
  }, [conceptId]);

  const loadAssociatedFiles = async () => {
    try {
      setLoading(true);
      const response = await ApiService.get(`/knowledge-graph/concepts/${conceptId}/files`);
      setFiles(response.files || []);
      setError(null);
    } catch (err) {
      setError('Failed to load associated files');
      console.error('Error loading files:', err);
    } finally {
      setLoading(false);
    }
  };

  const getRelevanceColor = (score?: number): string => {
    if (!score) return 'text-gray-400';
    if (score >= 0.8) return 'text-green-600';
    if (score >= 0.6) return 'text-blue-600';
    if (score >= 0.4) return 'text-yellow-600';
    return 'text-red-600';
  };

  const formatLastAccessed = (dateString?: string): string => {
    if (!dateString) return 'Never';

    try {
      const date = new Date(dateString);
      const now = new Date();
      const diffTime = Math.abs(now.getTime() - date.getTime());
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

      if (diffDays === 1) return 'Today';
      if (diffDays === 2) return 'Yesterday';
      if (diffDays <= 7) return `${diffDays - 1} days ago`;
      if (diffDays <= 30) return `${Math.ceil(diffDays / 7)} weeks ago`;
      return `${Math.ceil(diffDays / 30)} months ago`;
    } catch {
      return 'Unknown';
    }
  };

  const highlightSnippet = (snippet: string, conceptId: string): React.ReactNode => {
    // Simple highlighting - in a real app, you'd get the concept name
    // For now, just return the snippet as-is
    return (
      <span className="text-sm text-gray-700 leading-relaxed">
        {snippet.length > 150 ? `${snippet.substring(0, 150)}...` : snippet}
      </span>
    );
  };

  if (!conceptId) {
    return (
      <div className="associated-files p-4">
        <h3 className="text-lg font-semibold mb-4">Associated Files</h3>
        <div className="text-gray-500 text-sm">
          Select a concept to view associated files.
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="associated-files p-4">
        <h3 className="text-lg font-semibold mb-4">Associated Files</h3>
        <div className="space-y-3">
          {[...Array(3)].map((_, i) => (
            <div key={i} className="animate-pulse">
              <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
              <div className="h-3 bg-gray-200 rounded w-full mb-1"></div>
              <div className="h-3 bg-gray-200 rounded w-1/2"></div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="associated-files p-4">
        <h3 className="text-lg font-semibold mb-4">Associated Files</h3>
        <div className="text-red-500 text-sm">
          {error}
          <button
            onClick={loadAssociatedFiles}
            className="ml-2 text-blue-500 hover:text-blue-700"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="associated-files p-4">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-semibold">Associated Files</h3>
        <div className="flex items-center gap-2">
          <span className="text-xs text-gray-500">
            {files.length} file{files.length !== 1 ? 's' : ''}
          </span>
          <button
            onClick={loadAssociatedFiles}
            className="text-sm text-gray-500 hover:text-gray-700"
            title="Refresh files"
          >
            ↻
          </button>
        </div>
      </div>

      {files.length === 0 ? (
        <div className="text-gray-500 text-sm">
          No files associated with this concept.
        </div>
      ) : (
        <div className="space-y-4 max-h-96 overflow-y-auto">
          {files
            .sort((a, b) => (b.relevance_score || 0) - (a.relevance_score || 0))
            .map((file, index) => (
              <div
                key={file.concept_file_id}
                className="border rounded-lg p-3 hover:bg-gray-50 cursor-pointer transition-colors"
                onClick={() => onFileClick?.(file.file_id)}
              >
                <div className="flex justify-between items-start mb-2">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-1">
                      <span className="text-sm font-medium text-gray-900">
                        File #{file.file_id}
                      </span>
                      {file.relevance_score && (
                        <span className={`text-xs px-2 py-1 rounded-full font-medium ${getRelevanceColor(file.relevance_score)} bg-opacity-20`}>
                          {(file.relevance_score * 100).toFixed(0)}%
                        </span>
                      )}
                    </div>
                    <div className="text-xs text-gray-500 mb-2">
                      Last accessed: {formatLastAccessed(file.last_accessed_at)}
                    </div>
                  </div>
                  <span className="text-xs text-gray-400">
                    #{index + 1}
                  </span>
                </div>

                {file.snippet && (
                  <div className="bg-gray-50 rounded p-2 border-l-2 border-blue-200">
                    <div className="text-xs text-gray-500 mb-1 font-medium">
                      Relevant snippet:
                    </div>
                    {highlightSnippet(file.snippet, conceptId)}
                  </div>
                )}

                {/* Relevance score visualization */}
                {file.relevance_score && (
                  <div className="mt-2">
                    <div className="flex justify-between text-xs text-gray-500 mb-1">
                      <span>Relevance</span>
                      <span>{(file.relevance_score * 100).toFixed(1)}%</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-1.5">
                      <div
                        className="bg-blue-500 h-1.5 rounded-full transition-all duration-300"
                        style={{ width: `${file.relevance_score * 100}%` }}
                      ></div>
                    </div>
                  </div>
                )}
              </div>
            ))}
        </div>
      )}

      {files.length > 0 && (
        <div className="mt-4 text-xs text-gray-500 border-t pt-2">
          <p>
            <strong>Relevance:</strong> Higher scores indicate stronger connections
            between the concept and file content.
          </p>
        </div>
      )}
    </div>
  );
};


================================================================================
FILE: frontend/components/knowledge-graph/KnowledgeGraph.tsx
================================================================================

import React, { useEffect, useRef, useState } from 'react';
import * as d3 from 'd3';
import { ApiService } from '../../src/core/api';

interface Node {
  id: string;
  name: string;
  description?: string;
  x?: number;
  y?: number;
}

interface Edge {
  id: string;
  source: string;
  target: string;
  type: string;
  strength?: number;
}

interface KnowledgeGraphData {
  nodes: Node[];
  edges: Edge[];
}

interface KnowledgeGraphProps {
  workspaceId: number;
  onNodeClick?: (node: Node) => void;
  onEdgeClick?: (edge: Edge) => void;
  width?: number;
  height?: number;
}

export const KnowledgeGraph: React.FC<KnowledgeGraphProps> = ({
  workspaceId,
  onNodeClick,
  onEdgeClick,
  width = 800,
  height = 600,
}) => {
  const svgRef = useRef<SVGSVGElement>(null);
  const [data, setData] = useState<KnowledgeGraphData>({ nodes: [], edges: [] });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedNode, setSelectedNode] = useState<Node | null>(null);

  useEffect(() => {
    loadGraphData();
  }, [workspaceId]);

  useEffect(() => {
    if (data.nodes.length > 0 && svgRef.current) {
      renderGraph();
    }
  }, [data, selectedNode]);

  const loadGraphData = async () => {
    try {
      setLoading(true);
      const response = await ApiService.get(`/knowledge-graph/workspaces/${workspaceId}/graph`);
      setData(response);
      setError(null);
    } catch (err) {
      setError('Failed to load knowledge graph');
      console.error('Error loading graph:', err);
    } finally {
      setLoading(false);
    }
  };

  const renderGraph = () => {
    if (!svgRef.current) return;

    const svg = d3.select(svgRef.current);
    svg.selectAll('*').remove(); // Clear previous render

    const simulation = d3.forceSimulation(data.nodes as d3.SimulationNodeDatum[])
      .force('link', d3.forceLink(data.edges)
        .id((d: any) => d.id)
        .distance((d: any) => 100 - (d.strength || 0.5) * 50)
      )
      .force('charge', d3.forceManyBody().strength(-300))
      .force('center', d3.forceCenter(width / 2, height / 2))
      .force('collision', d3.forceCollide().radius(30));

    // Create arrow markers for directed edges
    const defs = svg.append('defs');

    defs.append('marker')
      .attr('id', 'arrowhead')
      .attr('viewBox', '-0 -5 10 10')
      .attr('refX', 20)
      .attr('refY', 0)
      .attr('orient', 'auto')
      .attr('markerWidth', 6)
      .attr('markerHeight', 6)
      .attr('xoverflow', 'visible')
      .append('svg:path')
      .attr('d', 'M 0,-5 L 10 ,0 L 0,5')
      .attr('fill', '#999');

    // Create links
    const link = svg.append('g')
      .attr('class', 'links')
      .selectAll('line')
      .data(data.edges)
      .enter().append('line')
      .attr('stroke', (d) => getEdgeColor(d.type))
      .attr('stroke-opacity', 0.6)
      .attr('stroke-width', (d) => Math.sqrt(d.strength || 1) * 2)
      .attr('marker-end', 'url(#arrowhead)')
      .on('click', (event, d) => {
        event.stopPropagation();
        onEdgeClick?.(d);
      });

    // Create link labels
    const linkLabels = svg.append('g')
      .attr('class', 'link-labels')
      .selectAll('text')
      .data(data.edges)
      .enter().append('text')
      .attr('text-anchor', 'middle')
      .attr('font-size', '10px')
      .attr('fill', '#666')
      .text((d) => d.type.replace('_', ' '));

    // Create nodes
    const node = svg.append('g')
      .attr('class', 'nodes')
      .selectAll('circle')
      .data(data.nodes)
      .enter().append('circle')
      .attr('r', (d) => getNodeRadius(d))
      .attr('fill', (d) => d.id === selectedNode?.id ? '#ff6b6b' : getNodeColor(d))
      .attr('stroke', '#fff')
      .attr('stroke-width', 2)
      .call(d3.drag<SVGCircleElement, Node>()
        .on('start', (event, d) => {
          if (!event.active) simulation.alphaTarget(0.3).restart();
          (d as any).fx = (d as any).x;
          (d as any).fy = (d as any).y;
        })
        .on('drag', (event, d) => {
          (d as any).fx = event.x;
          (d as any).fy = event.y;
        })
        .on('end', (event, d) => {
          if (!event.active) simulation.alphaTarget(0);
          (d as any).fx = null;
          (d as any).fy = null;
        })
      )
      .on('click', (event, d) => {
        event.stopPropagation();
        setSelectedNode(d);
        onNodeClick?.(d);
      })
      .on('dblclick', (event, d) => {
        // Expand node connections
        expandNode(d);
      });

    // Create node labels
    const nodeLabels = svg.append('g')
      .attr('class', 'node-labels')
      .selectAll('text')
      .data(data.nodes)
      .enter().append('text')
      .attr('text-anchor', 'middle')
      .attr('font-size', '12px')
      .attr('font-weight', 'bold')
      .attr('fill', '#333')
      .attr('dy', -25)
      .text((d) => truncateText(d.name, 15));

    // Update positions on simulation tick
    simulation.on('tick', () => {
      link
        .attr('x1', (d: any) => d.source.x)
        .attr('y1', (d: any) => d.source.y)
        .attr('x2', (d: any) => d.target.x)
        .attr('y2', (d: any) => d.target.y);

      linkLabels
        .attr('x', (d: any) => (d.source.x + d.target.x) / 2)
        .attr('y', (d: any) => (d.source.y + d.target.y) / 2);

      node
        .attr('cx', (d: any) => d.x)
        .attr('cy', (d: any) => d.y);

      nodeLabels
        .attr('x', (d: any) => d.x)
        .attr('y', (d: any) => d.y);
    });

    // Add zoom behavior
    const zoom = d3.zoom<SVGSVGElement, unknown>()
      .scaleExtent([0.1, 4])
      .on('zoom', (event) => {
        svg.select('g').attr('transform', event.transform);
      });

    svg.call(zoom);
  };

  const expandNode = async (node: Node) => {
    // Load subgraph for the selected node
    try {
      const response = await ApiService.get(`/knowledge-graph/workspaces/${workspaceId}/graph?concept_id=${node.id}&depth=3`);
      setData(response);
    } catch (err) {
      console.error('Error expanding node:', err);
    }
  };

  const getNodeColor = (node: Node): string => {
    // Color nodes based on some property (could be enhanced with more logic)
    const colors = ['#4ecdc4', '#45b7d1', '#96ceb4', '#feca57', '#ff9ff3', '#54a0ff'];
    const hash = node.name.split('').reduce((a, b) => {
      a = ((a << 5) - a) + b.charCodeAt(0);
      return a & a;
    }, 0);
    return colors[Math.abs(hash) % colors.length];
  };

  const getNodeRadius = (node: Node): number => {
    // Size nodes based on connectivity
    const connections = data.edges.filter(e => e.source === node.id || e.target === node.id).length;
    return Math.max(8, Math.min(20, 8 + connections * 2));
  };

  const getEdgeColor = (type: string): string => {
    const colorMap: { [key: string]: string } = {
      'relates_to': '#666',
      'dives_deep_to': '#e74c3c',
      'has_type': '#27ae60',
      'uses': '#f39c12',
    };
    return colorMap[type] || '#999';
  };

  const truncateText = (text: string, maxLength: number): string => {
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
        <span className="ml-2">Loading knowledge graph...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center h-64 text-red-500">
        <span>{error}</span>
        <button
          onClick={loadGraphData}
          className="ml-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          Retry
        </button>
      </div>
    );
  }

  return (
    <div className="knowledge-graph-container">
      <div className="mb-4 flex justify-between items-center">
        <h3 className="text-lg font-semibold">Knowledge Graph</h3>
        <div className="flex gap-2">
          <button
            onClick={loadGraphData}
            className="px-3 py-1 bg-gray-500 text-white rounded text-sm hover:bg-gray-600"
          >
            Refresh
          </button>
          <button
            onClick={() => setData({ nodes: [], edges: [] })}
            className="px-3 py-1 bg-red-500 text-white rounded text-sm hover:bg-red-600"
          >
            Clear
          </button>
        </div>
      </div>

      <div className="border rounded-lg overflow-hidden">
        <svg
          ref={svgRef}
          width={width}
          height={height}
          className="bg-gray-50"
        />
      </div>

      <div className="mt-4 text-sm text-gray-600">
        <p><strong>Instructions:</strong></p>
        <ul className="list-disc list-inside mt-1">
          <li>Click nodes to select and view details</li>
          <li>Double-click nodes to expand their connections</li>
          <li>Drag nodes to reposition them</li>
          <li>Scroll to zoom in/out</li>
        </ul>
      </div>
    </div>
  );
};


================================================================================
FILE: frontend/components/knowledge-graph/SuggestedTopics.tsx
================================================================================

import React, { useEffect, useState } from 'react';
import { ApiService } from '../../src/core/api';

interface SuggestedTopic {
  concept_id: string;
  name: string;
  relevance_score: number;
  description?: string;
  score_breakdown?: {
    frequency: number;
    recency: number;
    semantic: number;
  };
}

interface SuggestedTopicsProps {
  workspaceId: number;
  onTopicClick?: (topic: SuggestedTopic) => void;
  limit?: number;
}

export const SuggestedTopics: React.FC<SuggestedTopicsProps> = ({
  workspaceId,
  onTopicClick,
  limit = 10,
}) => {
  const [topics, setTopics] = useState<SuggestedTopic[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadSuggestedTopics();
  }, [workspaceId, limit]);

  const loadSuggestedTopics = async () => {
    try {
      setLoading(true);
      const response = await ApiService.get(
        `/knowledge-graph/workspaces/${workspaceId}/suggested-topics?limit=${limit}`
      );
      setTopics(response.topics || []);
      setError(null);
    } catch (err) {
      setError('Failed to load suggested topics');
      console.error('Error loading topics:', err);
    } finally {
      setLoading(false);
    }
  };

  const getScoreColor = (score: number): string => {
    if (score >= 0.8) return 'text-green-600 bg-green-50';
    if (score >= 0.6) return 'text-blue-600 bg-blue-50';
    if (score >= 0.4) return 'text-yellow-600 bg-yellow-50';
    return 'text-red-600 bg-red-50';
  };

  const getScoreBarWidth = (score: number): string => {
    return `${Math.max(10, score * 100)}%`;
  };

  if (loading) {
    return (
      <div className="suggested-topics p-4">
        <h3 className="text-lg font-semibold mb-4">Suggested Topics</h3>
        <div className="space-y-2">
          {[...Array(5)].map((_, i) => (
            <div key={i} className="animate-pulse">
              <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
              <div className="h-3 bg-gray-200 rounded w-1/2"></div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="suggested-topics p-4">
        <h3 className="text-lg font-semibold mb-4">Suggested Topics</h3>
        <div className="text-red-500 text-sm">
          {error}
          <button
            onClick={loadSuggestedTopics}
            className="ml-2 text-blue-500 hover:text-blue-700"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="suggested-topics p-4">
      <div className="flex justify-between items-center mb-4">
        <h3 className="text-lg font-semibold">Suggested Topics</h3>
        <button
          onClick={loadSuggestedTopics}
          className="text-sm text-gray-500 hover:text-gray-700"
          title="Refresh topics"
        >
          ↻
        </button>
      </div>

      {topics.length === 0 ? (
        <div className="text-gray-500 text-sm">
          No topics available. Try analyzing your workspace first.
        </div>
      ) : (
        <div className="space-y-3 max-h-96 overflow-y-auto">
          {topics.map((topic, index) => (
            <div
              key={topic.concept_id}
              className="border rounded-lg p-3 hover:bg-gray-50 cursor-pointer transition-colors"
              onClick={() => onTopicClick?.(topic)}
            >
              <div className="flex justify-between items-start mb-2">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-1">
                    <span className="text-sm font-medium text-gray-900">
                      {topic.name}
                    </span>
                    <span className={`text-xs px-2 py-1 rounded-full font-medium ${getScoreColor(topic.relevance_score)}`}>
                      {(topic.relevance_score * 100).toFixed(0)}%
                    </span>
                  </div>
                  {topic.description && (
                    <p className="text-xs text-gray-600 line-clamp-2">
                      {topic.description}
                    </p>
                  )}
                </div>
                <span className="text-xs text-gray-400 ml-2">
                  #{index + 1}
                </span>
              </div>

              {/* Score breakdown visualization */}
              {topic.score_breakdown && (
                <div className="space-y-1">
                  <div className="flex justify-between text-xs text-gray-500">
                    <span>Relevance Breakdown</span>
                  </div>
                  <div className="space-y-1">
                    <div className="flex items-center gap-2">
                      <span className="text-xs text-gray-500 w-12">Freq</span>
                      <div className="flex-1 bg-gray-200 rounded-full h-1.5">
                        <div
                          className="bg-blue-500 h-1.5 rounded-full"
                          style={{ width: getScoreBarWidth(topic.score_breakdown.frequency) }}
                        ></div>
                      </div>
                      <span className="text-xs text-gray-500 w-8">
                        {(topic.score_breakdown.frequency * 100).toFixed(0)}%
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-xs text-gray-500 w-12">Rec</span>
                      <div className="flex-1 bg-gray-200 rounded-full h-1.5">
                        <div
                          className="bg-green-500 h-1.5 rounded-full"
                          style={{ width: getScoreBarWidth(topic.score_breakdown.recency) }}
                        ></div>
                      </div>
                      <span className="text-xs text-gray-500 w-8">
                        {(topic.score_breakdown.recency * 100).toFixed(0)}%
                      </span>
                    </div>
                    <div className="flex items-center gap-2">
                      <span className="text-xs text-gray-500 w-12">Sem</span>
                      <div className="flex-1 bg-gray-200 rounded-full h-1.5">
                        <div
                          className="bg-purple-500 h-1.5 rounded-full"
                          style={{ width: getScoreBarWidth(topic.score_breakdown.semantic) }}
                        ></div>
                      </div>
                      <span className="text-xs text-gray-500 w-8">
                        {(topic.score_breakdown.semantic * 100).toFixed(0)}%
                      </span>
                    </div>
                  </div>
                </div>
              )}

              {/* Overall score bar */}
              <div className="mt-2">
                <div className="flex justify-between text-xs text-gray-500 mb-1">
                  <span>Overall Relevance</span>
                  <span>{(topic.relevance_score * 100).toFixed(1)}%</span>
                </div>
                <div className="w-full bg-gray-200 rounded-full h-2">
                  <div
                    className="bg-gradient-to-r from-blue-500 to-green-500 h-2 rounded-full transition-all duration-300"
                    style={{ width: getScoreBarWidth(topic.relevance_score) }}
                  ></div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {topics.length > 0 && (
        <div className="mt-4 text-xs text-gray-500 border-t pt-2">
          <p>
            <strong>Scoring:</strong> Topics are ranked by frequency (how often mentioned),
            recency (recent activity), and semantic relevance (concept relationships).
          </p>
        </div>
      )}
    </div>
  );
};


================================================================================
FILE: frontend/components/knowledge-graph/index.ts
================================================================================

export { KnowledgeGraph } from './KnowledgeGraph';
export { SuggestedTopics } from './SuggestedTopics';
export { AssociatedFiles } from './AssociatedFiles';


================================================================================
FILE: frontend/components/progress/Progress.tsx
================================================================================

import React, { useState, useEffect } from 'react';
import { API_BASE } from '../../src/core/api';
import { WorkspaceStats } from '../../src/core/types';

interface ProgressProps {
  currentWorkspaceId: number | null;
}

const Progress: React.FC<ProgressProps> = ({ currentWorkspaceId }) => {
  const [stats, setStats] = useState<WorkspaceStats | null>(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    if (currentWorkspaceId) {
      loadProgress();
    } else {
      setStats(null);
    }
  }, [currentWorkspaceId]);

  const loadProgress = async () => {
    if (!currentWorkspaceId) return;

    setLoading(true);
    try {
      const response = await fetch(`${API_BASE}/workspaces/${currentWorkspaceId}/stats`);
      if (response.ok) {
        const stats = await response.json();
        setStats(stats);
      } else {
        console.error('Failed to load progress:', response.status);
        setStats(null);
      }
    } catch (error) {
      console.error('Failed to load progress:', error);
      setStats(null);
    } finally {
      setLoading(false);
    }
  };

  const calculateProgressPercentage = (stats: WorkspaceStats): number => {
    const totalActivities = (stats.total_files || 0) + (stats.quizzes_taken || 0);
    const maxActivities = Math.max((stats.total_quizzes || 0) * 2, 10);
    return Math.min((totalActivities / maxActivities) * 100, 100);
  };

  if (loading) {
    return (
      <div id="progress-tab" className="tab-content active">
        <div className="progress-header">
          <h2>Your Progress</h2>
        </div>
        <div className="progress-container">
          <div className="loading">Loading progress...</div>
        </div>
      </div>
    );
  }

  if (!stats) {
    return (
      <div id="progress-tab" className="tab-content active">
        <div className="progress-header">
          <h2>Your Progress</h2>
        </div>
        <div className="progress-container">
          <div className="empty-progress">
            <h4>No Progress Data Available</h4>
            <p>Select a workspace and start creating files or taking quizzes to see your progress here.</p>
            <div className="progress-placeholder">
              <div className="stat-card">
                <h4>Total Files</h4>
                <p>0</p>
              </div>
              <div className="stat-card">
                <h4>Quizzes Taken</h4>
                <p>0</p>
              </div>
              <div className="stat-card">
                <h4>Average Score</h4>
                <p>0%</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  const progressPercentage = calculateProgressPercentage(stats);

  return (
    <div id="progress-tab" className="tab-content active">
      <div className="progress-header">
        <h2>Your Progress</h2>
      </div>
      <div className="progress-container">
        <div className="progress-stats">
          <div className="stat-card">
            <h4>Total Files</h4>
            <p>{stats.total_files || 0}</p>
          </div>
          <div className="stat-card">
            <h4>Quizzes Taken</h4>
            <p>{stats.quizzes_taken || 0}</p>
          </div>
          <div className="stat-card">
            <h4>Average Score</h4>
            <p>{stats.average_score || 0}%</p>
          </div>
          <div className="stat-card">
            <h4>Total Quizzes Available</h4>
            <p>{stats.total_quizzes || 0}</p>
          </div>
        </div>

        <div className="progress-chart">
          <h4>Learning Progress</h4>
          <div className="progress-bar">
            <div className="progress-fill" style={{ width: `${progressPercentage}%` }}></div>
          </div>
          <p className="progress-text">{progressPercentage.toFixed(1)}% Complete</p>
        </div>

        <div className="recent-activity">
          <h4>Recent Activity</h4>
          <div className="activity-list">
            <div className="activity-item">
              <span className="activity-icon">📝</span>
              <span className="activity-text">Files created: {stats.total_files || 0}</span>
            </div>
            <div className="activity-item">
              <span className="activity-icon">🧠</span>
              <span className="activity-text">Quizzes completed: {stats.quizzes_taken || 0}</span>
            </div>
            <div className="activity-item">
              <span className="activity-icon">📊</span>
              <span className="activity-text">Average performance: {stats.average_score || 0}%</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Progress;


================================================================================
FILE: frontend/components/quiz/Quiz.tsx
================================================================================

import React, { useState, useEffect } from 'react';
import { API_BASE } from '../../src/core/api';
import { Quiz as QuizType } from '../../src/core/types';

interface QuizProps {
  currentWorkspaceId: number | null;
}

const Quiz: React.FC<QuizProps> = ({ currentWorkspaceId }) => {
  const [quiz, setQuiz] = useState<QuizType | null>(null);
  const [loading, setLoading] = useState(false);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [showResult, setShowResult] = useState(false);

  const generateQuiz = async () => {
    if (!currentWorkspaceId) {
      alert('Please select a workspace first');
      return;
    }

    setLoading(true);
    try {
      const response = await fetch(`${API_BASE}/workspaces/${currentWorkspaceId}/quiz/generate`, {
        method: 'POST'
      });

      if (response.ok) {
        const quizData = await response.json();
        setQuiz(quizData);
        setSelectedAnswer(null);
        setShowResult(false);
      } else {
        const error = await response.text();
        console.error('Failed to generate quiz:', error);
        alert(`Failed to generate quiz: ${error}`);
      }
    } catch (error) {
      console.error('Failed to generate quiz:', error);
      alert('Failed to generate quiz');
    } finally {
      setLoading(false);
    }
  };

  const submitAnswer = async (answerIndex: number) => {
    if (!quiz) return;

    setSelectedAnswer(answerIndex);
    setShowResult(true);

    // TODO: Implement proper answer submission to backend
    // For now, just show feedback
    const isCorrect = answerIndex === quiz.correct_answer;
    alert(isCorrect ? 'Correct!' : 'Incorrect. Try again!');
  };

  const resetQuiz = () => {
    setQuiz(null);
    setSelectedAnswer(null);
    setShowResult(false);
  };

    return (
    <div id="quiz-tab" className="tab-content active">
      <div className="quiz-header">
        <h2>Quiz Time</h2>
        <button
          className="btn-primary"
          onClick={generateQuiz}
          disabled={loading || !currentWorkspaceId}
        >
          {loading ? 'Generating...' : 'Generate Quiz'}
        </button>
      </div>
      <div className="quiz-container">
        {quiz ? (
          <div className="quiz-question">
            <h3>{quiz.question}</h3>
            <div className="quiz-options">
              {quiz.options.map((option: string, index: number) => (
                <button
                  key={index}
                  className={`quiz-option ${selectedAnswer === index ? 'selected' : ''}`}
                  onClick={() => !showResult && submitAnswer(index)}
                  disabled={showResult}
                >
                  {option}
                </button>
              ))}
            </div>
            {showResult && (
              <div className="quiz-result">
                <p>
                  {selectedAnswer === quiz.correct_answer
                    ? '✅ Correct!'
                    : `❌ Incorrect. The correct answer is: ${quiz.options[quiz.correct_answer]}`
                  }
                </p>
                <button className="btn-secondary" onClick={resetQuiz}>
                  Try Another Quiz
                </button>
              </div>
            )}
          </div>
        ) : (
          <div className="quiz-placeholder">
            <h3>Ready to test your knowledge?</h3>
            <p>Generate a quiz based on your workspace files to reinforce your learning.</p>
            {!currentWorkspaceId && (
              <p className="warning">Please select a workspace first.</p>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default Quiz;


================================================================================
FILE: frontend/components/settings/DeveloperSettings.tsx
================================================================================

import React, { useState, useEffect } from 'react';
import { ApiService } from '../../src/core/api';

interface EmbeddingModel {
  name: string;
  dimensions: number;
  size_mb: number;
  description: string;
  recommended: boolean;
}

interface EmbeddingStats {
  model?: string;
  total_concepts?: number;
  dimensions?: number;
  error?: string;
}

const DeveloperSettings: React.FC = () => {
  const [availableModels, setAvailableModels] = useState<Record<string, EmbeddingModel>>({});
  const [currentModel, setCurrentModel] = useState<EmbeddingModel | null>(null);
  const [stats, setStats] = useState<EmbeddingStats>({});
  const [loading, setLoading] = useState(false);
  const [switching, setSwitching] = useState(false);
  const [message, setMessage] = useState<string>('');

  useEffect(() => {
    loadEmbeddingInfo();
  }, []);

  const loadEmbeddingInfo = async () => {
    try {
      const response = await ApiService.get('/api/knowledge-graph/embeddings/models');
      setAvailableModels(response.available_models || {});
      setCurrentModel(response.current_model || null);

      // Load stats if model is active
      if (response.current_model) {
        const statsResponse = await ApiService.get('/api/knowledge-graph/embeddings/stats');
        setStats(statsResponse);
      }
    } catch (error) {
      console.error('Failed to load embedding info:', error);
      setMessage('Failed to load embedding information');
    }
  };

  const initializeModel = async (modelName: string) => {
    setLoading(true);
    setMessage('');

    try {
      const response = await ApiService.post('/api/knowledge-graph/embeddings/initialize', {
        model_name: modelName
      });

      setMessage(response.message || 'Model initialized successfully');
      await loadEmbeddingInfo();
    } catch (error: any) {
      setMessage(error.response?.data?.detail || 'Failed to initialize model');
    } finally {
      setLoading(false);
    }
  };

  const switchModel = async (newModelName: string, reembedAll: boolean = false) => {
    setSwitching(true);
    setMessage('');

    try {
      const response = await ApiService.post('/api/knowledge-graph/embeddings/switch-model', {
        new_model_name: newModelName,
        reembed_all: reembedAll
      });

      setMessage(response.message || `Successfully switched to ${newModelName}`);
      await loadEmbeddingInfo();
    } catch (error: any) {
      setMessage(error.response?.data?.detail || 'Failed to switch model');
    } finally {
      setSwitching(false);
    }
  };

  const testEmbeddingSearch = async () => {
    const query = prompt('Enter a search query:');
    if (!query) return;

    try {
      const response = await ApiService.post('/api/knowledge-graph/embeddings/search', {
        query,
        limit: 5
      });

      console.log('Search results:', response.results);
      alert(`Found ${response.results.length} similar concepts. Check console for details.`);
    } catch (error: any) {
      alert('Search failed: ' + (error.response?.data?.detail || 'Unknown error'));
    }
  };

  return (
    <div className="developer-settings">
      <h2>Developer Settings</h2>
      <p className="text-muted">Configure advanced features like embedding models for workspace analysis.</p>

      <div className="settings-section">
        <h3>Embedding Models</h3>
        <p>Configure the AI model used for semantic analysis of your workspace files.</p>

        {message && (
          <div className={`alert ${message.includes('success') ? 'alert-success' : 'alert-error'}`}>
            {message}
          </div>
        )}

        {/* Current Model Status */}
        <div className="current-model-section">
          <h4>Current Model</h4>
          {currentModel ? (
            <div className="model-info">
              <div className="model-details">
                <strong>{currentModel.name}</strong>
                <p>{currentModel.description}</p>
                <small>
                  Dimensions: {currentModel.dimensions} |
                  Size: {currentModel.size_mb}MB |
                  Concepts: {stats.total_concepts || 0}
                </small>
              </div>
              <button
                className="btn btn-secondary"
                onClick={testEmbeddingSearch}
                disabled={!currentModel}
              >
                Test Search
              </button>
            </div>
          ) : (
            <p className="text-muted">No embedding model initialized</p>
          )}
        </div>

        {/* Available Models */}
        <div className="available-models-section">
          <h4>Available Models</h4>
          <div className="models-grid">
            {Object.entries(availableModels).map(([name, model]) => (
              <div key={name} className={`model-card ${model.recommended ? 'recommended' : ''}`}>
                <div className="model-header">
                  <h5>{name}</h5>
                  {model.recommended && <span className="badge badge-primary">Recommended</span>}
                </div>
                <p>{model.description}</p>
                <div className="model-specs">
                  <small>
                    {model.dimensions} dimensions • {model.size_mb}MB
                  </small>
                </div>
                <div className="model-actions">
                  {currentModel?.name === name ? (
                    <span className="text-success">Active</span>
                  ) : (
                    <>
                      <button
                        className="btn btn-sm btn-outline"
                        onClick={() => initializeModel(name)}
                        disabled={loading}
                      >
                        {loading ? 'Initializing...' : 'Initialize'}
                      </button>
                      {currentModel && (
                        <button
                          className="btn btn-sm btn-primary"
                          onClick={() => switchModel(name, false)}
                          disabled={switching}
                        >
                          {switching ? 'Switching...' : 'Switch'}
                        </button>
                      )}
                    </>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Advanced Options */}
        {currentModel && (
          <div className="advanced-options">
            <h4>Advanced Options</h4>
            <div className="option-group">
              <button
                className="btn btn-warning"
                onClick={() => switchModel(currentModel.name, true)}
                disabled={switching}
              >
                {switching ? 'Re-embedding...' : 'Re-embed All Content'}
              </button>
              <small className="text-muted">
                Re-analyze all workspace files with the current model. This may take time.
              </small>
            </div>
          </div>
        )}
      </div>

      <style jsx>{`
        .developer-settings {
          padding: 20px;
          max-width: 800px;
        }

        .settings-section {
          margin-bottom: 30px;
          padding: 20px;
          border: 1px solid #e1e5e9;
          border-radius: 8px;
          background: white;
        }

        .current-model-section, .available-models-section {
          margin-bottom: 20px;
        }

        .model-info {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 15px;
          background: #f8f9fa;
          border-radius: 6px;
        }

        .model-details small {
          color: #6c757d;
        }

        .models-grid {
          display: grid;
          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
          gap: 15px;
          margin-top: 15px;
        }

        .model-card {
          border: 1px solid #e1e5e9;
          border-radius: 8px;
          padding: 15px;
          background: white;
        }

        .model-card.recommended {
          border-color: #007bff;
          background: #f8f9ff;
        }

        .model-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 10px;
        }

        .model-specs {
          margin: 10px 0;
        }

        .model-actions {
          display: flex;
          gap: 8px;
          align-items: center;
          margin-top: 10px;
        }

        .advanced-options {
          margin-top: 20px;
          padding-top: 20px;
          border-top: 1px solid #e1e5e9;
        }

        .option-group {
          display: flex;
          flex-direction: column;
          gap: 5px;
        }

        .alert {
          padding: 10px 15px;
          border-radius: 4px;
          margin-bottom: 15px;
        }

        .alert-success {
          background: #d4edda;
          color: #155724;
          border: 1px solid #c3e6cb;
        }

        .alert-error {
          background: #f8d7da;
          color: #721c24;
          border: 1px solid #f5c6cb;
        }

        .badge {
          padding: 2px 6px;
          border-radius: 3px;
          font-size: 0.75em;
          font-weight: bold;
        }

        .badge-primary {
          background: #007bff;
          color: white;
        }

        .text-success {
          color: #28a745;
          font-weight: bold;
        }

        .text-muted {
          color: #6c757d;
        }

        .btn {
          padding: 8px 16px;
          border: 1px solid #007bff;
          border-radius: 4px;
          background: #007bff;
          color: white;
          cursor: pointer;
          text-decoration: none;
          display: inline-block;
        }

        .btn:hover {
          background: #0056b3;
        }

        .btn:disabled {
          background: #6c757d;
          cursor: not-allowed;
        }

        .btn-secondary {
          background: #6c757d;
          border-color: #6c757d;
        }

        .btn-secondary:hover {
          background: #545b62;
        }

        .btn-outline {
          background: transparent;
          color: #007bff;
        }

        .btn-outline:hover {
          background: #007bff;
          color: white;
        }

        .btn-warning {
          background: #ffc107;
          border-color: #ffc107;
          color: #212529;
        }

        .btn-warning:hover {
          background: #e0a800;
        }

        .btn-sm {
          padding: 4px 8px;
          font-size: 0.875em;
        }
      `}</style>
    </div>
  );
};

export default DeveloperSettings;


================================================================================
FILE: frontend/components/workspaces/Workspaces.tsx
================================================================================

import React, { useState, useEffect } from 'react';
import { API_BASE } from '../../src/core/api';

interface Workspace {
  id: number;
  name: string;
  description: string;
  folder_path?: string;
  file_count?: number;
  progress_percentage?: number;
}

interface WorkspacesProps {
  showCreateModal: boolean;
  setShowCreateModal: React.Dispatch<React.SetStateAction<boolean>>;
  folderToCreate: { path: string; name: string } | null;
  setFolderToCreate: React.Dispatch<React.SetStateAction<{ path: string; name: string } | null>>;
}

const Workspaces: React.FC<WorkspacesProps> = ({ showCreateModal, setShowCreateModal, folderToCreate, setFolderToCreate }) => {
  const [workspaces, setWorkspaces] = useState<Workspace[]>([]);
  const [formData, setFormData] = useState({ name: '', description: '' });
  const [currentWorkspaceId, setCurrentWorkspaceId] = useState<number | null>(null);

  useEffect(() => {
    loadWorkspaces();
  }, []);

  // Update form data when folderToCreate changes
  useEffect(() => {
    if (folderToCreate) {
      console.log('Setting form data with folder name:', folderToCreate.name);
      setFormData({ name: folderToCreate.name, description: '' });
    }
  }, [folderToCreate]);

  // Auto-submit form when folder is selected and modal is shown
  useEffect(() => {
    if (showCreateModal && folderToCreate && formData.name) {
      console.log('Auto-submitting form for folder:', folderToCreate.name);
      // Auto-submit the form
      const form = document.getElementById('create-workspace-form') as HTMLFormElement;
      if (form) {
        form.requestSubmit();
      }
    }
  }, [showCreateModal, folderToCreate, formData.name]);



  const loadWorkspaces = async () => {
    try {
      const response = await fetch(`${API_BASE}/workspaces/`);
      const data = await response.json();
      setWorkspaces(data);
    } catch (error) {
      console.error('Failed to load workspaces:', error);
    }
  };

  const handleCreateWorkspace = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData.name.trim()) return;

    // If a folder was selected, include its path
    const workspaceData = folderToCreate
      ? { ...formData, folder_path: folderToCreate.path }
      : formData;

    try {
      const response = await fetch(`${API_BASE}/workspaces/`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(workspaceData)
      });

      if (response.ok) {
        setShowCreateModal(false);
        setFormData({ name: '', description: '' });
        setFolderToCreate(null); // Clear the folder after successful creation
        await loadWorkspaces();
      } else {
        console.error('Failed to create workspace, status:', response.status);
      }
    } catch (error) {
      console.error('Failed to create workspace - network error:', error);
    }
  };

  const handleSelectWorkspace = (id: number) => {
    setCurrentWorkspaceId(id);
    // Emit event to switch to files tab
    window.dispatchEvent(new CustomEvent('workspace-selected', { detail: { workspaceId: id } }));
  };

  const handleDeleteWorkspace = async (id: number) => {
    if (!confirm('Are you sure you want to delete this workspace?')) return;

    try {
      const response = await fetch(`${API_BASE}/workspaces/${id}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        await loadWorkspaces();
      }
    } catch (error) {
      console.error('Failed to delete workspace:', error);
    }
  };

  return (
    <div id="workspaces-tab" className="tab-content active">
      <div className="workspace-header">
        <h2>Your Workspaces</h2>
        {/* The "Create Workspace" button is now driven by the Electron menu */}
      </div>
      <div id="workspaces-grid" className="workspace-grid">
        {workspaces.map(workspace => (
          <div key={workspace.id} className="workspace-card">
            <div className="workspace-header">
              <h3>
                {workspace.name}
                {workspace.folder_path && (
                  <span className="folder-indicator" title="Linked to folder">📁</span>
                )}
              </h3>
            </div>
            <p>{workspace.description || 'No description'}</p>
            <div className="workspace-stats">
              <span>Files: {workspace.file_count || 0}</span>
              <span>Progress: {workspace.progress_percentage || 0}%</span>
            </div>
            <div className="workspace-actions">
              <button className="btn-secondary" onClick={() => handleSelectWorkspace(workspace.id)}>
                Open
              </button>
              <button className="btn-danger" onClick={() => handleDeleteWorkspace(workspace.id)}>
                Delete
              </button>
            </div>
          </div>
        ))}
      </div>

      {showCreateModal && (() => {
        console.log('Modal should be visible, showCreateModal:', showCreateModal, 'folderToCreate:', folderToCreate);
        return (
          <div id="create-workspace-modal" className="modal">
            <div className="modal-content">
              <h3>Create New Workspace</h3>
              <form id="create-workspace-form" onSubmit={handleCreateWorkspace}>
                <input
                  type="text"
                  id="workspace-name"
                  placeholder="Workspace Name"
                  required
                  value={formData.name}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                />
                <textarea
                  id="workspace-description"
                  placeholder="Description (optional)"
                  value={formData.description}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                />
                <div className="modal-actions">
                  <button type="button" id="cancel-create" className="btn-secondary" onClick={() => {
                    setShowCreateModal(false);
                    setFormData({ name: '', description: '' });
                    setFolderToCreate(null); // Clear the folder when canceling
                  }}>
                    Cancel
                  </button>
                  <button type="submit" className="btn-primary">Create</button>
                </div>
              </form>
            </div>
          </div>
        );
      })()}
    </div>
  );
};

export default Workspaces;


================================================================================
FILE: frontend/index.html
================================================================================

<!doctype html>
<html>
  <head>
    <meta charset="UTF-8" />
    <!-- https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP -->
    <meta
      http-equiv="Content-Security-Policy"
      content="default-src 'self' 'unsafe-inline' data: https: http://127.0.0.1:8000 http://127.0.0.1:3000 http://127.0.0.1:3001 http://127.0.0.1:3002 http://127.0.0.1:3003 http://127.0.0.1:3004 http://127.0.0.1:3005 http://127.0.0.1:3006 http://127.0.0.1:3007 http://127.0.0.1:3008 http://127.0.0.1:3009 http://127.0.0.1:3010 blob: app://*; script-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com blob: app://*; style-src 'self' 'unsafe-inline' https://cdnjs.cloudflare.com https://fonts.googleapis.com app://*; connect-src 'self' http://localhost:3000 http://127.0.0.1:8000 http://127.0.0.1:8001 http://127.0.0.1:8002 http://127.0.0.1:3000 http://127.0.0.1:3001 http://127.0.0.1:3002 http://127.0.0.1:3003 http://127.0.0.1:3004 http://127.0.0.1:3005 http://127.0.0.1:3006 http://127.0.0.1:3007 http://127.0.0.1:3008 http://127.0.0.1:3009 http://127.0.0.1:3010 https://cdnjs.cloudflare.com app://*; img-src 'self' data: https: http://127.0.0.1:8000 http://127.0.0.1:3000 http://127.0.0.1:3001 http://127.0.0.1:3002 http://127.0.0.1:3003 http://127.0.0.1:3004 http://127.0.0.1:3005 http://127.0.0.1:3006 http://127.0.0.1:3007 http://127.0.0.1:3008 http://127.0.0.1:3009 http://127.0.0.1:3010 app://*; font-src 'self' https: data: app://*; worker-src 'self' blob: https://cdnjs.cloudflare.com app://*; media-src 'self' data: https: http://127.0.0.1:8000 http://127.0.0.1:3000 http://127.0.0.1:3001 http://127.0.0.1:3002 http://127.0.0.1:3003 http://127.0.0.1:3004 http://127.0.0.1:3005 http://127.0.0.1:3006 http://127.0.0.1:3007 http://127.0.0.1:3008 http://127.0.0.1:3009 http://127.0.0.1:3010 blob: app://*;"
    />
    <title>Recall - Study App</title>

    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs/editor/editor.main.css"
      rel="stylesheet"
    />
    <link href="./style.css" rel="stylesheet" />
  </head>
  <body>
    <div id="app">
      <!-- Main Content -->
      <main id="main">
        <!-- Include component templates -->
        <div id="workspaces-container"></div>
        <div id="files-container"></div>
        <div id="quiz-container"></div>
        <div id="progress-container"></div>
      </main>
    </div>

    <!-- Modals container -->
    <div id="modals-container"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs/loader.min.js"></script>
    <script type="module" src="./src/index.tsx"></script>
  </body>
</html>


================================================================================
FILE: frontend/src/App.tsx
================================================================================

/// <reference types="../../electron/preload" />
import React, { useState, useEffect } from 'react';
import Workspaces from '../components/workspaces/Workspaces';
// Import migrated components
import FileExplorer from '../components/file-explorer/FileExplorer';
import Quiz from '../components/quiz/Quiz';
import Progress from '../components/progress/Progress';
import { KnowledgeGraph } from '../components/knowledge-graph/KnowledgeGraph';
import DeveloperSettings from '../components/settings/DeveloperSettings';
import { ThemeProvider, useTheme } from './core/ThemeContext';

const AppContent: React.FC = () => {
  const { toggleTheme } = useTheme();
  const [currentTab, setCurrentTab] = useState('workspaces');
  const [currentWorkspaceId, setCurrentWorkspaceId] = useState<number | null>(null);
  const [showCreateWorkspaceModal, setShowCreateWorkspaceModal] = useState(false);
  const [folderToCreateWorkspace, setFolderToCreateWorkspace] = useState<{ path: string, name: string } | null>(null);

  useEffect(() => {
    // Listen for tab switching events
    const handleShowTab = (e: any) => {
      setCurrentTab(e.detail.tab);
    };

    // Listen for workspace selection events
    const handleWorkspaceSelected = (e: any) => {
      setCurrentWorkspaceId(e.detail.workspaceId);
      setCurrentTab('files'); // Switch to files tab
    };

    // Listen for Electron menu events
    if (window.menuEvents) {
      window.menuEvents.on('menu-create-workspace', () => {
        setShowCreateWorkspaceModal(true);
      });
      window.menuEvents.on('menu-show-workspaces', () => setCurrentTab('workspaces'));
      window.menuEvents.on('menu-show-files', () => setCurrentTab('files'));
      window.menuEvents.on('menu-show-knowledge-graph', () => setCurrentTab('knowledge-graph'));
      window.menuEvents.on('menu-show-quiz', () => setCurrentTab('quiz'));
      window.menuEvents.on('menu-show-progress', () => setCurrentTab('progress'));
      window.menuEvents.on('menu-show-settings', () => setCurrentTab('settings'));
      window.menuEvents.on('menu-toggle-theme', () => {
        // Toggle theme using our centralized theme system
        toggleTheme();
      });
      window.menuEvents.on('folder-selected', (folderInfo: { path: string, name: string }) => {
        console.log('Folder selected:', folderInfo);
        setFolderToCreateWorkspace(folderInfo);
        setCurrentTab('workspaces'); // Switch to workspaces tab to show creation
        setShowCreateWorkspaceModal(true); // Automatically show create modal
        console.log('Modal should now be visible');
      });
    }


    window.addEventListener('show-tab', handleShowTab);
    window.addEventListener('workspace-selected', handleWorkspaceSelected);

    return () => {
      window.removeEventListener('show-tab', handleShowTab);
      window.removeEventListener('workspace-selected', handleWorkspaceSelected);
      if (window.menuEvents) {
        window.menuEvents.off('menu-create-workspace', () => {
          setShowCreateWorkspaceModal(true);
        });
        window.menuEvents.off('menu-show-workspaces', () => setCurrentTab('workspaces'));
        window.menuEvents.off('menu-show-files', () => setCurrentTab('files'));
        window.menuEvents.off('menu-show-knowledge-graph', () => setCurrentTab('knowledge-graph'));
        window.menuEvents.off('menu-show-quiz', () => setCurrentTab('quiz'));
        window.menuEvents.off('menu-show-progress', () => setCurrentTab('progress'));
        window.menuEvents.off('menu-show-settings', () => setCurrentTab('settings'));
        window.menuEvents.off('menu-toggle-theme', () => {
          toggleTheme();
        });
        window.menuEvents.off('folder-selected', (folderInfo: { path: string, name: string }) => {
          console.log('Folder selected:', folderInfo);
        });
      }
    };
  }, [toggleTheme]);

  const renderTabContent = () => {
    switch (currentTab) {
      case 'workspaces':
        return <Workspaces
          showCreateModal={showCreateWorkspaceModal}
          setShowCreateModal={setShowCreateWorkspaceModal}
          folderToCreate={folderToCreateWorkspace}
          setFolderToCreate={setFolderToCreateWorkspace}
        />;
      case 'files':
        return <FileExplorer currentWorkspaceId={currentWorkspaceId} />;
      case 'knowledge-graph':
        return currentWorkspaceId ? <KnowledgeGraph workspaceId={currentWorkspaceId} /> : <div>Please select a workspace first</div>;
      case 'quiz':
        return <Quiz currentWorkspaceId={currentWorkspaceId} />;
      case 'progress':
        return <Progress currentWorkspaceId={currentWorkspaceId} />;
      case 'settings':
        return <DeveloperSettings />;
      default:
        return <Workspaces
          showCreateModal={showCreateWorkspaceModal}
          setShowCreateModal={setShowCreateWorkspaceModal}
          folderToCreate={folderToCreateWorkspace}
          setFolderToCreate={setFolderToCreateWorkspace}
        />;
    }
  };

  return (
    <div id="app">
      {/* Main Content */}
      <main id="main">
        {renderTabContent()}
      </main>

      {/* Modals container */}
      <div id="modals-container"></div>
    </div>
  );
};

const App: React.FC = () => {
  return (
    <ThemeProvider>
      <AppContent />
    </ThemeProvider>
  );
};

export default App;


================================================================================
FILE: frontend/src/core/ThemeContext.tsx
================================================================================

import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';

export type Theme = 'light' | 'dark' | 'system';

interface ThemeContextType {
  theme: Theme;
  isDark: boolean;
  setTheme: (theme: Theme) => void;
  toggleTheme: () => void;
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

interface ThemeProviderProps {
  children: ReactNode;
}

export const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {
  const [theme, setThemeState] = useState<Theme>('system');
  const [isDark, setIsDark] = useState(false);

  // Load theme from localStorage on mount
  useEffect(() => {
    try {
      const savedTheme = localStorage.getItem('theme') as Theme;
      if (savedTheme && ['light', 'dark', 'system'].includes(savedTheme)) {
        setThemeState(savedTheme);
      }
    } catch (error) {
      // localStorage not available (e.g., in Electron context)
      console.warn('localStorage not available, using default theme');
    }
  }, []);

  // Update isDark based on theme and system preference
  useEffect(() => {
    const updateIsDark = () => {
      if (theme === 'system') {
        // Check system preference
        const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        setIsDark(systemPrefersDark);
      } else {
        setIsDark(theme === 'dark');
      }
    };

    updateIsDark();

    // Listen for system theme changes when theme is 'system'
    if (theme === 'system') {
      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      const handleChange = () => updateIsDark();
      mediaQuery.addEventListener('change', handleChange);
      return () => mediaQuery.removeEventListener('change', handleChange);
    }
  }, [theme]);

  // Apply theme to document body
  useEffect(() => {
    const body = document.body;
    if (isDark) {
      body.classList.add('dark-mode');
      body.classList.remove('light-mode');
    } else {
      body.classList.add('light-mode');
      body.classList.remove('dark-mode');
    }
  }, [isDark]);

  const setTheme = (newTheme: Theme) => {
    setThemeState(newTheme);
    try {
      localStorage.setItem('theme', newTheme);
    } catch (error) {
      // localStorage not available
      console.warn('Could not save theme to localStorage');
    }
  };

  const toggleTheme = () => {
    if (theme === 'light') {
      setTheme('dark');
    } else if (theme === 'dark') {
      setTheme('system');
    } else {
      setTheme('light');
    }
  };

  const value: ThemeContextType = {
    theme,
    isDark,
    setTheme,
    toggleTheme,
  };

  return (
    <ThemeContext.Provider value={value}>
      {children}
    </ThemeContext.Provider>
  );
};

export const useTheme = (): ThemeContextType => {
  const context = useContext(ThemeContext);
  if (context === undefined) {
    throw new Error('useTheme must be used within a ThemeProvider');
  }
  return context;
};


================================================================================
FILE: frontend/src/core/api.test.ts
================================================================================

import { describe, it, expect, vi, beforeEach } from 'vitest'
import { ApiService, API_BASE } from './api'

// Mock fetch globally
global.fetch = vi.fn()

describe('ApiService', () => {
  beforeEach(() => {
    vi.clearAllMocks()
  })

  describe('API_BASE', () => {
    it('has correct base URL', () => {
      expect(API_BASE).toBe('http://127.0.0.1:8000/api')
    })
  })

  describe('get', () => {
    it('makes GET request and returns JSON', async () => {
      const mockData = { id: 1, name: 'test' }
      ;(global.fetch as any).mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(mockData)
      })

      const result = await ApiService.get('/test')

      expect(global.fetch).toHaveBeenCalledWith(`${API_BASE}/test`)
      expect(result).toEqual(mockData)
    })

    it('throws error on failed response', async () => {
      ;(global.fetch as any).mockResolvedValueOnce({
        ok: false,
        status: 404,
        statusText: 'Not Found'
      })

      await expect(ApiService.get('/missing')).rejects.toThrow('API Error: 404 Not Found')
    })
  })

  describe('post', () => {
    it('makes POST request with data and returns JSON', async () => {
      const mockData = { id: 2, name: 'created' }
      const postData = { name: 'new item' }
      ;(global.fetch as any).mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(mockData)
      })

      const result = await ApiService.post('/create', postData)

      expect(global.fetch).toHaveBeenCalledWith(`${API_BASE}/create`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(postData)
      })
      expect(result).toEqual(mockData)
    })

    it('throws error on failed response', async () => {
      ;(global.fetch as any).mockResolvedValueOnce({
        ok: false,
        status: 500,
        statusText: 'Internal Server Error'
      })

      await expect(ApiService.post('/create', {})).rejects.toThrow('API Error: 500 Internal Server Error')
    })
  })

  describe('put', () => {
    it('makes PUT request with data and returns JSON', async () => {
      const mockData = { id: 1, name: 'updated' }
      const putData = { name: 'updated item' }
      ;(global.fetch as any).mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(mockData)
      })

      const result = await ApiService.put('/update/1', putData)

      expect(global.fetch).toHaveBeenCalledWith(`${API_BASE}/update/1`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(putData)
      })
      expect(result).toEqual(mockData)
    })

    it('throws error on failed response', async () => {
      ;(global.fetch as any).mockResolvedValueOnce({
        ok: false,
        status: 403,
        statusText: 'Forbidden'
      })

      await expect(ApiService.put('/update/1', {})).rejects.toThrow('API Error: 403 Forbidden')
    })
  })

  describe('delete', () => {
    it('makes DELETE request and returns JSON', async () => {
      const mockData = { deleted: true }
      ;(global.fetch as any).mockResolvedValueOnce({
        ok: true,
        json: () => Promise.resolve(mockData)
      })

      const result = await ApiService.delete('/delete/1')

      expect(global.fetch).toHaveBeenCalledWith(`${API_BASE}/delete/1`, {
        method: 'DELETE'
      })
      expect(result).toEqual(mockData)
    })

    it('throws error on failed response', async () => {
      ;(global.fetch as any).mockResolvedValueOnce({
        ok: false,
        status: 404,
        statusText: 'Not Found'
      })

      await expect(ApiService.delete('/delete/1')).rejects.toThrow('API Error: 404 Not Found')
    })
  })
})


================================================================================
FILE: frontend/src/core/api.ts
================================================================================

// API Base URL
export const API_BASE = 'http://127.0.0.1:8000/api';

// API utility functions
export class ApiService {
  static async get(endpoint: string): Promise<any> {
    const response = await fetch(`${API_BASE}${endpoint}`);
    if (!response.ok) {
      throw new Error(`API Error: ${response.status} ${response.statusText}`);
    }
    return response.json();
  }

  static async post(endpoint: string, data: any): Promise<any> {
    const response = await fetch(`${API_BASE}${endpoint}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    if (!response.ok) {
      throw new Error(`API Error: ${response.status} ${response.statusText}`);
    }
    return response.json();
  }

  static async put(endpoint: string, data: any): Promise<any> {
    const response = await fetch(`${API_BASE}${endpoint}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    if (!response.ok) {
      throw new Error(`API Error: ${response.status} ${response.statusText}`);
    }
    return response.json();
  }

  static async delete(endpoint: string): Promise<any> {
    const response = await fetch(`${API_BASE}${endpoint}`, {
      method: 'DELETE'
    });
    if (!response.ok) {
      throw new Error(`API Error: ${response.status} ${response.statusText}`);
    }
    return response.json();
  }
}


================================================================================
FILE: frontend/src/core/types.ts
================================================================================

// Shared TypeScript interfaces and types

export interface Workspace {
  id: number;
  name: string;
  description?: string;
  folder_path?: string;
  file_count?: number;
  progress_percentage?: number;
  created_at?: string;
  updated_at?: string;
}

export interface File {
  id: number;
  name: string;
  path: string;
  file_type: string;
  size: number;
  workspace_id: number;
  content?: string;
  created_at?: string;
  updated_at?: string;
}

export interface Quiz {
  id: number;
  question: string;
  options: string[];
  correct_answer: number;
  explanation?: string;
  workspace_id: number;
  created_at?: string;
}

export interface Progress {
  id: number;
  workspace_id: number;
  quiz_id?: number;
  score?: number;
  completed_at?: string;
}

export interface QuizResult {
  quiz_id: number;
  score: number;
  total_questions: number;
  correct_answers: number;
}

export interface WorkspaceStats {
  total_files: number;
  quizzes_taken: number;
  average_score: number;
  total_quizzes: number;
}

// Monaco Editor types
export interface MonacoEditor {
  setValue(value: string): void;
  getValue(): string;
  updateOptions(options: any): void;
  layout(): void;
}

// Tab management types
export interface Tab {
  id: number;
  name: string;
  file: File;
  isActive: boolean;
}

// Folder tree types
export interface FolderTreeNode {
  name: string;
  path: string;
  type: 'file' | 'directory';
  children?: FolderTreeNode[];
}

// Menu event types
export interface MenuEvent {
  type: string;
  data?: any;
}

// Component interfaces
export interface Component {
  initialize(): void;
  destroy(): void;
}

export interface TabComponent extends Component {
  getActiveTabId(): number | null;
  openFile(file: File): void;
  closeTab(fileId: number): void;
  switchToTab(fileId: number): void;
}

export interface EditorComponent extends Component {
  getValue(): string;
  setValue(value: string): void;
  focus(): void;
  resize(): void;
}


================================================================================
FILE: frontend/src/index.tsx
================================================================================

import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';

// Initialize the application when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  console.log('Initializing Recall application...');

  const container = document.getElementById('app');
  if (container) {
    const root = createRoot(container);
    root.render(<App />);
    console.log('Recall application initialized successfully!');
  } else {
    console.error('App container not found');
  }
});


================================================================================
FILE: frontend/src/shared/RichMarkdownRenderer.tsx
================================================================================

import React from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import rehypeHighlight from 'rehype-highlight';
import rehypeRaw from 'rehype-raw';

// Utility functions for content detection
export const isYouTubeUrl = (url: string): boolean => {
  const youtubeRegex = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/;
  return youtubeRegex.test(url);
};

export const getYouTubeVideoId = (url: string): string | null => {
  const youtubeRegex = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/;
  const match = url.match(youtubeRegex);
  return match ? match[1] : null;
};

export const isImageUrl = (url: string): boolean => {
  const imageExtensions = /\.(jpg|jpeg|png|gif|bmp|webp|svg)$/i;
  return imageExtensions.test(url);
};

export const isGifUrl = (url: string): boolean => {
  return /\.(gif)$/i.test(url);
};

// Custom components for rich content
const LinkRenderer: React.FC<{ href?: string; children?: React.ReactNode }> = ({ href, children }) => {
  if (!href) return <>{children}</>;

  // Check if it's a YouTube URL
  if (isYouTubeUrl(href)) {
    const videoId = getYouTubeVideoId(href);
    if (videoId) {
      return (
        <div className="youtube-embed">
          <iframe
            width="560"
            height="315"
            src={`https://www.youtube.com/embed/${videoId}`}
            title="YouTube video player"
            frameBorder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowFullScreen
          ></iframe>
        </div>
      );
    }
  }

  // Check if it's an image/GIF
  if (isImageUrl(href)) {
    return (
      <div className="image-embed">
        <img
          src={href}
          alt={typeof children === 'string' ? children : 'Embedded image'}
          onError={(e) => {
            console.error('Failed to load image:', href);
            e.currentTarget.style.display = 'none';
          }}
        />
      </div>
    );
  }

  // Regular link
  return (
    <a
      href={href}
      target="_blank"
      rel="noopener noreferrer"
      className="markdown-link"
    >
      {children}
    </a>
  );
};

const ImageRenderer: React.FC<{ src?: string; alt?: string }> = ({ src, alt }) => {
  if (!src) return null;

  return (
    <div className="image-embed">
      <img
        src={src}
        alt={alt || 'Embedded image'}
        onError={(e) => {
          console.error('Failed to load image:', src);
          e.currentTarget.style.display = 'none';
        }}
      />
    </div>
  );
};

const CodeBlockRenderer: React.FC<{ children?: React.ReactNode; className?: string }> = ({ children, className }) => {
  const language = className?.replace('language-', '') || '';
  return (
    <pre className={`code-block ${language ? `language-${language}` : ''}`}>
      <code className={className}>
        {children}
      </code>
    </pre>
  );
};

interface RichMarkdownRendererProps {
  content: string;
  className?: string;
}

const RichMarkdownRenderer: React.FC<RichMarkdownRendererProps> = ({ content, className = '' }) => {
  return (
    <div className={`rich-markdown ${className}`}>
      <ReactMarkdown
        remarkPlugins={[remarkGfm]}
        rehypePlugins={[rehypeHighlight, rehypeRaw]}
        components={{
          a: LinkRenderer,
          img: ImageRenderer,
          pre: CodeBlockRenderer,
          code: ({ children, className }) => {
            const isInline = !className?.includes('language-');
            return (
              <code className={isInline ? 'inline-code' : className}>
                {children}
              </code>
            );
          }
        }}
      >
        {content}
      </ReactMarkdown>
    </div>
  );
};

export default RichMarkdownRenderer;


================================================================================
FILE: frontend/src/shared/html-loader.test.ts
================================================================================

import { describe, it, expect, vi, beforeEach } from 'vitest'
import { HtmlLoader } from './html-loader'

// Mock fetch globally
global.fetch = vi.fn()

describe('HtmlLoader', () => {
  beforeEach(() => {
    vi.clearAllMocks()
    // Clear cache
    HtmlLoader['componentCache'].clear()
  })

  describe('loadComponent', () => {
    it('loads component from fetch and caches it', async () => {
      const mockHtml = '<div>Test Component</div>'
      ;(global.fetch as any).mockResolvedValueOnce({
        ok: true,
        text: () => Promise.resolve(mockHtml)
      })

      const result = await HtmlLoader.loadComponent('test')

      expect(global.fetch).toHaveBeenCalledWith('./components/test/test.html')
      expect(result).toBe(mockHtml)
    })

    it('returns cached component on second call', async () => {
      const mockHtml = '<div>Cached Component</div>'
      ;(global.fetch as any).mockResolvedValueOnce({
        ok: true,
        text: () => Promise.resolve(mockHtml)
      })

      await HtmlLoader.loadComponent('cached')
      const result = await HtmlLoader.loadComponent('cached')

      expect(global.fetch).toHaveBeenCalledTimes(1)
      expect(result).toBe(mockHtml)
    })

    it('returns error message on fetch failure', async () => {
      ;(global.fetch as any).mockResolvedValueOnce({
        ok: false,
        status: 404
      })

      const result = await HtmlLoader.loadComponent('missing')

      expect(result).toBe('<div class="error">Failed to load missing component</div>')
    })

    it('returns error message on fetch error', async () => {
      ;(global.fetch as any).mockRejectedValueOnce(new Error('Network error'))

      const result = await HtmlLoader.loadComponent('error')

      expect(result).toBe('<div class="error">Failed to load error component</div>')
    })
  })

  describe('loadAllComponents', () => {
    it('loads all components and inserts into DOM', async () => {
      const mockHtmls = ['<div>Workspaces</div>', '<div>File Explorer</div>', '<div>Quiz</div>', '<div>Progress</div>']
      mockHtmls.forEach(html => {
        ;(global.fetch as any).mockResolvedValueOnce({
          ok: true,
          text: () => Promise.resolve(html)
        })
      })

      // Mock document methods
      const mockContainers = mockHtmls.map(() => ({ innerHTML: '' } as HTMLElement))
      document.getElementById = vi.fn((id) => {
        const index = ['workspaces-container', 'file-explorer-container', 'quiz-container', 'progress-container'].indexOf(id)
        return index >= 0 ? mockContainers[index] : null
      })

      await HtmlLoader.loadAllComponents()

      expect(global.fetch).toHaveBeenCalledTimes(4)
      expect(mockContainers[0].innerHTML).toBe('<div>Workspaces</div>')
      expect(mockContainers[1].innerHTML).toBe('<div>File Explorer</div>')
      expect(mockContainers[2].innerHTML).toBe('<div>Quiz</div>')
      expect(mockContainers[3].innerHTML).toBe('<div>Progress</div>')
    })

    it('handles errors in loading components', async () => {
      ;(global.fetch as any).mockRejectedValue(new Error('Error'))

      const consoleSpy = vi.spyOn(console, 'error').mockImplementation(() => {})

      await HtmlLoader.loadAllComponents()

      expect(consoleSpy).toHaveBeenCalledTimes(4)
      expect(consoleSpy).toHaveBeenCalledWith('Error loading component workspaces:', expect.any(Error))
      consoleSpy.mockRestore()
    })
  })
})


================================================================================
FILE: frontend/src/shared/html-loader.ts
================================================================================

// HTML template loader for components
export class HtmlLoader {
  private static componentCache: Map<string, string> = new Map();

  static async loadComponent(componentName: string): Promise<string> {
    // Check cache first
    if (this.componentCache.has(componentName)) {
      return this.componentCache.get(componentName)!;
    }

    try {
      const response = await fetch(`./components/${componentName}/${componentName}.html`);
      if (!response.ok) {
        throw new Error(`Failed to load component ${componentName}: ${response.status}`);
      }
      const html = await response.text();
      this.componentCache.set(componentName, html);
      return html;
    } catch (error) {
      console.error(`Error loading component ${componentName}:`, error);
      return `<div class="error">Failed to load ${componentName} component</div>`;
    }
  }

  static async loadAllComponents(): Promise<void> {
    const components = ['workspaces', 'file-explorer', 'quiz', 'progress'];
    const loadPromises = components.map(component => this.loadComponent(component));

    try {
      const results = await Promise.all(loadPromises);

      // Insert components into DOM
      components.forEach((component, index) => {
        const container = document.getElementById(`${component}-container`);
        if (container) {
          container.innerHTML = results[index];
        }
      });

      console.log('All components loaded successfully');
    } catch (error) {
      console.error('Error loading components:', error);
    }
  }
}


================================================================================
FILE: frontend/src/shared/utils.test.ts
================================================================================

import { describe, it, expect } from 'vitest'
import {
  getFileIcon,
  getFileTypeFromName,
  formatFileSize,
  generateId,
  createElementFromHTML
} from './utils'

describe('getFileIcon', () => {
  it('returns correct icon for Python files', () => {
    expect(getFileIcon('test.py')).toBe('🐍')
  })

  it('returns correct icon for TypeScript files', () => {
    expect(getFileIcon('test.ts')).toBe('🔷')
  })

  it('returns default icon for unknown extensions', () => {
    expect(getFileIcon('test.unknown')).toBe('📄')
  })

  it('handles files without extension', () => {
    expect(getFileIcon('README')).toBe('📄')
  })
})

describe('getFileTypeFromName', () => {
  it('returns "code" for Python files', () => {
    expect(getFileTypeFromName('test.py')).toBe('code')
  })

  it('returns "markdown" for markdown files', () => {
    expect(getFileTypeFromName('test.md')).toBe('markdown')
  })

  it('returns "text" for unknown extensions', () => {
    expect(getFileTypeFromName('test.unknown')).toBe('text')
  })
})

describe('formatFileSize', () => {
  it('formats bytes correctly', () => {
    expect(formatFileSize(0)).toBe('0 Bytes')
    expect(formatFileSize(1023)).toBe('1023 Bytes')
    expect(formatFileSize(1024)).toBe('1 KB')
    expect(formatFileSize(1536)).toBe('1.5 KB')
    expect(formatFileSize(1048576)).toBe('1 MB')
  })
})

describe('generateId', () => {
  it('generates a string id', () => {
    const id = generateId()
    expect(typeof id).toBe('string')
    expect(id.length).toBeGreaterThan(0)
  })

  it('generates unique ids', () => {
    const id1 = generateId()
    const id2 = generateId()
    expect(id1).not.toBe(id2)
  })
})


describe('createElementFromHTML', () => {
  it('creates element from HTML string', () => {
    const element = createElementFromHTML('<div class="test">Hello</div>')
    expect(element.tagName).toBe('DIV')
    expect(element.className).toBe('test')
    expect(element.textContent).toBe('Hello')
  })
})


================================================================================
FILE: frontend/src/shared/utils.ts
================================================================================

// Shared utility functions

export function getFileIcon(filename: string): string {
  const ext = filename.split('.').pop()?.toLowerCase();

  const iconMap: { [key: string]: string } = {
    'py': '🐍',
    'js': '🟨',
    'ts': '🔷',
    'html': '🌐',
    'css': '🎨',
    'json': '📋',
    'md': '📝',
    'markdown': '📝',
    'txt': '📄',
    'pdf': '📕',
    'jpg': '🖼️',
    'jpeg': '🖼️',
    'png': '🖼️',
    'gif': '🖼️',
    'xml': '📄',
  };

  return iconMap[ext || ''] || '📄';
}

export function getFileTypeFromName(filename: string): string {
  const ext = filename.split('.').pop()?.toLowerCase();
  const typeMap: { [key: string]: string } = {
    'py': 'code',
    'js': 'code',
    'ts': 'code',
    'html': 'code',
    'css': 'code',
    'json': 'code',
    'xml': 'code',
    'md': 'markdown',
    'markdown': 'markdown',
    'txt': 'text',
    'pdf': 'pdf',
    'jpg': 'image',
    'jpeg': 'image',
    'png': 'image',
    'gif': 'image'
  };
  return typeMap[ext || ''] || 'text';
}

export function getDefaultContentForFile(filename: string): string {
  const ext = filename.split('.').pop()?.toLowerCase();

  const templates: { [key: string]: string } = {
    'py': '# Python file\n\ndef main():\n    print("Hello, World!")\n\nif __name__ == "__main__":\n    main()\n',
    'js': '// JavaScript file\n\nconsole.log("Hello, World!");\n',
    'ts': '// TypeScript file\n\nconsole.log("Hello, World!");\n',
    'html': '<!DOCTYPE html>\n<html>\n<head>\n    <title>New Page</title>\n</head>\n<body>\n    <h1>Hello, World!</h1>\n</body>\n</html>\n',
    'css': '/* CSS file */\n\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 20px;\n}\n',
    'json': '{\n    "name": "example",\n    "version": "1.0.0"\n}\n',
    'md': '# Markdown File\n\nThis is a new markdown file.\n\n## Features\n\n- Easy to write\n- Easy to read\n- Easy to edit\n',
    'txt': 'This is a text file.\n\nYou can write anything here.\n'
  };

  return templates[ext || ''] || '// New file\n\nStart writing your content here...\n';
}

export function formatFileSize(bytes: number): string {
  if (bytes === 0) return '0 Bytes';

  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));

  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

export function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout;
  return (...args: Parameters<T>) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), wait);
  };
}

export function throttle<T extends (...args: any[]) => any>(
  func: T,
  limit: number
): (...args: Parameters<T>) => void {
  let inThrottle: boolean;
  return (...args: Parameters<T>) => {
    if (!inThrottle) {
      func(...args);
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
    }
  };
}

export function showModal(modalId: string): void {
  const modal = document.getElementById(modalId);
  if (modal) {
    modal.classList.add('show');
  }
}

export function hideModal(modalId: string): void {
  const modal = document.getElementById(modalId);
  if (modal) {
    modal.classList.remove('show');
  }
}

export function showTab(tabName: string): void {
  // Remove active class from all tab contents
  const tabContents = document.querySelectorAll('.tab-content');
  tabContents.forEach(content => content.classList.remove('active'));

  // Add active class to the target tab content
  const targetContent = document.getElementById(`${tabName}-tab`);
  if (targetContent) {
    targetContent.classList.add('active');
  }
}

export function createElementFromHTML(htmlString: string): HTMLElement {
  const div = document.createElement('div');
  div.innerHTML = htmlString.trim();
  return div.firstChild as HTMLElement;
}

export function escapeHtml(text: string): string {
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

export function generateId(): string {
  return Math.random().toString(36).substr(2, 9);
}


================================================================================
FILE: frontend/src/test/setup.ts
================================================================================

import '@testing-library/jest-dom'


================================================================================
FILE: frontend/style.css
================================================================================

/* Global Styles */
:root {
  /* Light theme variables */
  --bg-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  --bg-secondary: rgba(255, 255, 255, 0.95);
  --bg-tertiary: rgba(255, 255, 255, 0.9);
  --bg-sidebar: #1e1e1e;
  --bg-sidebar-secondary: #252526;
  --bg-sidebar-tertiary: #2d2d30;
  --bg-modal: rgba(255, 255, 255, 0.95);
  --bg-input: rgba(255, 255, 255, 0.9);
  --bg-button-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  --bg-button-secondary: rgba(255, 255, 255, 0.9);
  --bg-button-danger: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
  --bg-card: rgba(255, 255, 255, 0.95);
  --bg-card-hover: rgba(255, 255, 255, 0.1);
  --bg-tab-active: #1e1e1e;
  --bg-tab-hover: #37373d;
  --bg-tab-bar: #2d2d30;
  --bg-welcome: linear-gradient(135deg, #1e1e1e 0%, #2d2d30 100%);

  --text-primary: #333;
  --text-secondary: #5a6c7d;
  --text-tertiary: #7f8c8d;
  --text-sidebar: #cccccc;
  --text-sidebar-secondary: #888888;
  --text-accent: #667eea;
  --text-white: #ffffff;

  --border-primary: rgba(255, 255, 255, 0.2);
  --border-secondary: rgba(102, 126, 234, 0.3);
  --border-sidebar: #3e3e42;
  --border-input: rgba(102, 126, 234, 0.2);
  --border-button: rgba(102, 126, 234, 0.3);

  --shadow-primary: 0 8px 32px rgba(0,0,0,0.1);
  --shadow-secondary: 0 4px 16px rgba(102, 126, 234, 0.2);
  --shadow-tertiary: 0 20px 60px rgba(0,0,0,0.2);
  --shadow-sidebar: 2px 0 8px rgba(0,0,0,0.3);
  --shadow-modal: 0 20px 60px rgba(0,0,0,0.3);

  --backdrop-blur: blur(10px);
  --backdrop-modal: blur(20px);
}

body.dark-mode {
  /* Dark theme variables */
  --bg-primary: linear-gradient(135deg, #1a1a1a 0%, #2d2d30 100%);
  --bg-secondary: rgba(45, 45, 48, 0.9);
  --bg-tertiary: rgba(45, 45, 48, 0.9);
  --bg-sidebar: #1e1e1e;
  --bg-sidebar-secondary: #252526;
  --bg-sidebar-tertiary: #2d2d30;
  --bg-modal: rgba(45, 45, 48, 0.9);
  --bg-input: rgba(45, 45, 48, 0.9);
  --bg-button-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  --bg-button-secondary: rgba(45, 45, 48, 0.9);
  --bg-button-danger: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
  --bg-card: rgba(45, 45, 48, 0.9);
  --bg-card-hover: rgba(255, 255, 255, 0.1);
  --bg-tab-active: #1e1e1e;
  --bg-tab-hover: #37373d;
  --bg-tab-bar: #2d2d30;
  --bg-welcome: linear-gradient(135deg, #1e1e1e 0%, #2d2d30 100%);

  --text-primary: #e0e0e0;
  --text-secondary: #5a6c7d;
  --text-tertiary: #7f8c8d;
  --text-sidebar: #cccccc;
  --text-sidebar-secondary: #888888;
  --text-accent: #667eea;
  --text-white: #ffffff;

  --border-primary: rgba(255, 255, 255, 0.1);
  --border-secondary: rgba(255, 255, 255, 0.2);
  --border-sidebar: #3e3e42;
  --border-input: rgba(255, 255, 255, 0.2);
  --border-button: rgba(255, 255, 255, 0.2);

  --shadow-primary: 0 8px 32px rgba(0,0,0,0.3);
  --shadow-secondary: 0 4px 16px rgba(102, 126, 234, 0.2);
  --shadow-tertiary: 0 20px 60px rgba(0,0,0,0.4);
  --shadow-sidebar: 2px 0 8px rgba(0,0,0,0.5);
  --shadow-modal: 0 20px 60px rgba(0,0,0,0.5);

  --backdrop-blur: blur(10px);
  --backdrop-modal: blur(20px);
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
  background: var(--bg-primary);
  color: var(--text-primary);
  line-height: 1.6;
  min-height: 100vh;
}

#app {
  display: flex;
  flex-direction: column;
  height: 100vh;
}

/* Main Content - Scrollable Layout */
#main {
  height: 100vh;
  overflow-y: auto;
  overflow-x: hidden;
}

/* Tab Content */
.tab-content {
  display: none;
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;
}

.tab-content.active {
  display: block;
}

/* Full width for files tab */
#files-tab {
  max-width: none;
  margin: 0;
  padding: 0;
}

/* Left align workspaces */
#workspaces-tab {
  margin: 0;
}

/* Workspace Styles */
.workspace-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  padding: 0;
}

.workspace-header h2 {
  color: #fff;
  font-size: 2.5rem;
  font-weight: 700;
  text-shadow: 0 2px 4px rgba(0,0,0,0.3);
}

.workspace-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
  gap: 2rem;
  padding: 0 0 4rem 0;
  min-height: calc(100vh - 200px);
}

.workspace-card {
  background: var(--bg-card);
  backdrop-filter: var(--backdrop-blur);
  border-radius: 16px;
  padding: 2rem;
  box-shadow: var(--shadow-primary);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  border: 1px solid var(--border-primary);
  position: relative;
  overflow: hidden;
  aspect-ratio: 1;
}

.workspace-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: linear-gradient(90deg, #667eea, #764ba2);
}

.workspace-card:hover {
  transform: translateY(-8px) scale(1.02);
  box-shadow: 0 20px 60px rgba(0,0,0,0.2);
}

.workspace-card h3 {
  margin-bottom: 0.75rem;
  color: #2c3e50;
  display: flex;
  align-items: center;
  gap: 0.75rem;
  font-size: 1.25rem;
  font-weight: 600;
}

.folder-indicator {
  font-size: 1.4rem;
  opacity: 0.8;
}

.workspace-card p {
  color: #5a6c7d;
  margin-bottom: 1.5rem;
  font-size: 0.95rem;
  line-height: 1.5;
}

.workspace-stats {
  display: flex;
  justify-content: space-between;
  margin-bottom: 1.5rem;
  font-size: 0.9rem;
  color: #7f8c8d;
  background: rgba(102, 126, 234, 0.1);
  padding: 0.75rem;
  border-radius: 8px;
}

.workspace-actions {
  display: flex;
  gap: 0.75rem;
}

/* VSCode-like File Explorer Layout */
.files-container {
  display: flex;
  height: 100vh;
  overflow: hidden;
  background: var(--bg-sidebar);
}

/* Sidebar */
.sidebar {
  width: 300px;
  height: 100%;
  background: var(--bg-sidebar-secondary);
  border-right: 1px solid var(--border-sidebar);
  display: flex;
  flex-direction: column;
  box-shadow: var(--shadow-sidebar);
  overflow: hidden;
  position: relative;
}

.icon-bar {
  display: flex;
  background: var(--bg-sidebar-tertiary);
  border-bottom: 1px solid var(--border-sidebar);
}

.icon-btn {
  flex: 1;
  padding: 0.75rem;
  background: none;
  border: none;
  color: var(--text-sidebar);
  cursor: pointer;
  font-size: 1.2rem;
  transition: all 0.2s ease;
  border-right: 1px solid var(--border-sidebar);
}

.icon-btn:last-child {
  border-right: none;
}

.icon-btn:hover {
  background: var(--bg-card-hover);
  color: var(--text-white);
}

.icon-btn.active {
  background: #007acc;
  color: var(--text-white);
}

.sidebar-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem;
  border-bottom: 1px solid var(--border-sidebar);
  background: var(--bg-sidebar-tertiary);
  font-size: 0.85rem;
  font-weight: 600;
  color: var(--text-sidebar);
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.search-container {
  display: flex;
  align-items: center;
  padding: 0.5rem 1rem;
  border-bottom: 1px solid var(--border-sidebar);
  background: var(--bg-sidebar-secondary);
}

.search-input {
  flex: 1;
  background: #3c3c3c;
  border: 1px solid #3e3e42;
  border-radius: 3px;
  padding: 0.5rem 0.75rem;
  color: #cccccc;
  font-size: 0.9rem;
  outline: none;
  transition: all 0.2s ease;
}

.search-input:focus {
  border-color: #007acc;
  background: #1e1e1e;
  box-shadow: 0 0 0 2px rgba(0, 122, 204, 0.2);
}

.search-input::placeholder {
  color: #888888;
}

.clear-search-btn {
  background: none;
  border: none;
  color: #cccccc;
  cursor: pointer;
  padding: 0.5rem;
  margin-left: 0.5rem;
  border-radius: 3px;
  font-size: 1rem;
  transition: all 0.2s ease;
  width: 28px;
  height: 28px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.clear-search-btn:hover {
  background: rgba(255, 255, 255, 0.1);
  color: #ffffff;
}

/* Search Results Styles */
.search-results {
  flex: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
}

.search-input-container {
  display: flex;
  align-items: center;
  padding: 0.75rem 1rem;
  border-bottom: 1px solid #3e3e42;
  background: #252526;
  gap: 0.5rem;
}

.search-btn {
  background: #007acc;
  border: 1px solid #007acc;
  padding: 0.5rem;
  cursor: pointer;
  border-radius: 3px;
  color: #ffffff;
  font-size: 1rem;
  transition: all 0.2s ease;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.search-btn:hover:not(:disabled) {
  background: #005a9e;
  border-color: #005a9e;
  transform: scale(1.05);
}

.search-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.search-results-list {
  flex: 1;
  overflow-y: auto;
  padding: 0.5rem 0;
}

.search-group {
  margin-bottom: 1.5rem;
}

.search-group-header {
  padding: 0.5rem 1rem;
  background: #2d2d30;
  border-bottom: 1px solid #3e3e42;
}

.search-group-path {
  font-size: 0.85rem;
  color: #cccccc;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.search-group-files {
  padding: 0.25rem 0;
}

.search-result-item {
  display: flex;
  flex-direction: column;
  padding: 0.75rem 1rem;
  cursor: pointer;
  border-radius: 4px;
  margin: 0.125rem 0.5rem;
  transition: all 0.2s ease;
  border: 1px solid transparent;
}

.search-result-item:hover {
  background: rgba(255, 255, 255, 0.05);
  border-color: rgba(255, 255, 255, 0.1);
}

.search-result-header {
  display: flex;
  align-items: center;
  margin-bottom: 0.5rem;
}

.search-result-icon {
  margin-right: 0.5rem;
  font-size: 1rem;
  width: 16px;
  text-align: center;
  opacity: 0.8;
}

.search-result-name {
  font-size: 0.9rem;
  color: #cccccc;
  font-weight: 500;
}

.search-result-matches {
  margin-left: 1.5rem;
}

.search-match {
  font-size: 0.8rem;
  color: #888888;
  margin-bottom: 0.25rem;
  line-height: 1.4;
}

.search-match-line {
  color: #007acc;
  font-weight: 600;
  margin-right: 0.5rem;
}

.search-match-text {
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
}

.search-match-more {
  font-size: 0.75rem;
  color: #666666;
  font-style: italic;
  margin-top: 0.25rem;
}

.empty-search {
  padding: 3rem 1rem;
  text-align: center;
  color: #cccccc;
}

.empty-search p {
  margin-bottom: 1rem;
  opacity: 0.8;
}

.searching {
  padding: 2rem 1rem;
  text-align: center;
  color: #cccccc;
}

.searching p {
  opacity: 0.8;
}

.sidebar-actions {
  display: flex;
  gap: 0.5rem;
}

.sidebar-btn {
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  padding: 0.5rem;
  cursor: pointer;
  border-radius: 6px;
  color: #cccccc;
  font-size: 1.1rem;
  transition: all 0.2s ease;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.sidebar-btn:hover {
  background: #007acc;
  border-color: #007acc;
  color: white;
  transform: scale(1.05);
}

.file-tree {
  flex: 1;
  padding: 0.5rem 0;
  overflow-y: auto;
}

.file-item {
  display: flex;
  align-items: center;
  padding: 0.5rem 1rem;
  cursor: pointer;
  border-radius: 6px;
  margin: 0.125rem 0.5rem;
  transition: all 0.2s ease;
  font-size: 0.9rem;
  position: relative;
}

.file-item:hover {
  background: rgba(255, 255, 255, 0.1);
}

.file-item.active {
  background: #007acc;
  color: white;
  box-shadow: 0 2px 8px rgba(0, 112, 204, 0.3);
}

.file-item.active::before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 3px;
  background: #ffffff;
  border-radius: 0 2px 2px 0;
}

.file-icon {
  margin-right: 0.75rem;
  font-size: 1.1rem;
  width: 18px;
  text-align: center;
  opacity: 0.8;
}

.file-name {
  flex: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/* Tree Styles */
.tree-item {
  display: flex;
  align-items: center;
  padding: 0.25rem 1rem;
  cursor: pointer;
  border-radius: 4px;
  margin: 0.125rem 0.5rem;
  transition: all 0.2s ease;
  font-size: 0.9rem;
  position: relative;
  user-select: none;
  color: #cccccc;
}

.tree-item:hover {
  background: rgba(255, 255, 255, 0.1);
}

.tree-item.active {
  background: #007acc;
  color: white;
  box-shadow: 0 2px 8px rgba(0, 112, 204, 0.3);
}

.tree-item.active::before {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  width: 3px;
  background: #ffffff;
  border-radius: 0 2px 2px 0;
}

.tree-icon {
  margin-right: 0.5rem;
  font-size: 1rem;
  width: 16px;
  text-align: center;
  opacity: 0.8;
}

.tree-name {
  flex: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.empty-tree {
  padding: 2rem 1rem;
  text-align: center;
  color: #cccccc;
}

.empty-tree p {
  margin-bottom: 1rem;
  opacity: 0.8;
}

/* Main Editor Area */
.main-editor {
  flex: 1;
  display: flex;
  flex-direction: column;
  background: var(--bg-sidebar);
}

/* Tab Bar */
.tab-bar {
  display: flex;
  background: var(--bg-sidebar-tertiary);
  border-bottom: 1px solid var(--border-sidebar);
  overflow-x: auto;
  overflow-y: hidden;
  box-shadow: var(--shadow-sidebar);
}

.tab {
  display: flex;
  align-items: center;
  padding: 0.75rem 1.25rem;
  background: var(--bg-sidebar-tertiary);
  border-right: 1px solid var(--border-sidebar);
  cursor: pointer;
  color: var(--text-sidebar);
  font-size: 0.9rem;
  white-space: nowrap;
  transition: all 0.2s ease;
  min-width: 140px;
  max-width: 220px;
  position: relative;
}

.tab:hover {
  background: var(--bg-tab-hover);
}

.tab.active {
  background: var(--bg-tab-active);
  color: var(--text-white);
  border-bottom: 3px solid #007acc;
  box-shadow: inset 0 -3px 0 #007acc;
}

.tab-icon {
  margin-right: 0.5rem;
  font-size: 1rem;
}

.tab-name {
  flex: 1;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.tab-close {
  margin-left: 0.75rem;
  padding: 0.25rem;
  background: none;
  border: none;
  color: var(--text-sidebar);
  cursor: pointer;
  border-radius: 3px;
  font-size: 0.9rem;
  opacity: 0.7;
  transition: all 0.2s ease;
  width: 20px;
  height: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.tab-close:hover {
  opacity: 1;
  background: var(--bg-card-hover);
}

/* Editor Container */
.editor-container {
  flex: 1;
  position: relative;
  background: var(--bg-sidebar);
}

.monaco-editor {
  width: 100% !important;
  height: 100% !important;
  overflow: hidden !important;
}

/* Welcome Screen */
.welcome-screen {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  background: var(--bg-welcome);
  color: var(--text-sidebar);
  z-index: 1;
}

.welcome-content {
  text-align: center;
  max-width: 500px;
  background: var(--bg-modal);
  padding: 3rem;
  border-radius: 16px;
  box-shadow: var(--shadow-modal);
  backdrop-filter: var(--backdrop-modal);
  border: 1px solid var(--border-primary);
}

.welcome-content h2 {
  color: var(--text-white);
  margin-bottom: 1.5rem;
  font-size: 2rem;
  font-weight: 700;
}

.welcome-content p {
  margin-bottom: 2.5rem;
  opacity: 0.8;
  font-size: 1.1rem;
}

.welcome-actions {
  margin-top: 2rem;
}

/* Quiz Styles */
.quiz-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  padding: 0;
}

.quiz-header h2 {
  color: #fff;
  font-size: 2.5rem;
  font-weight: 700;
  text-shadow: 0 2px 4px rgba(0,0,0,0.3);
}

.quiz-container {
  max-width: 900px;
  margin: 0 auto;
}

.quiz-question {
  background: var(--bg-card);
  backdrop-filter: var(--backdrop-blur);
  padding: 3rem;
  border-radius: 16px;
  box-shadow: var(--shadow-primary);
  margin-bottom: 2rem;
  border: 1px solid var(--border-primary);
}

.quiz-question h3 {
  margin-bottom: 2rem;
  color: #2c3e50;
  font-size: 1.5rem;
  font-weight: 600;
  text-align: center;
}

.quiz-options {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1.5rem;
}

.quiz-option {
  padding: 1.5rem;
  border: 2px solid rgba(102, 126, 234, 0.3);
  background: rgba(255, 255, 255, 0.9);
  border-radius: 12px;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  text-align: center;
  font-size: 1.1rem;
  font-weight: 500;
  color: #2c3e50;
  position: relative;
  overflow: hidden;
}

.quiz-option::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(102, 126, 234, 0.2), transparent);
  transition: left 0.5s;
}

.quiz-option:hover {
  border-color: #667eea;
  background: rgba(102, 126, 234, 0.1);
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(102, 126, 234, 0.2);
}

.quiz-option:hover::before {
  left: 100%;
}

.quiz-option.selected {
  border-color: #667eea;
  background: rgba(102, 126, 234, 0.2);
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.3);
}

.quiz-result {
  margin-top: 2rem;
  padding: 2rem;
  background: rgba(255, 255, 255, 0.9);
  border-radius: 12px;
  text-align: center;
  border: 1px solid rgba(255, 255, 255, 0.3);
}

.quiz-placeholder {
  text-align: center;
  padding: 4rem 2rem;
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  border-radius: 16px;
  box-shadow: 0 8px 32px rgba(0,0,0,0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.quiz-placeholder h3 {
  color: #2c3e50;
  font-size: 1.8rem;
  margin-bottom: 1rem;
}

.quiz-placeholder p {
  color: #5a6c7d;
  font-size: 1.1rem;
  margin-bottom: 1rem;
}

.warning {
  color: #e74c3c;
  font-weight: 500;
}

/* Progress Styles */
.progress-header {
  margin-bottom: 2rem;
  padding: 0;
}

.progress-header h2 {
  color: #fff;
  font-size: 2.5rem;
  font-weight: 700;
  text-shadow: 0 2px 4px rgba(0,0,0,0.3);
}

.progress-container {
  max-width: 1000px;
  margin: 0 auto;
}

.loading {
  text-align: center;
  padding: 4rem;
  color: #fff;
  font-size: 1.2rem;
}

.empty-progress {
  text-align: center;
  padding: 4rem 2rem;
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  border-radius: 16px;
  box-shadow: 0 8px 32px rgba(0,0,0,0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.empty-progress h4 {
  color: #2c3e50;
  font-size: 1.5rem;
  margin-bottom: 1rem;
}

.empty-progress p {
  color: #5a6c7d;
  font-size: 1.1rem;
  margin-bottom: 2rem;
}

.progress-placeholder {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 2rem;
  margin-top: 2rem;
}

.progress-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 2rem;
  margin-bottom: 3rem;
}

.stat-card {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  padding: 2.5rem;
  border-radius: 16px;
  box-shadow: 0 8px 32px rgba(0,0,0,0.1);
  text-align: center;
  border: 1px solid rgba(255, 255, 255, 0.2);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.stat-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: linear-gradient(90deg, #667eea, #764ba2);
}

.stat-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 12px 40px rgba(0,0,0,0.15);
}

.stat-card h4 {
  color: #7f8c8d;
  margin-bottom: 1rem;
  font-size: 0.9rem;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  font-weight: 600;
}

.stat-card p {
  font-size: 3rem;
  font-weight: 700;
  color: #2c3e50;
  margin: 0;
}

.progress-chart {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  padding: 3rem;
  border-radius: 16px;
  box-shadow: 0 8px 32px rgba(0,0,0,0.1);
  margin-bottom: 3rem;
  border: 1px solid rgba(255, 255, 255, 0.2);
  text-align: center;
}

.progress-chart h4 {
  color: #2c3e50;
  margin-bottom: 2rem;
  font-size: 1.5rem;
  font-weight: 600;
}

.progress-bar {
  width: 100%;
  height: 20px;
  background: rgba(102, 126, 234, 0.2);
  border-radius: 10px;
  overflow: hidden;
  margin-bottom: 1rem;
  box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
}

.progress-fill {
  height: 100%;
  background: linear-gradient(90deg, #667eea, #764ba2);
  border-radius: 10px;
  transition: width 0.8s ease;
  box-shadow: 0 0 10px rgba(102, 126, 234, 0.5);
}

.progress-text {
  color: #2c3e50;
  font-size: 1.2rem;
  font-weight: 600;
}

.recent-activity {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  padding: 3rem;
  border-radius: 16px;
  box-shadow: 0 8px 32px rgba(0,0,0,0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.recent-activity h4 {
  color: #2c3e50;
  margin-bottom: 2rem;
  font-size: 1.5rem;
  font-weight: 600;
  text-align: center;
}

.activity-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.activity-item {
  display: flex;
  align-items: center;
  padding: 1rem;
  background: rgba(102, 126, 234, 0.1);
  border-radius: 8px;
  transition: all 0.3s ease;
}

.activity-item:hover {
  background: rgba(102, 126, 234, 0.15);
  transform: translateX(4px);
}

.activity-icon {
  font-size: 1.5rem;
  margin-right: 1rem;
  width: 24px;
  text-align: center;
}

.activity-text {
  color: #2c3e50;
  font-weight: 500;
}

/* Buttons */
.btn-primary {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border: none;
  padding: 0.875rem 2rem;
  border-radius: 12px;
  cursor: pointer;
  font-size: 1rem;
  font-weight: 600;
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: 0 4px 16px rgba(102, 126, 234, 0.3);
  position: relative;
  overflow: hidden;
}

.btn-primary::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s;
}

.btn-primary:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
}

.btn-primary:hover::before {
  left: 100%;
}

.btn-secondary {
  background: rgba(255, 255, 255, 0.9);
  color: #2c3e50;
  border: 2px solid rgba(102, 126, 234, 0.3);
  padding: 0.875rem 2rem;
  border-radius: 12px;
  cursor: pointer;
  font-size: 1rem;
  font-weight: 600;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
}

.btn-secondary:hover {
  background: rgba(102, 126, 234, 0.1);
  border-color: #667eea;
  transform: translateY(-2px);
  box-shadow: 0 4px 16px rgba(102, 126, 234, 0.2);
}

.btn-danger {
  background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 12px;
  cursor: pointer;
  font-size: 0.9rem;
  font-weight: 600;
  transition: all 0.3s ease;
  box-shadow: 0 4px 16px rgba(231, 76, 60, 0.3);
}

.btn-danger:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(231, 76, 60, 0.4);
}

/* Modal */
.modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.6);
  backdrop-filter: blur(8px);
  z-index: 1000;
  animation: fadeIn 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.modal-content {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(20px);
  padding: 3rem;
  border-radius: 20px;
  width: 90%;
  max-width: 600px;
  box-shadow: 0 20px 60px rgba(0,0,0,0.3);
  border: 1px solid rgba(255, 255, 255, 0.3);
  animation: slideIn 0.3s ease;
}

@keyframes slideIn {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.modal-content h3 {
  margin-bottom: 2rem;
  color: #2c3e50;
  font-size: 1.8rem;
  font-weight: 700;
  text-align: center;
}

.modal-actions {
  display: flex;
  justify-content: center;
  gap: 1rem;
  margin-top: 2rem;
}

/* Context Menu */
.context-menu {
  position: fixed;
  background: #2d2d30;
  border: 1px solid #3e3e42;
  border-radius: 8px;
  box-shadow: 0 8px 32px rgba(0,0,0,0.5);
  z-index: 2000;
  min-width: 180px;
  font-size: 14px;
  color: #cccccc;
  backdrop-filter: blur(10px);
}

.context-menu-content {
  padding: 8px 0;
}

.context-menu-content button {
  display: block;
  width: 100%;
  padding: 10px 16px;
  background: none;
  border: none;
  color: #cccccc;
  text-align: left;
  cursor: pointer;
  font-size: 14px;
  transition: all 0.2s ease;
}

.context-menu-content button:hover {
  background: #007acc;
  color: #ffffff;
}

.context-menu-content hr {
  border: none;
  border-top: 1px solid #3e3e42;
  margin: 6px 0;
}

/* Dragging State */
.tree-item.dragging {
  opacity: 0.5;
  transform: rotate(2deg);
  background: rgba(255, 255, 255, 0.1) !important;
}

/* Form Styles */
input, textarea {
  width: 100%;
  padding: 1rem;
  border: 2px solid rgba(102, 126, 234, 0.2);
  border-radius: 12px;
  font-size: 1rem;
  margin-bottom: 1.5rem;
  transition: all 0.3s ease;
  background: rgba(255, 255, 255, 0.9);
  backdrop-filter: blur(10px);
}

input:focus, textarea:focus {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
  background: rgba(255, 255, 255, 1);
}



/* Tab Context Menu */
.tab-context-menu {
  background: #2d2d30;
  border: 1px solid #3e3e42;
  border-radius: 8px;
  box-shadow: 0 8px 32px rgba(0,0,0,0.5);
  padding: 8px 0;
  min-width: 180px;
  font-size: 14px;
  color: #cccccc;
  backdrop-filter: blur(10px);
}

.context-menu-item {
  padding: 10px 16px;
  cursor: pointer;
  user-select: none;
  transition: all 0.2s ease;
}

.context-menu-item:hover {
  background: #007acc;
  color: #ffffff;
}

.context-menu-separator {
  height: 1px;
  background: #3e3e42;
  margin: 6px 0;
}

/* Enhanced Tab Hover Effects */
.tab:hover .tab-close {
  opacity: 1;
}

.tab-close:hover {
  background: rgba(255, 255, 255, 0.2);
  border-radius: 4px;
}

/* Tab Scroll Indicators */
.tab-bar::-webkit-scrollbar {
  height: 4px;
}

.tab-bar::-webkit-scrollbar-track {
  background: #2d2d30;
}

.tab-bar::-webkit-scrollbar-thumb {
  background: #3e3e42;
  border-radius: 2px;
}

.tab-bar::-webkit-scrollbar-thumb:hover {
  background: #007acc;
}

/* Tab Drag and Drop (placeholder for future enhancement) */
.tab.dragging {
  opacity: 0.5;
  transform: rotate(5deg);
}

/* Responsive Design - Multiple Breakpoints */

/* Large Desktop (1440px+) */
@media (min-width: 1440px) {
  .sidebar {
    width: 340px;
  }

  .tab {
    min-width: 160px;
    max-width: 260px;
  }
}

/* Desktop (1024px - 1439px) */
@media (min-width: 1024px) and (max-width: 1439px) {
  .sidebar {
    width: 300px;
  }

  .tab {
    min-width: 140px;
    max-width: 220px;
  }
}

/* Small Desktop / Large Tablet (768px - 1023px) */
@media (min-width: 768px) and (max-width: 1023px) {
  .sidebar {
    width: 260px;
  }

  .tab {
    min-width: 120px;
    max-width: 180px;
    padding: 0.6rem 1rem;
    font-size: 0.85rem;
  }

  .workspace-header {
    padding: 1.5rem;
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }

  .workspace-grid {
    padding: 0 1.5rem 1.5rem 1.5rem;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  }
}

/* Tablet (600px - 767px) */
@media (min-width: 600px) and (max-width: 767px) {
  .sidebar {
    width: 220px;
  }

  .tab {
    min-width: 110px;
    max-width: 150px;
    padding: 0.5rem 0.8rem;
    font-size: 0.8rem;
  }

  .workspace-header {
    padding: 1rem;
  }

  .workspace-grid {
    padding: 0 1rem 1rem 1rem;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  }

  .workspace-card {
    padding: 1.5rem;
  }

  .quiz-options {
    grid-template-columns: 1fr;
  }

  .modal-content {
    width: 95%;
    margin: 5% auto;
    padding: 2rem;
  }
}

/* Mobile Landscape (480px - 599px) */
@media (min-width: 480px) and (max-width: 599px) {
  .files-container {
    flex-direction: column;
    height: 100vh;
  }

  .sidebar {
    width: 100%;
    height: 160px;
    border-right: none;
    border-bottom: 1px solid #3e3e42;
  }

  .main-editor {
    height: calc(100vh - 160px);
  }

  .tab-bar {
    height: 40px;
    overflow-x: auto;
    overflow-y: hidden;
  }

  .tab {
    min-width: 110px;
    max-width: 160px;
    padding: 0.4rem 0.7rem;
    font-size: 0.75rem;
  }

  .workspace-header {
    padding: 0.75rem;
    margin-bottom: 1rem;
  }

  .workspace-grid {
    padding: 0 0.75rem 0.75rem 0.75rem;
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }

  .workspace-card {
    padding: 1rem;
  }

  .quiz-options {
    grid-template-columns: 1fr;
  }

  .modal-content {
    width: 95%;
    margin: 2% auto;
    padding: 1.5rem;
  }
}

/* Mobile Portrait (320px - 479px) */
@media (max-width: 479px) {
  .files-container {
    flex-direction: column;
    height: 100vh;
  }

  .sidebar {
    width: 100%;
    height: 130px;
    border-right: none;
    border-bottom: 1px solid #3e3e42;
  }

  .sidebar-header {
    padding: 0.5rem 0.75rem;
    font-size: 0.7rem;
  }

  .file-item {
    padding: 0.3rem 0.75rem;
    font-size: 0.85rem;
  }

  .main-editor {
    height: calc(100vh - 130px);
  }

  .tab-bar {
    height: 35px;
  }

  .tab {
    min-width: 90px;
    max-width: 130px;
    padding: 0.3rem 0.5rem;
    font-size: 0.7rem;
  }

  .workspace-header {
    padding: 0.5rem;
    margin-bottom: 0.75rem;
  }

  .workspace-header h2 {
    font-size: 1.5rem;
  }

  .workspace-grid {
    padding: 0 0.5rem 0.5rem 0.5rem;
    grid-template-columns: 1fr;
    gap: 1rem;
  }

  .workspace-card {
    padding: 0.8rem;
  }

  .workspace-card h3 {
    font-size: 1rem;
    margin-bottom: 0.5rem;
  }

  .workspace-card p {
    font-size: 0.9rem;
    margin-bottom: 1rem;
  }

  .workspace-actions {
    flex-direction: column;
    gap: 0.5rem;
  }

  .workspace-actions button {
    padding: 0.6rem 1.2rem;
    font-size: 0.9rem;
  }

  .quiz-header {
    padding: 0.5rem;
    margin-bottom: 1rem;
  }

  .quiz-question {
    padding: 1.5rem;
    margin-bottom: 1rem;
  }

  .quiz-options {
    grid-template-columns: 1fr;
    gap: 0.75rem;
  }

  .progress-stats {
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }

  .stat-card {
    padding: 1.5rem;
  }

  .modal-content {
    width: 98%;
    margin: 1% auto;
    padding: 1rem;
  }

  .modal-content h3 {
    font-size: 1.2rem;
    margin-bottom: 1.5rem;
  }

  .btn-primary,
  .btn-secondary {
    padding: 0.7rem 1.5rem;
    font-size: 0.95rem;
  }

  .tab-context-menu {
    min-width: 140px;
    font-size: 12px;
  }

  .context-menu-item {
    padding: 8px 12px;
  }
}

/* Ultra Small Screens (below 320px) */
@media (max-width: 319px) {
  .sidebar {
    height: 110px;
  }

  .main-editor {
    height: calc(100vh - 110px);
  }

  .tab {
    min-width: 80px;
    max-width: 110px;
  }

  .workspace-card {
    padding: 0.7rem;
  }

  .modal-content {
    width: 99%;
    padding: 0.8rem;
  }
}

/* High DPI Displays */
@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
  .tab-close,
  .sidebar-btn {
    transform: scale(0.95);
  }
}

/* Touch Devices */
@media (hover: none) and (pointer: coarse) {
  .tab:hover .tab-close {
    opacity: 1;
  }

  .file-item:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  .tab-close {
    opacity: 0.9;
    padding: 0.3rem;
  }
}

/* Markdown Editor Styles */
.markdown-editor {
  display: flex;
  flex-direction: column;
  height: 100%;
  background: var(--bg-sidebar);
  overflow: hidden;
}

.markdown-toolbar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem 1rem;
  background: var(--bg-sidebar-tertiary);
  border-bottom: 1px solid var(--border-sidebar);
  font-size: 0.9rem;
  color: var(--text-sidebar);
  flex-shrink: 0;
}

.toolbar-left {
  display: flex;
  align-items: center;
}

.file-info {
  font-weight: 500;
  color: var(--text-sidebar);
}

.toolbar-right {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.split-info {
  font-size: 0.8rem;
  color: var(--text-sidebar-secondary);
  font-weight: 500;
}

/* Split View Layout */
.markdown-split-container {
  position: absolute;
  top: 60px; /* Account for toolbar height */
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  overflow: hidden;
}

.markdown-editor-panel,
.markdown-preview-panel {
  height: 100%;
  overflow: hidden;
  display: flex;
  flex-direction: column;
}

.markdown-editor-panel {
  background: var(--bg-sidebar);
  border-right: 1px solid var(--border-sidebar);
}

.markdown-preview-panel {
  background: var(--bg-sidebar);
}

/* Monaco Editor in split view */
.markdown-editor-panel .monaco-editor {
  flex: 1;
  width: 100% !important;
  height: 100% !important;
}

/* Preview Only Mode */
.markdown-preview-only {
  position: absolute;
  top: 60px; /* Account for toolbar height */
  left: 0;
  right: 0;
  bottom: 0;
  overflow: hidden;
}

/* Hide Monaco Editor decorations that shouldn't be visible */
.monaco-editor .decorationsOverviewRuler {
  display: none !important;
}

/* Splitter */
.markdown-splitter {
  width: 8px;
  background: var(--bg-sidebar-tertiary);
  border-left: 1px solid var(--border-sidebar);
  border-right: 1px solid var(--border-sidebar);
  cursor: col-resize;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
  position: relative;
  transition: background-color 0.2s ease;
}

.markdown-splitter:hover {
  background: var(--border-secondary);
}

.markdown-splitter:active,
.markdown-splitter.dragging {
  background: #007acc;
}

.splitter-handle {
  width: 2px;
  height: 24px;
  background: var(--border-sidebar);
  border-radius: 1px;
  transition: background-color 0.2s ease;
}

.markdown-splitter:hover .splitter-handle {
  background: var(--text-sidebar);
}

.markdown-splitter:active .splitter-handle,
.markdown-splitter.dragging .splitter-handle {
  background: var(--text-white);
}

.markdown-preview {
  height: 100%;
  overflow-y: auto;
  padding: 2rem;
  background: var(--bg-sidebar);
}

.markdown-preview-content {
  max-width: 800px;
  margin: 0 auto;
  color: var(--text-primary);
  line-height: 1.7;
}

/* Rich Markdown Content Styles */
.rich-markdown {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
}

.rich-markdown h1,
.rich-markdown h2,
.rich-markdown h3,
.rich-markdown h4,
.rich-markdown h5,
.rich-markdown h6 {
  margin-top: 2rem;
  margin-bottom: 1rem;
  color: var(--text-primary);
  font-weight: 600;
  line-height: 1.3;
}

.rich-markdown h1 { font-size: 2.25rem; border-bottom: 2px solid var(--border-secondary); padding-bottom: 0.5rem; }
.rich-markdown h2 { font-size: 1.875rem; border-bottom: 1px solid var(--border-secondary); padding-bottom: 0.25rem; }
.rich-markdown h3 { font-size: 1.5rem; }
.rich-markdown h4 { font-size: 1.25rem; }
.rich-markdown h5 { font-size: 1.125rem; }
.rich-markdown h6 { font-size: 1rem; }

.rich-markdown p {
  margin-bottom: 1rem;
  color: var(--text-primary);
}

.rich-markdown blockquote {
  border-left: 4px solid var(--border-secondary);
  padding-left: 1rem;
  margin: 1.5rem 0;
  color: var(--text-secondary);
  font-style: italic;
  background: rgba(102, 126, 234, 0.05);
  padding: 1rem 1.5rem;
  border-radius: 0 8px 8px 0;
}

.rich-markdown ul,
.rich-markdown ol {
  margin-bottom: 1rem;
  padding-left: 2rem;
}

.rich-markdown li {
  margin-bottom: 0.5rem;
  color: var(--text-primary);
}

.rich-markdown code:not(pre code) {
  background: rgba(102, 126, 234, 0.1);
  color: #e74c3c;
  padding: 0.2rem 0.4rem;
  border-radius: 4px;
  font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
  font-size: 0.9em;
}

.rich-markdown pre {
  background: var(--bg-sidebar-secondary);
  border: 1px solid var(--border-sidebar);
  border-radius: 8px;
  padding: 1.5rem;
  margin: 1.5rem 0;
  overflow-x: auto;
  box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);
}

.rich-markdown pre code {
  background: none;
  color: var(--text-sidebar);
  padding: 0;
  font-size: 0.9rem;
  line-height: 1.5;
}

.rich-markdown table {
  width: 100%;
  border-collapse: collapse;
  margin: 1.5rem 0;
  background: var(--bg-card);
  border-radius: 8px;
  overflow: hidden;
  box-shadow: var(--shadow-primary);
}

.rich-markdown th,
.rich-markdown td {
  padding: 0.75rem 1rem;
  text-align: left;
  border-bottom: 1px solid var(--border-primary);
}

.rich-markdown th {
  background: rgba(102, 126, 234, 0.1);
  font-weight: 600;
  color: var(--text-primary);
}

.rich-markdown td {
  color: var(--text-primary);
}

.rich-markdown tr:nth-child(even) {
  background: rgba(255, 255, 255, 0.02);
}

.rich-markdown tr:hover {
  background: rgba(102, 126, 234, 0.05);
}

/* Embedded Content Styles */
.youtube-embed {
  margin: 1.5rem 0;
  text-align: center;
}

.youtube-embed iframe {
  max-width: 100%;
  height: 315px;
  border-radius: 8px;
  box-shadow: var(--shadow-secondary);
}

.image-embed {
  margin: 1.5rem 0;
  text-align: center;
}

.image-embed img {
  max-width: 100%;
  height: auto;
  border-radius: 8px;
  box-shadow: var(--shadow-primary);
  transition: transform 0.3s ease;
}

.image-embed img:hover {
  transform: scale(1.02);
}

.markdown-link {
  color: #667eea;
  text-decoration: none;
  border-bottom: 1px solid transparent;
  transition: border-color 0.2s ease;
}

.markdown-link:hover {
  border-bottom-color: #667eea;
}

/* Chat Message Enhancements */
.message-content {
  word-wrap: break-word;
  overflow-wrap: break-word;
}

/* Syntax Highlighting (using highlight.js styles) */
.hljs {
  background: var(--bg-sidebar-secondary);
  color: var(--text-sidebar);
}

.hljs-keyword { color: #569cd6; }
.hljs-string { color: #ce9178; }
.hljs-number { color: #b5cea8; }
.hljs-comment { color: #6a9955; font-style: italic; }
.hljs-function { color: #dcdcaa; }
.hljs-variable { color: #9cdcfe; }
.hljs-operator { color: #d4d4d4; }

/* Markdown Editor Empty State */
.markdown-editor-empty {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100%;
  background: var(--bg-sidebar);
  color: var(--text-sidebar);
}

.markdown-editor-empty .welcome-content {
  text-align: center;
  max-width: 400px;
}

.markdown-editor-empty h2 {
  color: var(--text-white);
  margin-bottom: 1rem;
  font-size: 1.5rem;
}

.markdown-editor-empty p {
  opacity: 0.8;
  font-size: 1rem;
}

/* Responsive Markdown Styles */
@media (max-width: 768px) {
  .markdown-preview {
    padding: 1rem;
  }

  .markdown-preview-content {
    font-size: 0.9rem;
  }

  .rich-markdown h1 { font-size: 1.75rem; }
  .rich-markdown h2 { font-size: 1.5rem; }
  .rich-markdown h3 { font-size: 1.25rem; }

  .youtube-embed iframe {
    height: 250px;
  }

  .markdown-toolbar {
    padding: 0.5rem 0.75rem;
    font-size: 0.8rem;
  }

  .mode-toggle {
    padding: 0.4rem 0.8rem;
    font-size: 0.8rem;
  }
}

/* Dark mode adjustments for markdown */
body.dark-mode .rich-markdown {
  color: var(--text-primary);
}

body.dark-mode .rich-markdown table {
  background: var(--bg-sidebar-secondary);
}

body.dark-mode .rich-markdown th {
  background: rgba(102, 126, 234, 0.15);
}

/* Image, PDF, Video and Audio Viewer Styles */
.image-viewer,
.pdf-viewer,
.video-viewer,
.audio-viewer {
  display: flex;
  flex-direction: column;
  height: 100%;
  background: var(--bg-sidebar);
  overflow: hidden;
}

/* Zoom Controls */
.image-controls {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 1rem;
  padding: 0.75rem 1rem;
  background: var(--bg-sidebar-tertiary);
  border-bottom: 1px solid var(--border-sidebar);
  flex-shrink: 0;
}

.image-controls button {
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  color: var(--text-sidebar);
  padding: 0.5rem 0.75rem;
  border-radius: 6px;
  cursor: pointer;
  font-size: 0.9rem;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 40px;
}

.image-controls button:hover {
  background: #007acc;
  border-color: #007acc;
  color: white;
  transform: scale(1.05);
}

.zoom-level {
  background: rgba(255, 255, 255, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  color: var(--text-sidebar);
  padding: 0.5rem 1rem;
  border-radius: 6px;
  font-size: 0.9rem;
  font-weight: 600;
  min-width: 60px;
  text-align: center;
}

.image-container,
.pdf-container,
.video-container,
.audio-container {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  background: var(--bg-sidebar-secondary);
  padding: 2rem;
  overflow: auto;
}

/* Scrollable container for zoomed images */
.image-container.scrollable {
  overflow: auto;
  cursor: grab;
}

.image-container.scrollable:active {
  cursor: grabbing;
}

.viewer-image {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
  border-radius: 8px;
  box-shadow: var(--shadow-primary);
  transition: transform 0.3s ease;
}

.viewer-image:hover {
  transform: scale(1.02);
}

.viewer-pdf {
  width: 100%;
  height: 100%;
  min-height: 600px;
  border: none;
  border-radius: 8px;
  box-shadow: var(--shadow-primary);
}

.viewer-video {
  max-width: 100%;
  max-height: 100%;
  border-radius: 8px;
  box-shadow: var(--shadow-primary);
}

.viewer-audio {
  width: 100%;
  max-width: 600px;
  border-radius: 8px;
  box-shadow: var(--shadow-primary);
}

.file-info {
  padding: 1rem 2rem;
  background: var(--bg-sidebar-tertiary);
  border-top: 1px solid var(--border-sidebar);
  font-size: 0.9rem;
  color: var(--text-sidebar);
  display: flex;
  flex-wrap: wrap;
  gap: 2rem;
}

.file-info p {
  margin: 0;
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.file-info strong {
  color: var(--text-sidebar);
  font-weight: 600;
}

/* Unsupported File Viewer */
.unsupported-file-viewer {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100%;
  background: var(--bg-sidebar);
  color: var(--text-sidebar);
}

.unsupported-content {
  text-align: center;
  max-width: 400px;
  padding: 2rem;
  background: var(--bg-modal);
  border-radius: 16px;
  box-shadow: var(--shadow-modal);
  border: 1px solid var(--border-primary);
}

.unsupported-content h3 {
  color: var(--text-white);
  margin-bottom: 1rem;
  font-size: 1.5rem;
}

.unsupported-content p {
  margin-bottom: 0.5rem;
  opacity: 0.8;
}

/* Error Content */
.error-content {
  text-align: center;
  max-width: 400px;
  padding: 2rem;
  background: var(--bg-modal);
  border-radius: 16px;
  box-shadow: var(--shadow-modal);
  border: 1px solid var(--border-primary);
}

.error-content h3 {
  color: #e74c3c;
  margin-bottom: 1rem;
  font-size: 1.5rem;
}

.error-content p {
  margin-bottom: 0.5rem;
  opacity: 0.8;
  color: var(--text-primary);
}

/* Responsive Image/PDF Viewer */
@media (max-width: 768px) {
  .image-container,
  .pdf-container {
    padding: 1rem;
  }

  .file-info {
    padding: 0.75rem 1rem;
    font-size: 0.8rem;
    flex-direction: column;
    gap: 0.5rem;
  }

  .viewer-pdf {
    min-height: 400px;
  }
}

/* Print Styles */
@media print {
  .tab-bar,
  .sidebar,
  .workspace-actions {
    display: none !important;
  }

  .files-container {
    flex-direction: column;
    height: auto;
  }

  .main-editor {
    height: auto;
  }

  .markdown-toolbar {
    display: none;
  }

  .markdown-preview {
    padding: 0;
  }

  .rich-markdown {
    font-size: 12pt;
    line-height: 1.4;
  }
}


================================================================================
FILE: mkdocs.yml
================================================================================

site_name: Recall Wiki
docs_dir: wiki
nav:
  - Home: index.md
  - BUILD: BUILD.md
  - PACKAGING: PACKAGING.md
  - Design:
      - Backend: design/backend-design.md
      - Frontend: design/frontend-design.md
      - Electron: design/electron-design.md
      - Features:
          - Directory Structure and Build: design/feature/directory-structure-and-build.md
          - Knowledge Graph: design/feature/knowledge-graph.md
          - Quiz Generation Improvements: design/feature/quiz-generation-improvements.md
theme: readthedocs


================================================================================
FILE: package-lock.json
================================================================================

{
  "name": "recall",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "recall",
      "version": "1.0.0",
      "license": "ISC",
      "dependencies": {
        "@types/mime-types": "^3.0.1",
        "d3": "^7.9.0",
        "electron-log": "^5.1.6",
        "electron-squirrel-startup": "^1.0.1",
        "mime-types": "^3.0.1",
        "react-markdown": "^10.1.0",
        "rehype-highlight": "^7.0.2",
        "rehype-raw": "^7.0.0",
        "remark-gfm": "^4.0.1"
      },
      "devDependencies": {
        "@electron-forge/cli": "^7.9.0",
        "@electron-forge/maker-deb": "^7.9.0",
        "@electron-forge/maker-rpm": "^7.9.0",
        "@electron-forge/maker-squirrel": "^7.9.0",
        "@electron-forge/maker-zip": "^7.9.0",
        "@electron-forge/plugin-auto-unpack-natives": "^7.9.0",
        "@electron-forge/plugin-fuses": "^7.9.0",
        "@electron/fuses": "^1.8.0",
        "@testing-library/jest-dom": "^6.8.0",
        "@testing-library/react": "^16.3.0",
        "@types/electron": "^1.4.38",
        "@types/node": "^24.5.2",
        "@types/react": "^19.1.13",
        "@types/react-dom": "^19.1.9",
        "@vitejs/plugin-react": "^5.0.3",
        "@vitest/coverage-v8": "^3.2.4",
        "concurrently": "^9.2.1",
        "copyfiles": "^2.4.1",
        "electron": "^38.1.2",
        "jsdom": "^27.0.0",
        "react": "^19.1.1",
        "react-dom": "^19.1.1",
        "rimraf": "^6.0.0",
        "typescript": "^5.9.2",
        "vite": "^7.1.6",
        "vitest": "^3.2.4"
      }
    },
    "node_modules/@adobe/css-tools": {
      "version": "4.4.4",
      "resolved": "https://registry.npmjs.org/@adobe/css-tools/-/css-tools-4.4.4.tgz",
      "integrity": "sha512-Elp+iwUx5rN5+Y8xLt5/GRoG20WGoDCQ/1Fb+1LiGtvwbDavuSk0jhD/eZdckHAuzcDzccnkv+rEjyWfRx18gg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@asamuzakjp/css-color": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/@asamuzakjp/css-color/-/css-color-4.0.5.tgz",
      "integrity": "sha512-lMrXidNhPGsDjytDy11Vwlb6OIGrT3CmLg3VWNFyWkLWtijKl7xjvForlh8vuj0SHGjgl4qZEQzUmYTeQA2JFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@csstools/css-calc": "^2.1.4",
        "@csstools/css-color-parser": "^3.1.0",
        "@csstools/css-parser-algorithms": "^3.0.5",
        "@csstools/css-tokenizer": "^3.0.4",
        "lru-cache": "^11.2.1"
      }
    },
    "node_modules/@asamuzakjp/css-color/node_modules/lru-cache": {
      "version": "11.2.2",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-11.2.2.tgz",
      "integrity": "sha512-F9ODfyqML2coTIsQpSkRHnLSZMtkU8Q+mSfcaIyKwy58u+8k5nvAYeiNhsyMARvzNcXJ9QfWVrcPsC9e9rAxtg==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": "20 || >=22"
      }
    },
    "node_modules/@asamuzakjp/dom-selector": {
      "version": "6.5.6",
      "resolved": "https://registry.npmjs.org/@asamuzakjp/dom-selector/-/dom-selector-6.5.6.tgz",
      "integrity": "sha512-Mj3Hu9ymlsERd7WOsUKNUZnJYL4IZ/I9wVVYgtvOsWYiEFbkQ4G7VRIh2USxTVW4BBDIsLG+gBUgqOqf2Kvqow==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@asamuzakjp/nwsapi": "^2.3.9",
        "bidi-js": "^1.0.3",
        "css-tree": "^3.1.0",
        "is-potential-custom-element-name": "^1.0.1",
        "lru-cache": "^11.2.1"
      }
    },
    "node_modules/@asamuzakjp/dom-selector/node_modules/lru-cache": {
      "version": "11.2.2",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-11.2.2.tgz",
      "integrity": "sha512-F9ODfyqML2coTIsQpSkRHnLSZMtkU8Q+mSfcaIyKwy58u+8k5nvAYeiNhsyMARvzNcXJ9QfWVrcPsC9e9rAxtg==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": "20 || >=22"
      }
    },
    "node_modules/@asamuzakjp/nwsapi": {
      "version": "2.3.9",
      "resolved": "https://registry.npmjs.org/@asamuzakjp/nwsapi/-/nwsapi-2.3.9.tgz",
      "integrity": "sha512-n8GuYSrI9bF7FFZ/SjhwevlHc8xaVlb/7HmHelnc/PZXBD2ZR49NnN9sMMuDdEGPeeRQ5d0hqlSlEpgCX3Wl0Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.4.tgz",
      "integrity": "sha512-YsmSKC29MJwf0gF8Rjjrg5LQCmyh+j/nD8/eP7f+BeoQTKYqs9RoWbjGOdy0+1Ekr68RJZMUOPVQaQisnIo4Rw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.4.tgz",
      "integrity": "sha512-2BCOP7TN8M+gVDj7/ht3hsaO/B/n5oDbiAyyvnRlNOs+u1o+JWNYTQrmpuNp1/Wq2gcFrI01JAW+paEKDMx/CA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.28.3",
        "@babel/helpers": "^7.28.4",
        "@babel/parser": "^7.28.4",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.4",
        "@babel/types": "^7.28.4",
        "@jridgewell/remapping": "^2.3.5",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.3.tgz",
      "integrity": "sha512-3lSpxGgvnmZznmBkCRnVREPUFJv2wrv9iAoFDvADJc0ypmdOxdUtcLeBgBJ6zE0PMeTKnxeQzyk0xTBq4Ep7zw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.3",
        "@babel/types": "^7.28.2",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.28.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.28.3.tgz",
      "integrity": "sha512-gytXUbs8k2sXS9PnQptz5o0QnpLL51SwASIORY6XaBKF88nsOT0Zw9szLqlSGQDP/4TljBAD5y98p2U1fqkdsw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.28.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.28.4.tgz",
      "integrity": "sha512-HFN59MmQXGHVyYadKLVumYsA9dBFun/ldYxipEjzA4196jpLZd8UjEEBLkbEkvfYreDqJhZxYAWFPtrfhNpj4w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.4"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.4.tgz",
      "integrity": "sha512-yZbBqeM6TkpP9du/I2pUZnJsRMGGvOuIrhjzC1AwHwW+6he4mni6Bp/m8ijn0iOuZuPI2BfkCoSRunpyjnrQKg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.4"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-self": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-self/-/plugin-transform-react-jsx-self-7.27.1.tgz",
      "integrity": "sha512-6UzkCs+ejGdZ5mFFC/OCUrv028ab2fp1znZmCZjAOBKiBK2jXD1O+BPSfX8X2qjJ75fZBMSnQn3Rq2mrBJK2mw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-react-jsx-source": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-react-jsx-source/-/plugin-transform-react-jsx-source-7.27.1.tgz",
      "integrity": "sha512-zbwoTsBruTeKB9hSq73ha66iFeJHuaFkUbwvqElnygoNbj/jHRsSeokowZFN3CZ64IvEqcmmkVe89OPXc7ldAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/runtime": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.28.4.tgz",
      "integrity": "sha512-Q/N6JNWvIvPnLDvjlE1OUBLPQHH6l3CltCEsHIujp45zQUSSh8K+gHnaEX45yAT1nyngnINhvWtzN+Nb9D8RAQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.4.tgz",
      "integrity": "sha512-YEzuboP2qvQavAcjgQNVgsvHIDv6ZpwXvcvjmyySP2DIMuByS/6ioU5G9pYrWHM6T2YDfc7xga9iNzYOs12CFQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.3",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.4",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.4",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.4",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.4.tgz",
      "integrity": "sha512-bkFqkLhh3pMBUQQkpVgWDWq/lqzc2678eUyDlTBhRqhCHFguYYGM0Efga7tYk4TogG/3x0EEl66/OQ+WGbWB/Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@bcoe/v8-coverage": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-1.0.2.tgz",
      "integrity": "sha512-6zABk/ECA/QYSCQ1NGiVwwbQerUCZ+TQbp64Q3AgmfNvurHH0j8TtXa1qbShXA6qqkpAj4V5W8pP6mLe1mcMqA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@csstools/color-helpers": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/@csstools/color-helpers/-/color-helpers-5.1.0.tgz",
      "integrity": "sha512-S11EXWJyy0Mz5SYvRmY8nJYTFFd1LCNV+7cXyAgQtOOuzb4EsgfqDufL+9esx72/eLhsRdGZwaldu/h+E4t4BA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/csstools"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/csstools"
        }
      ],
      "license": "MIT-0",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@csstools/css-calc": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/@csstools/css-calc/-/css-calc-2.1.4.tgz",
      "integrity": "sha512-3N8oaj+0juUw/1H3YwmDDJXCgTB1gKU6Hc/bB502u9zR0q2vd786XJH9QfrKIEgFlZmhZiq6epXl4rHqhzsIgQ==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/csstools"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/csstools"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "@csstools/css-parser-algorithms": "^3.0.5",
        "@csstools/css-tokenizer": "^3.0.4"
      }
    },
    "node_modules/@csstools/css-color-parser": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@csstools/css-color-parser/-/css-color-parser-3.1.0.tgz",
      "integrity": "sha512-nbtKwh3a6xNVIp/VRuXV64yTKnb1IjTAEEh3irzS+HkKjAOYLTGNb9pmVNntZ8iVBHcWDA2Dof0QtPgFI1BaTA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/csstools"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/csstools"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "@csstools/color-helpers": "^5.1.0",
        "@csstools/css-calc": "^2.1.4"
      },
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "@csstools/css-parser-algorithms": "^3.0.5",
        "@csstools/css-tokenizer": "^3.0.4"
      }
    },
    "node_modules/@csstools/css-parser-algorithms": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/@csstools/css-parser-algorithms/-/css-parser-algorithms-3.0.5.tgz",
      "integrity": "sha512-DaDeUkXZKjdGhgYaHNJTV9pV7Y9B3b644jCLs9Upc3VeNGg6LWARAT6O+Q+/COo+2gg/bM5rhpMAtf70WqfBdQ==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/csstools"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/csstools"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "@csstools/css-tokenizer": "^3.0.4"
      }
    },
    "node_modules/@csstools/css-syntax-patches-for-csstree": {
      "version": "1.0.14",
      "resolved": "https://registry.npmjs.org/@csstools/css-syntax-patches-for-csstree/-/css-syntax-patches-for-csstree-1.0.14.tgz",
      "integrity": "sha512-zSlIxa20WvMojjpCSy8WrNpcZ61RqfTfX3XTaOeVlGJrt/8HF3YbzgFZa01yTbT4GWQLwfTcC3EB8i3XnB647Q==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/csstools"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/csstools"
        }
      ],
      "license": "MIT-0",
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "postcss": "^8.4"
      }
    },
    "node_modules/@csstools/css-tokenizer": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@csstools/css-tokenizer/-/css-tokenizer-3.0.4.tgz",
      "integrity": "sha512-Vd/9EVDiu6PPJt9yAh6roZP6El1xHrdvIVGjyBsHR0RYwNHgL7FJPyIIW4fANJNG6FtyZfvlRPpFI4ZM/lubvw==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/csstools"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/csstools"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@electron-forge/cli": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@electron-forge/cli/-/cli-7.9.0.tgz",
      "integrity": "sha512-FIs9rV6gN1v8rY73j/dvhQWF8tht035bN2LatY/z99H2KpWr0lhD03MOkIM2lRgrPEqVTExA4JEl9ja9yXBD3Q==",
      "dev": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/malept"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/subscription/pkg/npm-.electron-forge-cli?utm_medium=referral&utm_source=npm_fund"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "@electron-forge/core": "7.9.0",
        "@electron-forge/core-utils": "7.9.0",
        "@electron-forge/shared-types": "7.9.0",
        "@electron/get": "^3.0.0",
        "@inquirer/prompts": "^6.0.1",
        "@listr2/prompt-adapter-inquirer": "^2.0.22",
        "chalk": "^4.0.0",
        "commander": "^11.1.0",
        "debug": "^4.3.1",
        "fs-extra": "^10.0.0",
        "listr2": "^7.0.2",
        "log-symbols": "^4.0.0",
        "semver": "^7.2.1"
      },
      "bin": {
        "electron-forge": "dist/electron-forge.js",
        "electron-forge-vscode-nix": "script/vscode.sh",
        "electron-forge-vscode-win": "script/vscode.cmd"
      },
      "engines": {
        "node": ">= 16.4.0"
      }
    },
    "node_modules/@electron-forge/cli/node_modules/@electron/get": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@electron/get/-/get-3.1.0.tgz",
      "integrity": "sha512-F+nKc0xW+kVbBRhFzaMgPy3KwmuNTYX1fx6+FxxoSnNgwYX6LD7AKBTWkU0MQ6IBoe7dz069CNkR673sPAgkCQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^4.1.1",
        "env-paths": "^2.2.0",
        "fs-extra": "^8.1.0",
        "got": "^11.8.5",
        "progress": "^2.0.3",
        "semver": "^6.2.0",
        "sumchecker": "^3.0.1"
      },
      "engines": {
        "node": ">=14"
      },
      "optionalDependencies": {
        "global-agent": "^3.0.0"
      }
    },
    "node_modules/@electron-forge/cli/node_modules/@electron/get/node_modules/fs-extra": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-8.1.0.tgz",
      "integrity": "sha512-yhlQgA6mnOJUKOsRUFsgJdQCvkKhcz8tlZG5HBQfReYZy46OwLcY+Zia0mtdHsOo9y/hP+CxMN0TU9QxoOtG4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^4.0.0",
        "universalify": "^0.1.0"
      },
      "engines": {
        "node": ">=6 <7 || >=8"
      }
    },
    "node_modules/@electron-forge/cli/node_modules/@electron/get/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@electron-forge/cli/node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@electron-forge/cli/node_modules/fs-extra/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/@electron-forge/cli/node_modules/fs-extra/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@electron-forge/cli/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@electron-forge/core": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@electron-forge/core/-/core-7.9.0.tgz",
      "integrity": "sha512-S5uFv9sFAVYSO80/K4HZsJL9L2Bs51IxCqR0a2Lk4NdKr9Fpzp6txwuALSJzM1bIpohtqbjmgut49o95wg30ZA==",
      "dev": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/malept"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/subscription/pkg/npm-.electron-forge-core?utm_medium=referral&utm_source=npm_fund"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "@electron-forge/core-utils": "7.9.0",
        "@electron-forge/maker-base": "7.9.0",
        "@electron-forge/plugin-base": "7.9.0",
        "@electron-forge/publisher-base": "7.9.0",
        "@electron-forge/shared-types": "7.9.0",
        "@electron-forge/template-base": "7.9.0",
        "@electron-forge/template-vite": "7.9.0",
        "@electron-forge/template-vite-typescript": "7.9.0",
        "@electron-forge/template-webpack": "7.9.0",
        "@electron-forge/template-webpack-typescript": "7.9.0",
        "@electron-forge/tracer": "7.9.0",
        "@electron/get": "^3.0.0",
        "@electron/packager": "^18.3.5",
        "@electron/rebuild": "^3.7.0",
        "@malept/cross-spawn-promise": "^2.0.0",
        "@vscode/sudo-prompt": "^9.3.1",
        "chalk": "^4.0.0",
        "debug": "^4.3.1",
        "fast-glob": "^3.2.7",
        "filenamify": "^4.1.0",
        "find-up": "^5.0.0",
        "fs-extra": "^10.0.0",
        "global-dirs": "^3.0.0",
        "got": "^11.8.5",
        "interpret": "^3.1.1",
        "jiti": "^2.4.2",
        "listr2": "^7.0.2",
        "lodash": "^4.17.20",
        "log-symbols": "^4.0.0",
        "node-fetch": "^2.6.7",
        "rechoir": "^0.8.0",
        "semver": "^7.2.1",
        "source-map-support": "^0.5.13",
        "username": "^5.1.0"
      },
      "engines": {
        "node": ">= 16.4.0"
      }
    },
    "node_modules/@electron-forge/core-utils": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@electron-forge/core-utils/-/core-utils-7.9.0.tgz",
      "integrity": "sha512-votOf1+20cUJim0smYZW7OylXrl89JlpuFTgFpn5WFpDfAV6C0iH9202K1sa33v9OQ989JnpWDZtQNQzQHHNtg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@electron-forge/shared-types": "7.9.0",
        "@electron/rebuild": "^3.7.0",
        "@malept/cross-spawn-promise": "^2.0.0",
        "chalk": "^4.0.0",
        "debug": "^4.3.1",
        "find-up": "^5.0.0",
        "fs-extra": "^10.0.0",
        "log-symbols": "^4.0.0",
        "semver": "^7.2.1"
      },
      "engines": {
        "node": ">= 16.4.0"
      }
    },
    "node_modules/@electron-forge/core-utils/node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@electron-forge/core-utils/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/@electron-forge/core-utils/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@electron-forge/core-utils/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@electron-forge/core/node_modules/@electron/get": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@electron/get/-/get-3.1.0.tgz",
      "integrity": "sha512-F+nKc0xW+kVbBRhFzaMgPy3KwmuNTYX1fx6+FxxoSnNgwYX6LD7AKBTWkU0MQ6IBoe7dz069CNkR673sPAgkCQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^4.1.1",
        "env-paths": "^2.2.0",
        "fs-extra": "^8.1.0",
        "got": "^11.8.5",
        "progress": "^2.0.3",
        "semver": "^6.2.0",
        "sumchecker": "^3.0.1"
      },
      "engines": {
        "node": ">=14"
      },
      "optionalDependencies": {
        "global-agent": "^3.0.0"
      }
    },
    "node_modules/@electron-forge/core/node_modules/@electron/get/node_modules/fs-extra": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-8.1.0.tgz",
      "integrity": "sha512-yhlQgA6mnOJUKOsRUFsgJdQCvkKhcz8tlZG5HBQfReYZy46OwLcY+Zia0mtdHsOo9y/hP+CxMN0TU9QxoOtG4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^4.0.0",
        "universalify": "^0.1.0"
      },
      "engines": {
        "node": ">=6 <7 || >=8"
      }
    },
    "node_modules/@electron-forge/core/node_modules/@electron/get/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@electron-forge/core/node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@electron-forge/core/node_modules/fs-extra/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/@electron-forge/core/node_modules/fs-extra/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@electron-forge/core/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@electron-forge/maker-base": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@electron-forge/maker-base/-/maker-base-7.9.0.tgz",
      "integrity": "sha512-u0jo2kaYRxh/Rai6DyFSGJcNLRVWxiKaGUjMhX1LrKolufUkCxxR4TEmv4Hvl03WTr9pQb06umlIrVMaNb+j9A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@electron-forge/shared-types": "7.9.0",
        "fs-extra": "^10.0.0",
        "which": "^2.0.2"
      },
      "engines": {
        "node": ">= 16.4.0"
      }
    },
    "node_modules/@electron-forge/maker-base/node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@electron-forge/maker-base/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/@electron-forge/maker-base/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@electron-forge/maker-deb": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@electron-forge/maker-deb/-/maker-deb-7.9.0.tgz",
      "integrity": "sha512-b1TRMKkeuZ2PTKVsTMWLY+82O6UQVPQ17x5hkWe0lyIxRyCfJr6hD+AqYbvEJ50ncDkvyCtENBT6GnhfbKOGxA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@electron-forge/maker-base": "7.9.0",
        "@electron-forge/shared-types": "7.9.0"
      },
      "engines": {
        "node": ">= 16.4.0"
      },
      "optionalDependencies": {
        "electron-installer-debian": "^3.2.0"
      }
    },
    "node_modules/@electron-forge/maker-rpm": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@electron-forge/maker-rpm/-/maker-rpm-7.9.0.tgz",
      "integrity": "sha512-if7Odo/LFn1MIGW6ftEnhP77+0pTeMd9e9YvM8+qiaztV/jVNB0RGuuzKOtQXzbrrjps/YWG15x+U4/XUIUylg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@electron-forge/maker-base": "7.9.0",
        "@electron-forge/shared-types": "7.9.0"
      },
      "engines": {
        "node": ">= 16.4.0"
      },
      "optionalDependencies": {
        "electron-installer-redhat": "^3.2.0"
      }
    },
    "node_modules/@electron-forge/maker-squirrel": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@electron-forge/maker-squirrel/-/maker-squirrel-7.9.0.tgz",
      "integrity": "sha512-Ea3MrieWC1KRct1QSZeOBY+GIqHZO5bXj6xCuj81f6nz8JMCsXdgvKosdbfcJMSKu4SYZ52PtoweA6uAACfLww==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@electron-forge/maker-base": "7.9.0",
        "@electron-forge/shared-types": "7.9.0",
        "fs-extra": "^10.0.0"
      },
      "engines": {
        "node": ">= 16.4.0"
      },
      "optionalDependencies": {
        "electron-winstaller": "^5.3.0"
      }
    },
    "node_modules/@electron-forge/maker-squirrel/node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@electron-forge/maker-squirrel/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/@electron-forge/maker-squirrel/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@electron-forge/maker-zip": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@electron-forge/maker-zip/-/maker-zip-7.9.0.tgz",
      "integrity": "sha512-UGeziReiz8yuDTjliOjvbdyulIHpKAWkDeW3kOcMTUmRcCgrCkBNr+Pp6ih8Q3aBhG+CCd4++oe2rDnnuVvxFw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@electron-forge/maker-base": "7.9.0",
        "@electron-forge/shared-types": "7.9.0",
        "cross-zip": "^4.0.0",
        "fs-extra": "^10.0.0",
        "got": "^11.8.5"
      },
      "engines": {
        "node": ">= 16.4.0"
      }
    },
    "node_modules/@electron-forge/maker-zip/node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@electron-forge/maker-zip/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/@electron-forge/maker-zip/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@electron-forge/plugin-auto-unpack-natives": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@electron-forge/plugin-auto-unpack-natives/-/plugin-auto-unpack-natives-7.9.0.tgz",
      "integrity": "sha512-PQeTq7Mp2bQkj/fdf+DjnSFKLWyBCSdLqZqNadszA9+2QcxFVv+v2ckTuwkHAdoecVNOdza/VZZIDbVFLhUHkQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@electron-forge/plugin-base": "7.9.0",
        "@electron-forge/shared-types": "7.9.0"
      },
      "engines": {
        "node": ">= 16.4.0"
      }
    },
    "node_modules/@electron-forge/plugin-base": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@electron-forge/plugin-base/-/plugin-base-7.9.0.tgz",
      "integrity": "sha512-2cnShgfes0sqH7A3+54fWhfJEfU++1OC2HE50a4sWtWEDwyWLGbwW7tp9BgSXrvIexO2AGKHQ1pKIjpZYVC0fA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@electron-forge/shared-types": "7.9.0"
      },
      "engines": {
        "node": ">= 16.4.0"
      }
    },
    "node_modules/@electron-forge/plugin-fuses": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@electron-forge/plugin-fuses/-/plugin-fuses-7.9.0.tgz",
      "integrity": "sha512-HZ8O6hw+lJZewlBfFmxmHAvIA//o75u0g68K8zAjYKq5QFSC/PQNjQ8+qv0PjnlaQ13R1o/fyu+HZZUj7cgSbA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@electron-forge/plugin-base": "7.9.0",
        "@electron-forge/shared-types": "7.9.0"
      },
      "engines": {
        "node": ">= 16.4.0"
      },
      "peerDependencies": {
        "@electron/fuses": "^1.0.0"
      }
    },
    "node_modules/@electron-forge/publisher-base": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@electron-forge/publisher-base/-/publisher-base-7.9.0.tgz",
      "integrity": "sha512-z3eH4+C++LiDqlKmri04IbSNNWLRYLvc49uNiOgfvnejplLsos720TTbwgruyI3D2fbpmhrVmz9kp9H9YzXdVg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@electron-forge/shared-types": "7.9.0"
      },
      "engines": {
        "node": ">= 16.4.0"
      }
    },
    "node_modules/@electron-forge/shared-types": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@electron-forge/shared-types/-/shared-types-7.9.0.tgz",
      "integrity": "sha512-6jZF+zq3SYMnweQpgr5fwlSgOd2yOZ5qlfz/CgXyVljiv0e0UThzpOjfTLuwuVgZX7a60xV+h0mg1h82Glu3wQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@electron-forge/tracer": "7.9.0",
        "@electron/packager": "^18.3.5",
        "@electron/rebuild": "^3.7.0",
        "listr2": "^7.0.2"
      },
      "engines": {
        "node": ">= 16.4.0"
      }
    },
    "node_modules/@electron-forge/template-base": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@electron-forge/template-base/-/template-base-7.9.0.tgz",
      "integrity": "sha512-DvXdJHh4qP+LBX6xNBlO0nfljvJNTmiQNfLRfSouRdYCWbr5hC7wyWAX803HqwRsVLRZj2oiLYZjmyG3jESp8Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@electron-forge/core-utils": "7.9.0",
        "@electron-forge/shared-types": "7.9.0",
        "@malept/cross-spawn-promise": "^2.0.0",
        "debug": "^4.3.1",
        "fs-extra": "^10.0.0",
        "semver": "^7.2.1",
        "username": "^5.1.0"
      },
      "engines": {
        "node": ">= 16.4.0"
      }
    },
    "node_modules/@electron-forge/template-base/node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@electron-forge/template-base/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/@electron-forge/template-base/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@electron-forge/template-base/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@electron-forge/template-vite": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@electron-forge/template-vite/-/template-vite-7.9.0.tgz",
      "integrity": "sha512-m8Fi40XaF7YDJo7YqmfJbkjRRsttN9EEHkmq+McLrDUbln15Ppm59RAwUhizDQzs4enmLcNQPaFllbAg/2t8vQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@electron-forge/shared-types": "7.9.0",
        "@electron-forge/template-base": "7.9.0",
        "fs-extra": "^10.0.0"
      },
      "engines": {
        "node": ">= 16.4.0"
      }
    },
    "node_modules/@electron-forge/template-vite-typescript": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@electron-forge/template-vite-typescript/-/template-vite-typescript-7.9.0.tgz",
      "integrity": "sha512-qGK649YnC3iOVrj/hHUu/TXG7Nn/a7QykEOPrCrxROWL7mtw8CMUE+FOVETd+eew7/4ldUNzl+5b9ebP8jHOmg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@electron-forge/shared-types": "7.9.0",
        "@electron-forge/template-base": "7.9.0",
        "fs-extra": "^10.0.0"
      },
      "engines": {
        "node": ">= 16.4.0"
      }
    },
    "node_modules/@electron-forge/template-vite-typescript/node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@electron-forge/template-vite-typescript/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/@electron-forge/template-vite-typescript/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@electron-forge/template-vite/node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@electron-forge/template-vite/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/@electron-forge/template-vite/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@electron-forge/template-webpack": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@electron-forge/template-webpack/-/template-webpack-7.9.0.tgz",
      "integrity": "sha512-ser22QczYGor7N6bnMUwexdWbLMNApr6zpBoT+Xfn6P4Ks67ttzcfkAges7GXHNjXwox4ePYZ3+D7cWQem5C4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@electron-forge/shared-types": "7.9.0",
        "@electron-forge/template-base": "7.9.0",
        "fs-extra": "^10.0.0"
      },
      "engines": {
        "node": ">= 16.4.0"
      }
    },
    "node_modules/@electron-forge/template-webpack-typescript": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@electron-forge/template-webpack-typescript/-/template-webpack-typescript-7.9.0.tgz",
      "integrity": "sha512-z7PB72sI11LBSPz9w9nwwk0le/lZ3VT8TrLc0NYh4F4LbZ19Z+lxcraaAdf21efvWzodhWx8khAyA8WvkNxVSw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@electron-forge/shared-types": "7.9.0",
        "@electron-forge/template-base": "7.9.0",
        "fs-extra": "^10.0.0"
      },
      "engines": {
        "node": ">= 16.4.0"
      }
    },
    "node_modules/@electron-forge/template-webpack-typescript/node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@electron-forge/template-webpack-typescript/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/@electron-forge/template-webpack-typescript/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@electron-forge/template-webpack/node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@electron-forge/template-webpack/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/@electron-forge/template-webpack/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@electron-forge/tracer": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@electron-forge/tracer/-/tracer-7.9.0.tgz",
      "integrity": "sha512-7itsjW1WJQADg7Ly61ggI5CCRt+QDVx3HOZC1w69jMUtnipKyPRCbvTBf1oplsNqbIzZxceXdfex6W53YNehvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chrome-trace-event": "^1.0.3"
      },
      "engines": {
        "node": ">= 14.17.5"
      }
    },
    "node_modules/@electron/asar": {
      "version": "3.4.1",
      "resolved": "https://registry.npmjs.org/@electron/asar/-/asar-3.4.1.tgz",
      "integrity": "sha512-i4/rNPRS84t0vSRa2HorerGRXWyF4vThfHesw0dmcWHp+cspK743UanA0suA5Q5y8kzY2y6YKrvbIUn69BCAiA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "commander": "^5.0.0",
        "glob": "^7.1.6",
        "minimatch": "^3.0.4"
      },
      "bin": {
        "asar": "bin/asar.js"
      },
      "engines": {
        "node": ">=10.12.0"
      }
    },
    "node_modules/@electron/asar/node_modules/commander": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-5.1.0.tgz",
      "integrity": "sha512-P0CysNDQ7rtVw4QIQtm+MRxV66vKFSvlsQvGYXZWR3qFU0jlMKHZZZgw8e+8DSah4UDKMqnknRDQz+xuQXQ/Zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/@electron/fuses": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/@electron/fuses/-/fuses-1.8.0.tgz",
      "integrity": "sha512-zx0EIq78WlY/lBb1uXlziZmDZI4ubcCXIMJ4uGjXzZW0nS19TjSPeXPAjzzTmKQlJUZm0SbmZhPKP7tuQ1SsEw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.1.1",
        "fs-extra": "^9.0.1",
        "minimist": "^1.2.5"
      },
      "bin": {
        "electron-fuses": "dist/bin.js"
      }
    },
    "node_modules/@electron/fuses/node_modules/fs-extra": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-9.1.0.tgz",
      "integrity": "sha512-hcg3ZmepS30/7BSFqRvoo3DOMQu7IjqxO5nCDt+zM9XWjb33Wg7ziNT+Qvqbuc3+gWpzO02JubVyk2G4Zvo1OQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "at-least-node": "^1.0.0",
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@electron/fuses/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/@electron/fuses/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@electron/get": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@electron/get/-/get-2.0.3.tgz",
      "integrity": "sha512-Qkzpg2s9GnVV2I2BjRksUi43U5e6+zaQMcjoJy0C+C5oxaKl+fmckGDQFtRpZpZV0NQekuZZ+tGz7EA9TVnQtQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^4.1.1",
        "env-paths": "^2.2.0",
        "fs-extra": "^8.1.0",
        "got": "^11.8.5",
        "progress": "^2.0.3",
        "semver": "^6.2.0",
        "sumchecker": "^3.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "optionalDependencies": {
        "global-agent": "^3.0.0"
      }
    },
    "node_modules/@electron/node-gyp": {
      "version": "10.2.0-electron.1",
      "resolved": "git+ssh://git@github.com/electron/node-gyp.git#06b29aafb7708acef8b3669835c8a7857ebc92d2",
      "integrity": "sha512-4MSBTT8y07YUDqf69/vSh80Hh791epYqGtWHO3zSKhYFwQg+gx9wi1PqbqP6YqC4WMsNxZ5l9oDmnWdK5pfCKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "env-paths": "^2.2.0",
        "exponential-backoff": "^3.1.1",
        "glob": "^8.1.0",
        "graceful-fs": "^4.2.6",
        "make-fetch-happen": "^10.2.1",
        "nopt": "^6.0.0",
        "proc-log": "^2.0.1",
        "semver": "^7.3.5",
        "tar": "^6.2.1",
        "which": "^2.0.2"
      },
      "bin": {
        "node-gyp": "bin/node-gyp.js"
      },
      "engines": {
        "node": ">=12.13.0"
      }
    },
    "node_modules/@electron/node-gyp/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/@electron/node-gyp/node_modules/glob": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/glob/-/glob-8.1.0.tgz",
      "integrity": "sha512-r8hpEjiQEYlF2QU0df3dS+nxxSIreXQS1qRhMJM0Q5NDdR386C7jb7Hwwod8Fgiuex+k0GFjgft18yvxm5XoCQ==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^5.0.1",
        "once": "^1.3.0"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/@electron/node-gyp/node_modules/minimatch": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.6.tgz",
      "integrity": "sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@electron/node-gyp/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@electron/notarize": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/@electron/notarize/-/notarize-2.5.0.tgz",
      "integrity": "sha512-jNT8nwH1f9X5GEITXaQ8IF/KdskvIkOFfB2CvwumsveVidzpSc+mvhhTMdAGSYF3O+Nq49lJ7y+ssODRXu06+A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^4.1.1",
        "fs-extra": "^9.0.1",
        "promise-retry": "^2.0.1"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@electron/notarize/node_modules/fs-extra": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-9.1.0.tgz",
      "integrity": "sha512-hcg3ZmepS30/7BSFqRvoo3DOMQu7IjqxO5nCDt+zM9XWjb33Wg7ziNT+Qvqbuc3+gWpzO02JubVyk2G4Zvo1OQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "at-least-node": "^1.0.0",
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@electron/notarize/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/@electron/notarize/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@electron/osx-sign": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/@electron/osx-sign/-/osx-sign-1.3.3.tgz",
      "integrity": "sha512-KZ8mhXvWv2rIEgMbWZ4y33bDHyUKMXnx4M0sTyPNK/vcB81ImdeY9Ggdqy0SWbMDgmbqyQ+phgejh6V3R2QuSg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "compare-version": "^0.1.2",
        "debug": "^4.3.4",
        "fs-extra": "^10.0.0",
        "isbinaryfile": "^4.0.8",
        "minimist": "^1.2.6",
        "plist": "^3.0.5"
      },
      "bin": {
        "electron-osx-flat": "bin/electron-osx-flat.js",
        "electron-osx-sign": "bin/electron-osx-sign.js"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/@electron/osx-sign/node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@electron/osx-sign/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/@electron/osx-sign/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@electron/packager": {
      "version": "18.4.4",
      "resolved": "https://registry.npmjs.org/@electron/packager/-/packager-18.4.4.tgz",
      "integrity": "sha512-fTUCmgL25WXTcFpM1M72VmFP8w3E4d+KNzWxmTDRpvwkfn/S206MAtM2cy0GF78KS9AwASMOUmlOIzCHeNxcGQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "@electron/asar": "^3.2.13",
        "@electron/get": "^3.0.0",
        "@electron/notarize": "^2.1.0",
        "@electron/osx-sign": "^1.0.5",
        "@electron/universal": "^2.0.1",
        "@electron/windows-sign": "^1.0.0",
        "@malept/cross-spawn-promise": "^2.0.0",
        "debug": "^4.0.1",
        "extract-zip": "^2.0.0",
        "filenamify": "^4.1.0",
        "fs-extra": "^11.1.0",
        "galactus": "^1.0.0",
        "get-package-info": "^1.0.0",
        "junk": "^3.1.0",
        "parse-author": "^2.0.0",
        "plist": "^3.0.0",
        "prettier": "^3.4.2",
        "resedit": "^2.0.0",
        "resolve": "^1.1.6",
        "semver": "^7.1.3",
        "yargs-parser": "^21.1.1"
      },
      "bin": {
        "electron-packager": "bin/electron-packager.js"
      },
      "engines": {
        "node": ">= 16.13.0"
      },
      "funding": {
        "url": "https://github.com/electron/packager?sponsor=1"
      }
    },
    "node_modules/@electron/packager/node_modules/@electron/get": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@electron/get/-/get-3.1.0.tgz",
      "integrity": "sha512-F+nKc0xW+kVbBRhFzaMgPy3KwmuNTYX1fx6+FxxoSnNgwYX6LD7AKBTWkU0MQ6IBoe7dz069CNkR673sPAgkCQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^4.1.1",
        "env-paths": "^2.2.0",
        "fs-extra": "^8.1.0",
        "got": "^11.8.5",
        "progress": "^2.0.3",
        "semver": "^6.2.0",
        "sumchecker": "^3.0.1"
      },
      "engines": {
        "node": ">=14"
      },
      "optionalDependencies": {
        "global-agent": "^3.0.0"
      }
    },
    "node_modules/@electron/packager/node_modules/@electron/get/node_modules/fs-extra": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-8.1.0.tgz",
      "integrity": "sha512-yhlQgA6mnOJUKOsRUFsgJdQCvkKhcz8tlZG5HBQfReYZy46OwLcY+Zia0mtdHsOo9y/hP+CxMN0TU9QxoOtG4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^4.0.0",
        "universalify": "^0.1.0"
      },
      "engines": {
        "node": ">=6 <7 || >=8"
      }
    },
    "node_modules/@electron/packager/node_modules/@electron/get/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@electron/packager/node_modules/fs-extra": {
      "version": "11.3.2",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-11.3.2.tgz",
      "integrity": "sha512-Xr9F6z6up6Ws+NjzMCZc6WXg2YFRlrLP9NQDO3VQrWrfiojdhS56TzueT88ze0uBdCTwEIhQ3ptnmKeWGFAe0A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=14.14"
      }
    },
    "node_modules/@electron/packager/node_modules/fs-extra/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/@electron/packager/node_modules/fs-extra/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@electron/packager/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@electron/rebuild": {
      "version": "3.7.2",
      "resolved": "https://registry.npmjs.org/@electron/rebuild/-/rebuild-3.7.2.tgz",
      "integrity": "sha512-19/KbIR/DAxbsCkiaGMXIdPnMCJLkcf8AvGnduJtWBs/CBwiAjY1apCqOLVxrXg+rtXFCngbXhBanWjxLUt1Mg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@electron/node-gyp": "git+https://github.com/electron/node-gyp.git#06b29aafb7708acef8b3669835c8a7857ebc92d2",
        "@malept/cross-spawn-promise": "^2.0.0",
        "chalk": "^4.0.0",
        "debug": "^4.1.1",
        "detect-libc": "^2.0.1",
        "fs-extra": "^10.0.0",
        "got": "^11.7.0",
        "node-abi": "^3.45.0",
        "node-api-version": "^0.2.0",
        "ora": "^5.1.0",
        "read-binary-file-arch": "^1.0.6",
        "semver": "^7.3.5",
        "tar": "^6.0.5",
        "yargs": "^17.0.1"
      },
      "bin": {
        "electron-rebuild": "lib/cli.js"
      },
      "engines": {
        "node": ">=12.13.0"
      }
    },
    "node_modules/@electron/rebuild/node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@electron/rebuild/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/@electron/rebuild/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@electron/rebuild/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@electron/universal": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@electron/universal/-/universal-2.0.3.tgz",
      "integrity": "sha512-Wn9sPYIVFRFl5HmwMJkARCCf7rqK/EurkfQ/rJZ14mHP3iYTjZSIOSVonEAnhWeAXwtw7zOekGRlc6yTtZ0t+g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@electron/asar": "^3.3.1",
        "@malept/cross-spawn-promise": "^2.0.0",
        "debug": "^4.3.1",
        "dir-compare": "^4.2.0",
        "fs-extra": "^11.1.1",
        "minimatch": "^9.0.3",
        "plist": "^3.1.0"
      },
      "engines": {
        "node": ">=16.4"
      }
    },
    "node_modules/@electron/universal/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/@electron/universal/node_modules/fs-extra": {
      "version": "11.3.2",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-11.3.2.tgz",
      "integrity": "sha512-Xr9F6z6up6Ws+NjzMCZc6WXg2YFRlrLP9NQDO3VQrWrfiojdhS56TzueT88ze0uBdCTwEIhQ3ptnmKeWGFAe0A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=14.14"
      }
    },
    "node_modules/@electron/universal/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/@electron/universal/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/@electron/universal/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@electron/windows-sign": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/@electron/windows-sign/-/windows-sign-1.2.2.tgz",
      "integrity": "sha512-dfZeox66AvdPtb2lD8OsIIQh12Tp0GNCRUDfBHIKGpbmopZto2/A8nSpYYLoedPIHpqkeblZ/k8OV0Gy7PYuyQ==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "cross-dirname": "^0.1.0",
        "debug": "^4.3.4",
        "fs-extra": "^11.1.1",
        "minimist": "^1.2.8",
        "postject": "^1.0.0-alpha.6"
      },
      "bin": {
        "electron-windows-sign": "bin/electron-windows-sign.js"
      },
      "engines": {
        "node": ">=14.14"
      }
    },
    "node_modules/@electron/windows-sign/node_modules/fs-extra": {
      "version": "11.3.2",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-11.3.2.tgz",
      "integrity": "sha512-Xr9F6z6up6Ws+NjzMCZc6WXg2YFRlrLP9NQDO3VQrWrfiojdhS56TzueT88ze0uBdCTwEIhQ3ptnmKeWGFAe0A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=14.14"
      }
    },
    "node_modules/@electron/windows-sign/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/@electron/windows-sign/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.10.tgz",
      "integrity": "sha512-0NFWnA+7l41irNuaSVlLfgNT12caWJVLzp5eAVhZ0z1qpxbockccEt3s+149rE64VUI3Ml2zt8Nv5JVc4QXTsw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.10.tgz",
      "integrity": "sha512-dQAxF1dW1C3zpeCDc5KqIYuZ1tgAdRXNoZP7vkBIRtKZPYe2xVr/d3SkirklCHudW1B45tGiUlz2pUWDfbDD4w==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.10.tgz",
      "integrity": "sha512-LSQa7eDahypv/VO6WKohZGPSJDq5OVOo3UoFR1E4t4Gj1W7zEQMUhI+lo81H+DtB+kP+tDgBp+M4oNCwp6kffg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.10.tgz",
      "integrity": "sha512-MiC9CWdPrfhibcXwr39p9ha1x0lZJ9KaVfvzA0Wxwz9ETX4v5CHfF09bx935nHlhi+MxhA63dKRRQLiVgSUtEg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.10.tgz",
      "integrity": "sha512-JC74bdXcQEpW9KkV326WpZZjLguSZ3DfS8wrrvPMHgQOIEIG/sPXEN/V8IssoJhbefLRcRqw6RQH2NnpdprtMA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.10.tgz",
      "integrity": "sha512-tguWg1olF6DGqzws97pKZ8G2L7Ig1vjDmGTwcTuYHbuU6TTjJe5FXbgs5C1BBzHbJ2bo1m3WkQDbWO2PvamRcg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.10.tgz",
      "integrity": "sha512-3ZioSQSg1HT2N05YxeJWYR+Libe3bREVSdWhEEgExWaDtyFbbXWb49QgPvFH8u03vUPX10JhJPcz7s9t9+boWg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.10.tgz",
      "integrity": "sha512-LLgJfHJk014Aa4anGDbh8bmI5Lk+QidDmGzuC2D+vP7mv/GeSN+H39zOf7pN5N8p059FcOfs2bVlrRr4SK9WxA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.10.tgz",
      "integrity": "sha512-oR31GtBTFYCqEBALI9r6WxoU/ZofZl962pouZRTEYECvNF/dtXKku8YXcJkhgK/beU+zedXfIzHijSRapJY3vg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.10.tgz",
      "integrity": "sha512-5luJWN6YKBsawd5f9i4+c+geYiVEw20FVW5x0v1kEMWNq8UctFjDiMATBxLvmmHA4bf7F6hTRaJgtghFr9iziQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.10.tgz",
      "integrity": "sha512-NrSCx2Kim3EnnWgS4Txn0QGt0Xipoumb6z6sUtl5bOEZIVKhzfyp/Lyw4C1DIYvzeW/5mWYPBFJU3a/8Yr75DQ==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.10.tgz",
      "integrity": "sha512-xoSphrd4AZda8+rUDDfD9J6FUMjrkTz8itpTITM4/xgerAZZcFW7Dv+sun7333IfKxGG8gAq+3NbfEMJfiY+Eg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.10.tgz",
      "integrity": "sha512-ab6eiuCwoMmYDyTnyptoKkVS3k8fy/1Uvq7Dj5czXI6DF2GqD2ToInBI0SHOp5/X1BdZ26RKc5+qjQNGRBelRA==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.10.tgz",
      "integrity": "sha512-NLinzzOgZQsGpsTkEbdJTCanwA5/wozN9dSgEl12haXJBzMTpssebuXR42bthOF3z7zXFWH1AmvWunUCkBE4EA==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.10.tgz",
      "integrity": "sha512-FE557XdZDrtX8NMIeA8LBJX3dC2M8VGXwfrQWU7LB5SLOajfJIxmSdyL/gU1m64Zs9CBKvm4UAuBp5aJ8OgnrA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.10.tgz",
      "integrity": "sha512-3BBSbgzuB9ajLoVZk0mGu+EHlBwkusRmeNYdqmznmMc9zGASFjSsxgkNsqmXugpPk00gJ0JNKh/97nxmjctdew==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.10.tgz",
      "integrity": "sha512-QSX81KhFoZGwenVyPoberggdW1nrQZSvfVDAIUXr3WqLRZGZqWk/P4T8p2SP+de2Sr5HPcvjhcJzEiulKgnxtA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-arm64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.10.tgz",
      "integrity": "sha512-AKQM3gfYfSW8XRk8DdMCzaLUFB15dTrZfnX8WXQoOUpUBQ+NaAFCP1kPS/ykbbGYz7rxn0WS48/81l9hFl3u4A==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.10.tgz",
      "integrity": "sha512-7RTytDPGU6fek/hWuN9qQpeGPBZFfB4zZgcz2VK2Z5VpdUxEI8JKYsg3JfO0n/Z1E/6l05n0unDCNc4HnhQGig==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-arm64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.10.tgz",
      "integrity": "sha512-5Se0VM9Wtq797YFn+dLimf2Zx6McttsH2olUBsDml+lm0GOCRVebRWUvDtkY4BWYv/3NgzS8b/UM3jQNh5hYyw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.10.tgz",
      "integrity": "sha512-XkA4frq1TLj4bEMB+2HnI0+4RnjbuGZfet2gs/LNs5Hc7D89ZQBHQ0gL2ND6Lzu1+QVkjp3x1gIcPKzRNP8bXw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openharmony-arm64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/openharmony-arm64/-/openharmony-arm64-0.25.10.tgz",
      "integrity": "sha512-AVTSBhTX8Y/Fz6OmIVBip9tJzZEUcY8WLh7I59+upa5/GPhh2/aM6bvOMQySspnCCHvFi79kMtdJS1w0DXAeag==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openharmony"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.10.tgz",
      "integrity": "sha512-fswk3XT0Uf2pGJmOpDB7yknqhVkJQkAQOcW/ccVOtfx05LkbWOaRAtn5SaqXypeKQra1QaEa841PgrSL9ubSPQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.10.tgz",
      "integrity": "sha512-ah+9b59KDTSfpaCg6VdJoOQvKjI33nTaQr4UluQwW7aEwZQsbMCfTmfEO4VyewOxx4RaDT/xCy9ra2GPWmO7Kw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.10.tgz",
      "integrity": "sha512-QHPDbKkrGO8/cz9LKVnJU22HOi4pxZnZhhA2HYHez5Pz4JeffhDjf85E57Oyco163GnzNCVkZK0b/n4Y0UHcSw==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.10.tgz",
      "integrity": "sha512-9KpxSVFCu0iK1owoez6aC/s/EdUQLDN3adTxGCqxMVhrPDj6bt5dbrHDXUuq+Bs2vATFBBrQS5vdQ/Ed2P+nbw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@gar/promisify": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/@gar/promisify/-/promisify-1.1.3.tgz",
      "integrity": "sha512-k2Ty1JcVojjJFwrg/ThKi2ujJ7XNLYaFGNB/bWT9wGR+oSMJHMa5w+CUq6p/pVrKeNNgA7pCqEcjSnHVoqJQFw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@inquirer/checkbox": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@inquirer/checkbox/-/checkbox-3.0.1.tgz",
      "integrity": "sha512-0hm2nrToWUdD6/UHnel/UKGdk1//ke5zGUpHIvk5ZWmaKezlGxZkOJXNSWsdxO/rEqTkbB3lNC2J6nBElV2aAQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@inquirer/core": "^9.2.1",
        "@inquirer/figures": "^1.0.6",
        "@inquirer/type": "^2.0.0",
        "ansi-escapes": "^4.3.2",
        "yoctocolors-cjs": "^2.1.2"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@inquirer/confirm": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/@inquirer/confirm/-/confirm-4.0.1.tgz",
      "integrity": "sha512-46yL28o2NJ9doViqOy0VDcoTzng7rAb6yPQKU7VDLqkmbCaH4JqK4yk4XqlzNWy9PVC5pG1ZUXPBQv+VqnYs2w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@inquirer/core": "^9.2.1",
        "@inquirer/type": "^2.0.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@inquirer/core": {
      "version": "9.2.1",
      "resolved": "https://registry.npmjs.org/@inquirer/core/-/core-9.2.1.tgz",
      "integrity": "sha512-F2VBt7W/mwqEU4bL0RnHNZmC/OxzNx9cOYxHqnXX3MP6ruYvZUZAW9imgN9+h/uBT/oP8Gh888J2OZSbjSeWcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@inquirer/figures": "^1.0.6",
        "@inquirer/type": "^2.0.0",
        "@types/mute-stream": "^0.0.4",
        "@types/node": "^22.5.5",
        "@types/wrap-ansi": "^3.0.0",
        "ansi-escapes": "^4.3.2",
        "cli-width": "^4.1.0",
        "mute-stream": "^1.0.0",
        "signal-exit": "^4.1.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^6.2.0",
        "yoctocolors-cjs": "^2.1.2"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@inquirer/core/node_modules/@types/node": {
      "version": "22.18.6",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.18.6.tgz",
      "integrity": "sha512-r8uszLPpeIWbNKtvWRt/DbVi5zbqZyj1PTmhRMqBMvDnaz1QpmSKujUtJLrqGZeoM8v72MfYggDceY4K1itzWQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.21.0"
      }
    },
    "node_modules/@inquirer/core/node_modules/undici-types": {
      "version": "6.21.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
      "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@inquirer/editor": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@inquirer/editor/-/editor-3.0.1.tgz",
      "integrity": "sha512-VA96GPFaSOVudjKFraokEEmUQg/Lub6OXvbIEZU1SDCmBzRkHGhxoFAVaF30nyiB4m5cEbDgiI2QRacXZ2hw9Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@inquirer/core": "^9.2.1",
        "@inquirer/type": "^2.0.0",
        "external-editor": "^3.1.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@inquirer/expand": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@inquirer/expand/-/expand-3.0.1.tgz",
      "integrity": "sha512-ToG8d6RIbnVpbdPdiN7BCxZGiHOTomOX94C2FaT5KOHupV40tKEDozp12res6cMIfRKrXLJyexAZhWVHgbALSQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@inquirer/core": "^9.2.1",
        "@inquirer/type": "^2.0.0",
        "yoctocolors-cjs": "^2.1.2"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@inquirer/figures": {
      "version": "1.0.13",
      "resolved": "https://registry.npmjs.org/@inquirer/figures/-/figures-1.0.13.tgz",
      "integrity": "sha512-lGPVU3yO9ZNqA7vTYz26jny41lE7yoQansmqdMLBEfqaGsmdg7V3W9mK9Pvb5IL4EVZ9GnSDGMO/cJXud5dMaw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@inquirer/input": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@inquirer/input/-/input-3.0.1.tgz",
      "integrity": "sha512-BDuPBmpvi8eMCxqC5iacloWqv+5tQSJlUafYWUe31ow1BVXjW2a5qe3dh4X/Z25Wp22RwvcaLCc2siHobEOfzg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@inquirer/core": "^9.2.1",
        "@inquirer/type": "^2.0.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@inquirer/number": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@inquirer/number/-/number-2.0.1.tgz",
      "integrity": "sha512-QpR8jPhRjSmlr/mD2cw3IR8HRO7lSVOnqUvQa8scv1Lsr3xoAMMworcYW3J13z3ppjBFBD2ef1Ci6AE5Qn8goQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@inquirer/core": "^9.2.1",
        "@inquirer/type": "^2.0.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@inquirer/password": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@inquirer/password/-/password-3.0.1.tgz",
      "integrity": "sha512-haoeEPUisD1NeE2IanLOiFr4wcTXGWrBOyAyPZi1FfLJuXOzNmxCJPgUrGYKVh+Y8hfGJenIfz5Wb/DkE9KkMQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@inquirer/core": "^9.2.1",
        "@inquirer/type": "^2.0.0",
        "ansi-escapes": "^4.3.2"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@inquirer/prompts": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/@inquirer/prompts/-/prompts-6.0.1.tgz",
      "integrity": "sha512-yl43JD/86CIj3Mz5mvvLJqAOfIup7ncxfJ0Btnl0/v5TouVUyeEdcpknfgc+yMevS/48oH9WAkkw93m7otLb/A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@inquirer/checkbox": "^3.0.1",
        "@inquirer/confirm": "^4.0.1",
        "@inquirer/editor": "^3.0.1",
        "@inquirer/expand": "^3.0.1",
        "@inquirer/input": "^3.0.1",
        "@inquirer/number": "^2.0.1",
        "@inquirer/password": "^3.0.1",
        "@inquirer/rawlist": "^3.0.1",
        "@inquirer/search": "^2.0.1",
        "@inquirer/select": "^3.0.1"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@inquirer/rawlist": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@inquirer/rawlist/-/rawlist-3.0.1.tgz",
      "integrity": "sha512-VgRtFIwZInUzTiPLSfDXK5jLrnpkuSOh1ctfaoygKAdPqjcjKYmGh6sCY1pb0aGnCGsmhUxoqLDUAU0ud+lGXQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@inquirer/core": "^9.2.1",
        "@inquirer/type": "^2.0.0",
        "yoctocolors-cjs": "^2.1.2"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@inquirer/search": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@inquirer/search/-/search-2.0.1.tgz",
      "integrity": "sha512-r5hBKZk3g5MkIzLVoSgE4evypGqtOannnB3PKTG9NRZxyFRKcfzrdxXXPcoJQsxJPzvdSU2Rn7pB7lw0GCmGAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@inquirer/core": "^9.2.1",
        "@inquirer/figures": "^1.0.6",
        "@inquirer/type": "^2.0.0",
        "yoctocolors-cjs": "^2.1.2"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@inquirer/select": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@inquirer/select/-/select-3.0.1.tgz",
      "integrity": "sha512-lUDGUxPhdWMkN/fHy1Lk7pF3nK1fh/gqeyWXmctefhxLYxlDsc7vsPBEpxrfVGDsVdyYJsiJoD4bJ1b623cV1Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@inquirer/core": "^9.2.1",
        "@inquirer/figures": "^1.0.6",
        "@inquirer/type": "^2.0.0",
        "ansi-escapes": "^4.3.2",
        "yoctocolors-cjs": "^2.1.2"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@inquirer/type": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@inquirer/type/-/type-2.0.0.tgz",
      "integrity": "sha512-XvJRx+2KR3YXyYtPUUy+qd9i7p+GO9Ko6VIIpWlBrpWwXDv8WLFeHTxz35CfQFUiBMLXlGHhGzys7lqit9gWag==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mute-stream": "^1.0.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@isaacs/balanced-match": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/@isaacs/balanced-match/-/balanced-match-4.0.1.tgz",
      "integrity": "sha512-yzMTt9lEb8Gv7zRioUilSglI0c0smZ9k5D65677DLWLtWJaXIS3CqcGyUFByYKlnUj6TkjLVs54fBl6+TiGQDQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "20 || >=22"
      }
    },
    "node_modules/@isaacs/brace-expansion": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/@isaacs/brace-expansion/-/brace-expansion-5.0.0.tgz",
      "integrity": "sha512-ZT55BDLV0yv0RBm2czMiZ+SqCGO7AvmOM3G/w2xhVPH+te0aKgFjmBvGlL1dH+ql2tgGO3MVrbb3jCKyvpgnxA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@isaacs/balanced-match": "^4.0.1"
      },
      "engines": {
        "node": "20 || >=22"
      }
    },
    "node_modules/@isaacs/cliui": {
      "version": "8.0.2",
      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "string-width": "^5.1.2",
        "string-width-cjs": "npm:string-width@^4.2.0",
        "strip-ansi": "^7.0.1",
        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
        "wrap-ansi": "^8.1.0",
        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/ansi-regex": {
      "version": "6.2.2",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.2.2.tgz",
      "integrity": "sha512-Bq3SmSpyFHaWjPk8If9yc6svM8c56dB5BAtW4Qbw5jHTwwXXcTLoRMkpDJp6VL0XzlWaCHTXrkFURMYmD0sLqg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/ansi-styles": {
      "version": "6.2.3",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.3.tgz",
      "integrity": "sha512-4Dj6M28JB+oAH8kFkTLUo+a2jwOFkuqb3yucU0CANcRRUbxS0cP0nZYCGjcc3BNXwRIsUVmDGgzawme7zvJHvg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/strip-ansi": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.2.tgz",
      "integrity": "sha512-gmBGslpoQJtgnMAvOVqGZpEz9dyoKTCzy2nfz/n8aIFhN/jCE/rCmcxabB6jOOHV+0WNnylOxaxBQPSvcWklhA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/wrap-ansi": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^6.1.0",
        "string-width": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/@istanbuljs/schema": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.13",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.13.tgz",
      "integrity": "sha512-2kkt/7niJ6MgEPxF0bYdQ6etZaA+fQvDcLKckhy1yIQOzaoKjBBjSj63/aLVjYE3qhRt5dvM+uUyfCg6UKCBbA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/remapping": {
      "version": "2.3.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/remapping/-/remapping-2.3.5.tgz",
      "integrity": "sha512-LI9u/+laYG4Ds1TDKSJW2YPrIlcVYOwi2fUC6xB43lueCjgxV4lffOCZCtYFiH6TNOX+tQKXx97T4IKHbhyHEQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.5",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.5.tgz",
      "integrity": "sha512-cYQ9310grqxueWbl+WuIUIaiUaDcj7WOq5fVhEljNVgRfOUhY9fy2zTvfoqWsnebh8Sl70VScFbICvJnLKB0Og==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.31",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.31.tgz",
      "integrity": "sha512-zzNR+SdQSDJzc8joaeP8QQoCQr8NuYx2dIIytl1QeBEZHJ9uW6hebsrYgbz8hJwUQao3TWCMtmfV8Nu1twOLAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@listr2/prompt-adapter-inquirer": {
      "version": "2.0.22",
      "resolved": "https://registry.npmjs.org/@listr2/prompt-adapter-inquirer/-/prompt-adapter-inquirer-2.0.22.tgz",
      "integrity": "sha512-hV36ZoY+xKL6pYOt1nPNnkciFkn89KZwqLhAFzJvYysAvL5uBQdiADZx/8bIDXIukzzwG0QlPYolgMzQUtKgpQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@inquirer/type": "^1.5.5"
      },
      "engines": {
        "node": ">=18.0.0"
      },
      "peerDependencies": {
        "@inquirer/prompts": ">= 3 < 8"
      }
    },
    "node_modules/@listr2/prompt-adapter-inquirer/node_modules/@inquirer/type": {
      "version": "1.5.5",
      "resolved": "https://registry.npmjs.org/@inquirer/type/-/type-1.5.5.tgz",
      "integrity": "sha512-MzICLu4yS7V8AA61sANROZ9vT1H3ooca5dSmI1FjZkzq7o/koMsRfQSzRtFo+F3Ao4Sf1C0bpLKejpKB/+j6MA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mute-stream": "^1.0.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@malept/cross-spawn-promise": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@malept/cross-spawn-promise/-/cross-spawn-promise-2.0.0.tgz",
      "integrity": "sha512-1DpKU0Z5ThltBwjNySMC14g0CkbyhCaz9FkhxqNsZI6uAPJXFS8cMXlBKo26FJ8ZuW6S9GCMcR9IO5k2X5/9Fg==",
      "dev": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/malept"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/subscription/pkg/npm-.malept-cross-spawn-promise?utm_medium=referral&utm_source=npm_fund"
        }
      ],
      "license": "Apache-2.0",
      "dependencies": {
        "cross-spawn": "^7.0.1"
      },
      "engines": {
        "node": ">= 12.13.0"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@npmcli/fs": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/@npmcli/fs/-/fs-2.1.2.tgz",
      "integrity": "sha512-yOJKRvohFOaLqipNtwYB9WugyZKhC/DZC4VYPmpaCzDBrA8YpK3qHZ8/HGscMnE4GqbkLNuVcCnxkeQEdGt6LQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "@gar/promisify": "^1.1.3",
        "semver": "^7.3.5"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/@npmcli/fs/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@npmcli/move-file": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/@npmcli/move-file/-/move-file-2.0.1.tgz",
      "integrity": "sha512-mJd2Z5TjYWq/ttPLLGqArdtnC74J6bOzg4rMDnN+p1xTacZ2yPRCk2y0oSWQtygLR9YVQXgOcONrwtnk3JupxQ==",
      "deprecated": "This functionality has been moved to @npmcli/fs",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mkdirp": "^1.0.4",
        "rimraf": "^3.0.2"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/@npmcli/move-file/node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/@pkgjs/parseargs": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@rolldown/pluginutils": {
      "version": "1.0.0-beta.35",
      "resolved": "https://registry.npmjs.org/@rolldown/pluginutils/-/pluginutils-1.0.0-beta.35.tgz",
      "integrity": "sha512-slYrCpoxJUqzFDDNlvrOYRazQUNRvWPjXA17dAOISY3rDMxX6k8K4cj2H+hEYMHF81HO3uNd5rHVigAWRM5dSg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.52.0.tgz",
      "integrity": "sha512-VxDYCDqOaR7NXzAtvRx7G1u54d2kEHopb28YH/pKzY6y0qmogP3gG7CSiWsq9WvDFxOQMpNEyjVAHZFXfH3o/A==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.52.0.tgz",
      "integrity": "sha512-pqDirm8koABIKvzL59YI9W9DWbRlTX7RWhN+auR8HXJxo89m4mjqbah7nJZjeKNTNYopqL+yGg+0mhCpf3xZtQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.52.0.tgz",
      "integrity": "sha512-YCdWlY/8ltN6H78HnMsRHYlPiKvqKagBP1r+D7SSylxX+HnsgXGCmLiV3Y4nSyY9hW8qr8U9LDUx/Lo7M6MfmQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.52.0.tgz",
      "integrity": "sha512-z4nw6y1j+OOSGzuVbSWdIp1IUks9qNw4dc7z7lWuWDKojY38VMWBlEN7F9jk5UXOkUcp97vA1N213DF+Lz8BRg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.52.0.tgz",
      "integrity": "sha512-Q/dv9Yvyr5rKlK8WQJZVrp5g2SOYeZUs9u/t2f9cQ2E0gJjYB/BWoedXfUT0EcDJefi2zzVfhcOj8drWCzTviw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.52.0.tgz",
      "integrity": "sha512-kdBsLs4Uile/fbjZVvCRcKB4q64R+1mUq0Yd7oU1CMm1Av336ajIFqNFovByipciuUQjBCPMxwJhCgfG2re3rg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.52.0.tgz",
      "integrity": "sha512-aL6hRwu0k7MTUESgkg7QHY6CoqPgr6gdQXRJI1/VbFlUMwsSzPGSR7sG5d+MCbYnJmJwThc2ol3nixj1fvI/zQ==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.52.0.tgz",
      "integrity": "sha512-BTs0M5s1EJejgIBJhCeiFo7GZZ2IXWkFGcyZhxX4+8usnIo5Mti57108vjXFIQmmJaRyDwmV59Tw64Ap1dkwMw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.52.0.tgz",
      "integrity": "sha512-uj672IVOU9m08DBGvoPKPi/J8jlVgjh12C9GmjjBxCTQc3XtVmRkRKyeHSmIKQpvJ7fIm1EJieBUcnGSzDVFyw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.52.0.tgz",
      "integrity": "sha512-/+IVbeDMDCtB/HP/wiWsSzduD10SEGzIZX2945KSgZRNi4TSkjHqRJtNTVtVb8IRwhJ65ssI56krlLik+zFWkw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loong64-gnu": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loong64-gnu/-/rollup-linux-loong64-gnu-4.52.0.tgz",
      "integrity": "sha512-U1vVzvSWtSMWKKrGoROPBXMh3Vwn93TA9V35PldokHGqiUbF6erSzox/5qrSMKp6SzakvyjcPiVF8yB1xKr9Pg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-ppc64-gnu": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-ppc64-gnu/-/rollup-linux-ppc64-gnu-4.52.0.tgz",
      "integrity": "sha512-X/4WfuBAdQRH8cK3DYl8zC00XEE6aM472W+QCycpQJeLWVnHfkv7RyBFVaTqNUMsTgIX8ihMjCvFF9OUgeABzw==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.52.0.tgz",
      "integrity": "sha512-xIRYc58HfWDBZoLmWfWXg2Sq8VCa2iJ32B7mqfWnkx5mekekl0tMe7FHpY8I72RXEcUkaWawRvl3qA55og+cwQ==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.52.0.tgz",
      "integrity": "sha512-mbsoUey05WJIOz8U1WzNdf+6UMYGwE3fZZnQqsM22FZ3wh1N887HT6jAOjXs6CNEK3Ntu2OBsyQDXfIjouI4dw==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.52.0.tgz",
      "integrity": "sha512-qP6aP970bucEi5KKKR4AuPFd8aTx9EF6BvutvYxmZuWLJHmnq4LvBfp0U+yFDMGwJ+AIJEH5sIP+SNypauMWzg==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.52.0.tgz",
      "integrity": "sha512-nmSVN+F2i1yKZ7rJNKO3G7ZzmxJgoQBQZ/6c4MuS553Grmr7WqR7LLDcYG53Z2m9409z3JLt4sCOhLdbKQ3HmA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.52.0.tgz",
      "integrity": "sha512-2d0qRo33G6TfQVjaMR71P+yJVGODrt5V6+T0BDYH4EMfGgdC/2HWDVjSSFw888GSzAZUwuska3+zxNUCDco6rQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-openharmony-arm64": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-openharmony-arm64/-/rollup-openharmony-arm64-4.52.0.tgz",
      "integrity": "sha512-A1JalX4MOaFAAyGgpO7XP5khquv/7xKzLIyLmhNrbiCxWpMlnsTYr8dnsWM7sEeotNmxvSOEL7F65j0HXFcFsw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openharmony"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.52.0.tgz",
      "integrity": "sha512-YQugafP/rH0eOOHGjmNgDURrpYHrIX0yuojOI8bwCyXwxC9ZdTd3vYkmddPX0oHONLXu9Rb1dDmT0VNpjkzGGw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.52.0.tgz",
      "integrity": "sha512-zYdUYhi3Qe2fndujBqL5FjAFzvNeLxtIqfzNEVKD1I7C37/chv1VxhscWSQHTNfjPCrBFQMnynwA3kpZpZ8w4A==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-gnu": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-gnu/-/rollup-win32-x64-gnu-4.52.0.tgz",
      "integrity": "sha512-fGk03kQylNaCOQ96HDMeT7E2n91EqvCDd3RwvT5k+xNdFCeMGnj5b5hEgTGrQuyidqSsD3zJDQ21QIaxXqTBJw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.52.0.tgz",
      "integrity": "sha512-6iKDCVSIUQ8jPMoIV0OytRKniaYyy5EbY/RRydmLW8ZR3cEBhxbWl5ro0rkUNe0ef6sScvhbY79HrjRm8i3vDQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@sindresorhus/is": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-4.6.0.tgz",
      "integrity": "sha512-t09vSN3MdfsyCHoFcTRCH/iUtG7OJ0CsjzB8cjAmKc/va/kIgeDI/TxsigdncE/4be734m0cvIYwNaV4i2XqAw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/is?sponsor=1"
      }
    },
    "node_modules/@szmarczak/http-timer": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-4.0.6.tgz",
      "integrity": "sha512-4BAffykYOgO+5nzBWYwE3W90sBgLJoUPRWWcL8wlyiM8IB8ipJz3UMJ9KXQd1RKQXpKp8Tutn80HZtWsu2u76w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "defer-to-connect": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@testing-library/dom": {
      "version": "10.4.1",
      "resolved": "https://registry.npmjs.org/@testing-library/dom/-/dom-10.4.1.tgz",
      "integrity": "sha512-o4PXJQidqJl82ckFaXUeoAW+XysPLauYI43Abki5hABd853iMhitooc6znOnczgbTYmEP6U6/y1ZyKAIsvMKGg==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@babel/code-frame": "^7.10.4",
        "@babel/runtime": "^7.12.5",
        "@types/aria-query": "^5.0.1",
        "aria-query": "5.3.0",
        "dom-accessibility-api": "^0.5.9",
        "lz-string": "^1.5.0",
        "picocolors": "1.1.1",
        "pretty-format": "^27.0.2"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@testing-library/jest-dom": {
      "version": "6.8.0",
      "resolved": "https://registry.npmjs.org/@testing-library/jest-dom/-/jest-dom-6.8.0.tgz",
      "integrity": "sha512-WgXcWzVM6idy5JaftTVC8Vs83NKRmGJz4Hqs4oyOuO2J4r/y79vvKZsb+CaGyCSEbUPI6OsewfPd0G1A0/TUZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@adobe/css-tools": "^4.4.0",
        "aria-query": "^5.0.0",
        "css.escape": "^1.5.1",
        "dom-accessibility-api": "^0.6.3",
        "picocolors": "^1.1.1",
        "redent": "^3.0.0"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=6",
        "yarn": ">=1"
      }
    },
    "node_modules/@testing-library/jest-dom/node_modules/dom-accessibility-api": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/dom-accessibility-api/-/dom-accessibility-api-0.6.3.tgz",
      "integrity": "sha512-7ZgogeTnjuHbo+ct10G9Ffp0mif17idi0IyWNVA/wcwcm7NPOD/WEHVP3n7n3MhXqxoIYm8d6MuZohYWIZ4T3w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@testing-library/react": {
      "version": "16.3.0",
      "resolved": "https://registry.npmjs.org/@testing-library/react/-/react-16.3.0.tgz",
      "integrity": "sha512-kFSyxiEDwv1WLl2fgsq6pPBbw5aWKrsY2/noi1Id0TK0UParSF62oFQFGHXIyaG4pp2tEub/Zlel+fjjZILDsw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/runtime": "^7.12.5"
      },
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "@testing-library/dom": "^10.0.0",
        "@types/react": "^18.0.0 || ^19.0.0",
        "@types/react-dom": "^18.0.0 || ^19.0.0",
        "react": "^18.0.0 || ^19.0.0",
        "react-dom": "^18.0.0 || ^19.0.0"
      },
      "peerDependenciesMeta": {
        "@types/react": {
          "optional": true
        },
        "@types/react-dom": {
          "optional": true
        }
      }
    },
    "node_modules/@tootallnate/once": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@tootallnate/once/-/once-2.0.0.tgz",
      "integrity": "sha512-XCuKFP5PS55gnMVu3dty8KPatLqUoy/ZYzDzAGCQ8JNFCkLXzmI7vNHCR+XpbZaMWQK/vQubr7PkYq8g470J/A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@types/aria-query": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/@types/aria-query/-/aria-query-5.0.4.tgz",
      "integrity": "sha512-rfT93uj5s0PRL7EzccGMs3brplhcrghnDoV26NqKhCAS1hVo+WdNsPvE/yb6ilfr5hi2MEk6d5EWJTKdxg8jVw==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.28.0.tgz",
      "integrity": "sha512-8PvcXf70gTDZBgt9ptxJ8elBeBjcLOAcOtoO/mPJjtji1+CdGbHgm77om1GrsPxsiE+uXIpNSK64UYaIwQXd4Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.2"
      }
    },
    "node_modules/@types/cacheable-request": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/@types/cacheable-request/-/cacheable-request-6.0.3.tgz",
      "integrity": "sha512-IQ3EbTzGxIigb1I3qPZc1rWJnH0BmSKv5QYTalEwweFvyBDLSAe24zP0le/hyi7ecGfZVlIVAg4BZqb8WBwKqw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/http-cache-semantics": "*",
        "@types/keyv": "^3.1.4",
        "@types/node": "*",
        "@types/responselike": "^1.0.0"
      }
    },
    "node_modules/@types/chai": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/@types/chai/-/chai-5.2.2.tgz",
      "integrity": "sha512-8kB30R7Hwqf40JPiKhVzodJs2Qc1ZJ5zuT3uzw5Hq/dhNCl3G3l83jfpdI1e20BP348+fV7VIL/+FxaXkqBmWg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/deep-eql": "*"
      }
    },
    "node_modules/@types/debug": {
      "version": "4.1.12",
      "resolved": "https://registry.npmjs.org/@types/debug/-/debug-4.1.12.tgz",
      "integrity": "sha512-vIChWdVG3LG1SMxEvI/AK+FWJthlrqlTu7fbrlywTkkaONwk/UAGaULXRlf8vkzFBLVm0zkMdCquhL5aOjhXPQ==",
      "license": "MIT",
      "dependencies": {
        "@types/ms": "*"
      }
    },
    "node_modules/@types/deep-eql": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/@types/deep-eql/-/deep-eql-4.0.2.tgz",
      "integrity": "sha512-c9h9dVVMigMPc4bwTvC5dxqtqJZwQPePsWjPlpSOnojbor6pGqdk541lfA7AqFQr5pB1BRdq0juY9db81BwyFw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/electron": {
      "version": "1.4.38",
      "resolved": "https://registry.npmjs.org/@types/electron/-/electron-1.4.38.tgz",
      "integrity": "sha512-Cu6laqBamT6VSPi0LLlF9vE9Os8EbTaI/5eJSsd7CPoLUG3Znjh04u9TxMhQYPF1wGFM14Z8TFQ2914JZ+rGLg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "license": "MIT"
    },
    "node_modules/@types/estree-jsx": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/@types/estree-jsx/-/estree-jsx-1.0.5.tgz",
      "integrity": "sha512-52CcUVNFyfb1A2ALocQw/Dd1BQFNmSdkuC3BkZ6iqhdMfQz7JWOFRuJFloOzjk+6WijU56m9oKXFAXc7o3Towg==",
      "license": "MIT",
      "dependencies": {
        "@types/estree": "*"
      }
    },
    "node_modules/@types/fs-extra": {
      "version": "9.0.13",
      "resolved": "https://registry.npmjs.org/@types/fs-extra/-/fs-extra-9.0.13.tgz",
      "integrity": "sha512-nEnwB++1u5lVDM2UI4c1+5R+FYaKfaAzS4OococimjVm3nQw3TuzH5UNsocrcTBbhnerblyHj4A49qXbIiZdpA==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/hast": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/hast/-/hast-3.0.4.tgz",
      "integrity": "sha512-WPs+bbQw5aCj+x6laNGWLH3wviHtoCv/P3+otBhbOhJgG8qtpdAMlTCxLtsTWA7LH1Oh/bFCHsBn0TPS5m30EQ==",
      "license": "MIT",
      "dependencies": {
        "@types/unist": "*"
      }
    },
    "node_modules/@types/http-cache-semantics": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/@types/http-cache-semantics/-/http-cache-semantics-4.0.4.tgz",
      "integrity": "sha512-1m0bIFVc7eJWyve9S0RnuRgcQqF/Xd5QsUZAZeQFr1Q3/p9JWoQQEqmVy+DPTNpGXwhgIetAoYF8JSc33q29QA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/keyv": {
      "version": "3.1.4",
      "resolved": "https://registry.npmjs.org/@types/keyv/-/keyv-3.1.4.tgz",
      "integrity": "sha512-BQ5aZNSCpj7D6K2ksrRCTmKRLEpnPvWDiLPfoGyhZ++8YtiK9d/3DBKPJgry359X/P1PfruyYwvnvwFjuEiEIg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/mdast": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/@types/mdast/-/mdast-4.0.4.tgz",
      "integrity": "sha512-kGaNbPh1k7AFzgpud/gMdvIm5xuECykRR+JnWKQno9TAXVa6WIVCGTPvYGekIDL4uwCZQSYbUxNBSb1aUo79oA==",
      "license": "MIT",
      "dependencies": {
        "@types/unist": "*"
      }
    },
    "node_modules/@types/mime-types": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@types/mime-types/-/mime-types-3.0.1.tgz",
      "integrity": "sha512-xRMsfuQbnRq1Ef+C+RKaENOxXX87Ygl38W1vDfPHRku02TgQr+Qd8iivLtAMcR0KF5/29xlnFihkTlbqFrGOVQ==",
      "license": "MIT"
    },
    "node_modules/@types/ms": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/@types/ms/-/ms-2.1.0.tgz",
      "integrity": "sha512-GsCCIZDE/p3i96vtEqx+7dBUGXrc7zeSK3wwPHIaRThS+9OhWIXRqzs4d6k1SVU8g91DrNRWxWUGhp5KXQb2VA==",
      "license": "MIT"
    },
    "node_modules/@types/mute-stream": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/@types/mute-stream/-/mute-stream-0.0.4.tgz",
      "integrity": "sha512-CPM9nzrCPPJHQNA9keH9CVkVI+WR5kMa+7XEs5jcGQ0VoAGnLv242w8lIVgwAEfmE4oufJRaTc9PNLQl0ioAow==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/node": {
      "version": "24.5.2",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-24.5.2.tgz",
      "integrity": "sha512-FYxk1I7wPv3K2XBaoyH2cTnocQEu8AOZ60hPbsyukMPLv5/5qr7V1i8PLHdl6Zf87I+xZXFvPCXYjiTFq+YSDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "undici-types": "~7.12.0"
      }
    },
    "node_modules/@types/react": {
      "version": "19.1.13",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-19.1.13.tgz",
      "integrity": "sha512-hHkbU/eoO3EG5/MZkuFSKmYqPbSVk5byPFa3e7y/8TybHiLMACgI8seVYlicwk7H5K/rI2px9xrQp/C+AUDTiQ==",
      "license": "MIT",
      "dependencies": {
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "19.1.9",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-19.1.9.tgz",
      "integrity": "sha512-qXRuZaOsAdXKFyOhRBg6Lqqc0yay13vN7KrIg4L7N4aaHN68ma9OK3NE1BoDFgFOTfM7zg+3/8+2n8rLUH3OKQ==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "@types/react": "^19.0.0"
      }
    },
    "node_modules/@types/responselike": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/@types/responselike/-/responselike-1.0.3.tgz",
      "integrity": "sha512-H/+L+UkTV33uf49PH5pCAUBVPNj2nDBXTN+qS1dOwyyg24l3CcicicCA7ca+HMvJBZcFgl5r8e+RR6elsb4Lyw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/unist": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/@types/unist/-/unist-3.0.3.tgz",
      "integrity": "sha512-ko/gIFJRv177XgZsZcBwnqJN5x/Gien8qNOn0D5bQU/zAzVf9Zt3BlcUiLqhV9y4ARk0GbT3tnUiPNgnTXzc/Q==",
      "license": "MIT"
    },
    "node_modules/@types/wrap-ansi": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@types/wrap-ansi/-/wrap-ansi-3.0.0.tgz",
      "integrity": "sha512-ltIpx+kM7g/MLRZfkbL7EsCEjfzCcScLpkg37eXEtx5kmrAKBkTJwd1GIAjDSL8wTpM6Hzn5YO4pSb91BEwu1g==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/yauzl": {
      "version": "2.10.3",
      "resolved": "https://registry.npmjs.org/@types/yauzl/-/yauzl-2.10.3.tgz",
      "integrity": "sha512-oJoftv0LSuaDZE3Le4DbKX+KS9G36NzOeSap90UIK0yMA/NhKJhqlSGtNDORNRaIbQfzjXDrQa0ytJ6mNRGz/Q==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@ungap/structured-clone": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/@ungap/structured-clone/-/structured-clone-1.3.0.tgz",
      "integrity": "sha512-WmoN8qaIAo7WTYWbAZuG8PYEhn5fkz7dZrqTBZ7dtt//lL2Gwms1IcnQ5yHqjDfX8Ft5j4YzDM23f87zBfDe9g==",
      "license": "ISC"
    },
    "node_modules/@vitejs/plugin-react": {
      "version": "5.0.3",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-react/-/plugin-react-5.0.3.tgz",
      "integrity": "sha512-PFVHhosKkofGH0Yzrw1BipSedTH68BFF8ZWy1kfUpCtJcouXXY0+racG8sExw7hw0HoX36813ga5o3LTWZ4FUg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.28.4",
        "@babel/plugin-transform-react-jsx-self": "^7.27.1",
        "@babel/plugin-transform-react-jsx-source": "^7.27.1",
        "@rolldown/pluginutils": "1.0.0-beta.35",
        "@types/babel__core": "^7.20.5",
        "react-refresh": "^0.17.0"
      },
      "engines": {
        "node": "^20.19.0 || >=22.12.0"
      },
      "peerDependencies": {
        "vite": "^4.2.0 || ^5.0.0 || ^6.0.0 || ^7.0.0"
      }
    },
    "node_modules/@vitest/coverage-v8": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/@vitest/coverage-v8/-/coverage-v8-3.2.4.tgz",
      "integrity": "sha512-EyF9SXU6kS5Ku/U82E259WSnvg6c8KTjppUncuNdm5QHpe17mwREHnjDzozC8x9MZ0xfBUFSaLkRv4TMA75ALQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.3.0",
        "@bcoe/v8-coverage": "^1.0.2",
        "ast-v8-to-istanbul": "^0.3.3",
        "debug": "^4.4.1",
        "istanbul-lib-coverage": "^3.2.2",
        "istanbul-lib-report": "^3.0.1",
        "istanbul-lib-source-maps": "^5.0.6",
        "istanbul-reports": "^3.1.7",
        "magic-string": "^0.30.17",
        "magicast": "^0.3.5",
        "std-env": "^3.9.0",
        "test-exclude": "^7.0.1",
        "tinyrainbow": "^2.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      },
      "peerDependencies": {
        "@vitest/browser": "3.2.4",
        "vitest": "3.2.4"
      },
      "peerDependenciesMeta": {
        "@vitest/browser": {
          "optional": true
        }
      }
    },
    "node_modules/@vitest/expect": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/@vitest/expect/-/expect-3.2.4.tgz",
      "integrity": "sha512-Io0yyORnB6sikFlt8QW5K7slY4OjqNX9jmJQ02QDda8lyM6B5oNgVWoSoKPac8/kgnCUzuHQKrSLtu/uOqqrig==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/chai": "^5.2.2",
        "@vitest/spy": "3.2.4",
        "@vitest/utils": "3.2.4",
        "chai": "^5.2.0",
        "tinyrainbow": "^2.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/@vitest/mocker": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/@vitest/mocker/-/mocker-3.2.4.tgz",
      "integrity": "sha512-46ryTE9RZO/rfDd7pEqFl7etuyzekzEhUbTW3BvmeO/BcCMEgq59BKhek3dXDWgAj4oMK6OZi+vRr1wPW6qjEQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@vitest/spy": "3.2.4",
        "estree-walker": "^3.0.3",
        "magic-string": "^0.30.17"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      },
      "peerDependencies": {
        "msw": "^2.4.9",
        "vite": "^5.0.0 || ^6.0.0 || ^7.0.0-0"
      },
      "peerDependenciesMeta": {
        "msw": {
          "optional": true
        },
        "vite": {
          "optional": true
        }
      }
    },
    "node_modules/@vitest/pretty-format": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/@vitest/pretty-format/-/pretty-format-3.2.4.tgz",
      "integrity": "sha512-IVNZik8IVRJRTr9fxlitMKeJeXFFFN0JaB9PHPGQ8NKQbGpfjlTx9zO4RefN8gp7eqjNy8nyK3NZmBzOPeIxtA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "tinyrainbow": "^2.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/@vitest/runner": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/@vitest/runner/-/runner-3.2.4.tgz",
      "integrity": "sha512-oukfKT9Mk41LreEW09vt45f8wx7DordoWUZMYdY/cyAk7w5TWkTRCNZYF7sX7n2wB7jyGAl74OxgwhPgKaqDMQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@vitest/utils": "3.2.4",
        "pathe": "^2.0.3",
        "strip-literal": "^3.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/@vitest/snapshot": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/@vitest/snapshot/-/snapshot-3.2.4.tgz",
      "integrity": "sha512-dEYtS7qQP2CjU27QBC5oUOxLE/v5eLkGqPE0ZKEIDGMs4vKWe7IjgLOeauHsR0D5YuuycGRO5oSRXnwnmA78fQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@vitest/pretty-format": "3.2.4",
        "magic-string": "^0.30.17",
        "pathe": "^2.0.3"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/@vitest/spy": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/@vitest/spy/-/spy-3.2.4.tgz",
      "integrity": "sha512-vAfasCOe6AIK70iP5UD11Ac4siNUNJ9i/9PZ3NKx07sG6sUxeag1LWdNrMWeKKYBLlzuK+Gn65Yd5nyL6ds+nw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "tinyspy": "^4.0.3"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/@vitest/utils": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/@vitest/utils/-/utils-3.2.4.tgz",
      "integrity": "sha512-fB2V0JFrQSMsCo9HiSq3Ezpdv4iYaXRG1Sx8edX3MwxfyNn83mKiGzOcH+Fkxt4MHxr3y42fQi1oeAInqgX2QA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@vitest/pretty-format": "3.2.4",
        "loupe": "^3.1.4",
        "tinyrainbow": "^2.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/@vscode/sudo-prompt": {
      "version": "9.3.1",
      "resolved": "https://registry.npmjs.org/@vscode/sudo-prompt/-/sudo-prompt-9.3.1.tgz",
      "integrity": "sha512-9ORTwwS74VaTn38tNbQhsA5U44zkJfcb0BdTSyyG6frP4e8KMtHuTXYmwefe5dpL8XB1aGSIVTaLjD3BbWb5iA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@xmldom/xmldom": {
      "version": "0.8.11",
      "resolved": "https://registry.npmjs.org/@xmldom/xmldom/-/xmldom-0.8.11.tgz",
      "integrity": "sha512-cQzWCtO6C8TQiYl1ruKNn2U6Ao4o4WBBcbL61yJl84x+j5sOWWFU9X7DpND8XZG3daDppSsigMdfAIl2upQBRw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/agentkeepalive": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.6.0.tgz",
      "integrity": "sha512-kja8j7PjmncONqaTsB8fQ+wE2mSU2DJ9D4XKoJ5PFWIdRMa6SLSN1ff4mOr4jCbfRSsxR4keIiySJU0N9T5hIQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "humanize-ms": "^1.2.1"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/aggregate-error": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/aggregate-error/-/aggregate-error-3.1.0.tgz",
      "integrity": "sha512-4I7Td01quW/RpocfNayFdFVk1qSuoh0E7JrbRJ16nH01HhKFQ88INq9Sd+nd72zqRySlr9BmDA8xlEJ6vJMrYA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "clean-stack": "^2.0.0",
        "indent-string": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-escapes": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.21.3"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-escapes/node_modules/type-fest": {
      "version": "0.21.3",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/aria-query": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/aria-query/-/aria-query-5.3.0.tgz",
      "integrity": "sha512-b0P0sZPKtyu8HkeRAfCq0IfURZK+SuwMjY1UXGBU27wpAiTwQAIlq56IbIO+ytk/JjS1fMR14ee5WBBfKi5J6A==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "dequal": "^2.0.3"
      }
    },
    "node_modules/assertion-error": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/assertion-error/-/assertion-error-2.0.1.tgz",
      "integrity": "sha512-Izi8RQcffqCeNVgFigKli1ssklIbpHnCYc6AknXGYoB6grJqyeby7jv12JUQgmTAnIDnbck1uxksT4dzN3PWBA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/ast-v8-to-istanbul": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/ast-v8-to-istanbul/-/ast-v8-to-istanbul-0.3.5.tgz",
      "integrity": "sha512-9SdXjNheSiE8bALAQCQQuT6fgQaoxJh7IRYrRGZ8/9nv8WhJeC1aXAwN8TbaOssGOukUvyvnkgD9+Yuykvl1aA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.30",
        "estree-walker": "^3.0.3",
        "js-tokens": "^9.0.1"
      }
    },
    "node_modules/ast-v8-to-istanbul/node_modules/js-tokens": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-9.0.1.tgz",
      "integrity": "sha512-mxa9E9ITFOt0ban3j6L5MpjwegGz6lBQmM1IJkWeBZGcMxto50+eWdjC/52xDbS2vy0k7vIMK0Fe2wfL9OQSpQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/at-least-node": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/at-least-node/-/at-least-node-1.0.0.tgz",
      "integrity": "sha512-+q/t7Ekv1EDY2l6Gda6LLiX14rU9TV20Wa3ofeQmwPFZbOMo9DXrLbOjFaaclkXKWidIaopwAObQDqwWtGUjqg==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/author-regex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/author-regex/-/author-regex-1.0.0.tgz",
      "integrity": "sha512-KbWgR8wOYRAPekEmMXrYYdc7BRyhn2Ftk7KWfMUnQ43hFdojWEFRxhhRUm3/OFEdPa1r0KAvTTg9YQK57xTe0g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/bail": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/bail/-/bail-2.0.2.tgz",
      "integrity": "sha512-0xO6mYd7JB2YesxDKplafRpsiOzPt9V02ddPCLbY1xYGPOX24NTyN50qnUxgCPcSoYMhKpAuBTjQoRZCAkUDRw==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/baseline-browser-mapping": {
      "version": "2.8.6",
      "resolved": "https://registry.npmjs.org/baseline-browser-mapping/-/baseline-browser-mapping-2.8.6.tgz",
      "integrity": "sha512-wrH5NNqren/QMtKUEEJf7z86YjfqW/2uw3IL3/xpqZUC95SSVIFXYQeeGjL6FT/X68IROu6RMehZQS5foy2BXw==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "baseline-browser-mapping": "dist/cli.js"
      }
    },
    "node_modules/bidi-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/bidi-js/-/bidi-js-1.0.3.tgz",
      "integrity": "sha512-RKshQI1R3YQ+n9YJz2QQ147P66ELpa1FQEg20Dk8oW9t2KgLbpDLLp9aGZ7y8WHSshDknG0bknqGw5/tyCs5tw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "require-from-string": "^2.0.2"
      }
    },
    "node_modules/bl": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/bl/-/bl-4.1.0.tgz",
      "integrity": "sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "buffer": "^5.5.0",
        "inherits": "^2.0.4",
        "readable-stream": "^3.4.0"
      }
    },
    "node_modules/bluebird": {
      "version": "3.7.2",
      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.7.2.tgz",
      "integrity": "sha512-XpNj6GDQzdfW+r2Wnn7xiSAd7TM3jzkxGXBGTtWKuSXv1xUV+azxAm8jdWZN06QTQk+2N2XB9jRDkvbmQmcRtg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/boolean": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/boolean/-/boolean-3.2.0.tgz",
      "integrity": "sha512-d0II/GO9uf9lfUHH2BQsjxzRJZBdsjgsBiW4BvhWk/3qoKwQFjIDVN19PfX8F2D/r9PCMTtLWjYVCFrpeYUzsw==",
      "deprecated": "Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.",
      "dev": true,
      "license": "MIT",
      "optional": true
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.26.2",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.26.2.tgz",
      "integrity": "sha512-ECFzp6uFOSB+dcZ5BK/IBaGWssbSYBHvuMeMt3MMFyhI0Z8SqGgEkBLARgpRH3hutIgPVsALcMwbDrJqPxQ65A==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "baseline-browser-mapping": "^2.8.3",
        "caniuse-lite": "^1.0.30001741",
        "electron-to-chromium": "^1.5.218",
        "node-releases": "^2.0.21",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/buffer": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.1.13"
      }
    },
    "node_modules/buffer-crc32": {
      "version": "0.2.13",
      "resolved": "https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.13.tgz",
      "integrity": "sha512-VO9Ht/+p3SN7SKWqcrgEzjGbRSJYTx+Q1pTQC0wrWqHx0vpJraQ6GtHx8tvcg1rlK1byhU5gccxgOgj7B0TDkQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cac": {
      "version": "6.7.14",
      "resolved": "https://registry.npmjs.org/cac/-/cac-6.7.14.tgz",
      "integrity": "sha512-b6Ilus+c3RrdDk+JhLKUAQfzzgLEPy6wcXqS7f/xe1EETvsDP6GORG7SFuOs6cID5YkqchW/LXZbX5bc8j7ZcQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cacache": {
      "version": "16.1.3",
      "resolved": "https://registry.npmjs.org/cacache/-/cacache-16.1.3.tgz",
      "integrity": "sha512-/+Emcj9DAXxX4cwlLmRI9c166RuL3w30zp4R7Joiv2cQTtTtA+jeuCAjH3ZlGnYS3tKENSrKhAzVVP9GVyzeYQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "@npmcli/fs": "^2.1.0",
        "@npmcli/move-file": "^2.0.0",
        "chownr": "^2.0.0",
        "fs-minipass": "^2.1.0",
        "glob": "^8.0.1",
        "infer-owner": "^1.0.4",
        "lru-cache": "^7.7.1",
        "minipass": "^3.1.6",
        "minipass-collect": "^1.0.2",
        "minipass-flush": "^1.0.5",
        "minipass-pipeline": "^1.2.4",
        "mkdirp": "^1.0.4",
        "p-map": "^4.0.0",
        "promise-inflight": "^1.0.1",
        "rimraf": "^3.0.2",
        "ssri": "^9.0.0",
        "tar": "^6.1.11",
        "unique-filename": "^2.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/cacache/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/cacache/node_modules/glob": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/glob/-/glob-8.1.0.tgz",
      "integrity": "sha512-r8hpEjiQEYlF2QU0df3dS+nxxSIreXQS1qRhMJM0Q5NDdR386C7jb7Hwwod8Fgiuex+k0GFjgft18yvxm5XoCQ==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^5.0.1",
        "once": "^1.3.0"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/cacache/node_modules/minimatch": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.6.tgz",
      "integrity": "sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/cacache/node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/cacache/node_modules/rimraf/node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/cacache/node_modules/rimraf/node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/cacache/node_modules/rimraf/node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/cacheable-lookup": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/cacheable-lookup/-/cacheable-lookup-5.0.4.tgz",
      "integrity": "sha512-2/kNscPhpcxrOigMZzbiWF7dz8ilhb/nIHU3EyZiXWXpeq/au8qJ8VhdftMkty3n7Gj6HIGalQG8oiBNB3AJgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10.6.0"
      }
    },
    "node_modules/cacheable-request": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-7.0.4.tgz",
      "integrity": "sha512-v+p6ongsrp0yTGbJXjgxPow2+DL93DASP4kXCDKb8/bwRtt9OEF3whggkkDkGNzgcWy2XaF4a8nZglC7uElscg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "clone-response": "^1.0.2",
        "get-stream": "^5.1.0",
        "http-cache-semantics": "^4.0.0",
        "keyv": "^4.0.0",
        "lowercase-keys": "^2.0.0",
        "normalize-url": "^6.0.1",
        "responselike": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001743",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001743.tgz",
      "integrity": "sha512-e6Ojr7RV14Un7dz6ASD0aZDmQPT/A+eZU+nuTNfjqmRrmkmQlnTNWH0SKmqagx9PeW87UVqapSurtAXifmtdmw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/ccount": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/ccount/-/ccount-2.0.1.tgz",
      "integrity": "sha512-eyrF0jiFpY+3drT6383f1qhkbGsLSifNAjA61IUjZjmLCWjItY6LB9ft9YhoDgwfmclB2zhu51Lc7+95b8NRAg==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/chai": {
      "version": "5.3.3",
      "resolved": "https://registry.npmjs.org/chai/-/chai-5.3.3.tgz",
      "integrity": "sha512-4zNhdJD/iOjSH0A05ea+Ke6MU5mmpQcbQsSOkgdaUMJ9zTlDTD/GYlwohmIE2u0gaxHYiVHEn1Fw9mZ/ktJWgw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "assertion-error": "^2.0.1",
        "check-error": "^2.1.1",
        "deep-eql": "^5.0.1",
        "loupe": "^3.1.0",
        "pathval": "^2.0.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/character-entities": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/character-entities/-/character-entities-2.0.2.tgz",
      "integrity": "sha512-shx7oQ0Awen/BRIdkjkvz54PnEEI/EjwXDSIZp86/KKdbafHh1Df/RYGBhn4hbe2+uKC9FnT5UCEdyPz3ai9hQ==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/character-entities-html4": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/character-entities-html4/-/character-entities-html4-2.1.0.tgz",
      "integrity": "sha512-1v7fgQRj6hnSwFpq1Eu0ynr/CDEw0rXo2B61qXrLNdHZmPKgb7fqS1a2JwF0rISo9q77jDI8VMEHoApn8qDoZA==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/character-entities-legacy": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/character-entities-legacy/-/character-entities-legacy-3.0.0.tgz",
      "integrity": "sha512-RpPp0asT/6ufRm//AJVwpViZbGM/MkjQFxJccQRHmISF/22NBtsHqAWmL+/pmkPWoIUJdWyeVleTl1wydHATVQ==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/character-reference-invalid": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/character-reference-invalid/-/character-reference-invalid-2.0.1.tgz",
      "integrity": "sha512-iBZ4F4wRbyORVsu0jPV7gXkOsGYjGHPmAyv+HiHG8gi5PtC9KI2j1+v8/tlibRvjoWX027ypmG/n0HtO5t7unw==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/chardet": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/chardet/-/chardet-0.7.0.tgz",
      "integrity": "sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/check-error": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/check-error/-/check-error-2.1.1.tgz",
      "integrity": "sha512-OAlb+T7V4Op9OwdkjmguYRqncdlx5JiofwOAUkmTF+jNdHwzTaTs4sRAGpzLF3oOz5xAyDGrPgeIDFQmDOTiJw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 16"
      }
    },
    "node_modules/chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/chrome-trace-event": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/chrome-trace-event/-/chrome-trace-event-1.0.4.tgz",
      "integrity": "sha512-rNjApaLzuwaOTjCiT8lSDdGN1APCiqkChLMJxJPWLunPAt5fy8xgU9/jNOchV84wfIxrA0lRQB7oCT8jrn/wrQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0"
      }
    },
    "node_modules/clean-stack": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/clean-stack/-/clean-stack-2.2.0.tgz",
      "integrity": "sha512-4diC9HaTE+KRAMWhDhrGOECgWZxoevMc5TlkObMqNSsVU62PYzXZ/SMTjzyGAFF1YusgxGcSWTEXBhp0CPwQ1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/cli-cursor": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-4.0.0.tgz",
      "integrity": "sha512-VGtlMu3x/4DOtIUwEkRezxUZ2lBacNJCHash0N0WeZDBS+7Ux1dm3XWAgWYxLJFMMdOeXMHXorshEFhbMSGelg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "restore-cursor": "^4.0.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/cli-spinners": {
      "version": "2.9.2",
      "resolved": "https://registry.npmjs.org/cli-spinners/-/cli-spinners-2.9.2.tgz",
      "integrity": "sha512-ywqV+5MmyL4E7ybXgKys4DugZbX0FC6LnwrhjuykIjnK9k8OQacQ7axGKnjDXWNhns0xot3bZI5h55H8yo9cJg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/cli-truncate": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/cli-truncate/-/cli-truncate-3.1.0.tgz",
      "integrity": "sha512-wfOBkjXteqSnI59oPcJkcPl/ZmwvMMOj340qUIY1SKZCv0B9Cf4D4fAucRkIKQmsIuYK3x1rrgU7MeGRruiuiA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "slice-ansi": "^5.0.0",
        "string-width": "^5.0.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/cli-width": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/cli-width/-/cli-width-4.1.0.tgz",
      "integrity": "sha512-ouuZd4/dm2Sw5Gmqy6bGyNNNe1qt9RpmxveLSO7KcgsTnU7RXfsw+/bukWGo1abgBiMAic068rclZsO4IWmmxQ==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/cliui/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cliui/node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cliui/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cliui/node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/clone": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/clone/-/clone-1.0.4.tgz",
      "integrity": "sha512-JQHZ2QMW6l3aH/j6xCqQThY/9OH4D/9ls34cgkUBiEeocRTU04tHfKPBsUK1PqZCUQM7GiA0IIXJSuXHI64Kbg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/clone-response": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/clone-response/-/clone-response-1.0.3.tgz",
      "integrity": "sha512-ROoL94jJH2dUVML2Y/5PEDNaSHgeOdSDicUyS7izcF63G6sTc/FTjLub4b8Il9S8S0beOfYt0TaA5qvFK+w0wA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mimic-response": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/colorette": {
      "version": "2.0.20",
      "resolved": "https://registry.npmjs.org/colorette/-/colorette-2.0.20.tgz",
      "integrity": "sha512-IfEDxwoWIjkeXL1eXcDiow4UbKjhLdq6/EuSVR9GMN7KVH3r9gQ83e73hsz1Nd1T3ijd5xv1wcWRYO+D6kCI2w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/comma-separated-tokens": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/comma-separated-tokens/-/comma-separated-tokens-2.0.3.tgz",
      "integrity": "sha512-Fu4hJdvzeylCfQPp9SGWidpzrMs7tTrlu6Vb8XGaRGck8QSNZJJp538Wrb60Lax4fPwR64ViY468OIUTbRlGZg==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/commander": {
      "version": "11.1.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-11.1.0.tgz",
      "integrity": "sha512-yPVavfyCcRhmorC7rWlkHn15b4wDVgVmBA7kV4QVBsF7kv/9TKJAbAXVTxvTnwP8HHKjRCJDClKbciiYS7p0DQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/compare-version": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/compare-version/-/compare-version-0.1.2.tgz",
      "integrity": "sha512-pJDh5/4wrEnXX/VWRZvruAGHkzKdr46z11OlTPN+VrATlWWhSKewNCJ1futCO5C7eJB3nPMFZA1LeYtcFboZ2A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/concurrently": {
      "version": "9.2.1",
      "resolved": "https://registry.npmjs.org/concurrently/-/concurrently-9.2.1.tgz",
      "integrity": "sha512-fsfrO0MxV64Znoy8/l1vVIjjHa29SZyyqPgQBwhiDcaW8wJc2W3XWVOGx4M3oJBnv/zdUZIIp1gDeS98GzP8Ng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chalk": "4.1.2",
        "rxjs": "7.8.2",
        "shell-quote": "1.8.3",
        "supports-color": "8.1.1",
        "tree-kill": "1.2.2",
        "yargs": "17.7.2"
      },
      "bin": {
        "conc": "dist/bin/concurrently.js",
        "concurrently": "dist/bin/concurrently.js"
      },
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/open-cli-tools/concurrently?sponsor=1"
      }
    },
    "node_modules/concurrently/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/copyfiles": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/copyfiles/-/copyfiles-2.4.1.tgz",
      "integrity": "sha512-fereAvAvxDrQDOXybk3Qu3dPbOoKoysFMWtkY3mv5BsL8//OSZVL5DCLYqgRfY5cWirgRzlC+WSrxp6Bo3eNZg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "glob": "^7.0.5",
        "minimatch": "^3.0.3",
        "mkdirp": "^1.0.4",
        "noms": "0.0.0",
        "through2": "^2.0.1",
        "untildify": "^4.0.0",
        "yargs": "^16.1.0"
      },
      "bin": {
        "copyfiles": "copyfiles",
        "copyup": "copyfiles"
      }
    },
    "node_modules/copyfiles/node_modules/cliui": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.0",
        "wrap-ansi": "^7.0.0"
      }
    },
    "node_modules/copyfiles/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/copyfiles/node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/copyfiles/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/copyfiles/node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/copyfiles/node_modules/yargs": {
      "version": "16.2.0",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-16.2.0.tgz",
      "integrity": "sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "cliui": "^7.0.2",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.0",
        "y18n": "^5.0.5",
        "yargs-parser": "^20.2.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/copyfiles/node_modules/yargs-parser": {
      "version": "20.2.9",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-20.2.9.tgz",
      "integrity": "sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/core-util-is": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz",
      "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cross-dirname": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/cross-dirname/-/cross-dirname-0.1.0.tgz",
      "integrity": "sha512-+R08/oI0nl3vfPcqftZRpytksBXDzOUveBq/NBVx0sUp1axwzPQrKinNx5yd5sxPu8j1wIy8AfnVQ+5eFdha6Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/cross-zip": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/cross-zip/-/cross-zip-4.0.1.tgz",
      "integrity": "sha512-n63i0lZ0rvQ6FXiGQ+/JFCKAUyPFhLQYJIqKaa+tSJtfKeULF/IDNDAbdnSIxgS4NTuw2b0+lj8LzfITuq+ZxQ==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=12.10"
      }
    },
    "node_modules/css-tree": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/css-tree/-/css-tree-3.1.0.tgz",
      "integrity": "sha512-0eW44TGN5SQXU1mWSkKwFstI/22X2bG1nYzZTYMAWjylYURhse752YgbE4Cx46AC+bAvI+/dYTPRk1LqSUnu6w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mdn-data": "2.12.2",
        "source-map-js": "^1.0.1"
      },
      "engines": {
        "node": "^10 || ^12.20.0 || ^14.13.0 || >=15.0.0"
      }
    },
    "node_modules/css.escape": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/css.escape/-/css.escape-1.5.1.tgz",
      "integrity": "sha512-YUifsXXuknHlUsmlgyY0PKzgPOr7/FjCePfHNt0jxm83wHZi44VDMQ7/fGNkjY3/jV1MC+1CmZbaHzugyeRtpg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cssstyle": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/cssstyle/-/cssstyle-5.3.1.tgz",
      "integrity": "sha512-g5PC9Aiph9eiczFpcgUhd9S4UUO3F+LHGRIi5NUMZ+4xtoIYbHNZwZnWA2JsFGe8OU8nl4WyaEFiZuGuxlutJQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@asamuzakjp/css-color": "^4.0.3",
        "@csstools/css-syntax-patches-for-csstree": "^1.0.14",
        "css-tree": "^3.1.0"
      },
      "engines": {
        "node": ">=20"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.3.tgz",
      "integrity": "sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==",
      "license": "MIT"
    },
    "node_modules/d3": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/d3/-/d3-7.9.0.tgz",
      "integrity": "sha512-e1U46jVP+w7Iut8Jt8ri1YsPOvFpg46k+K8TpCb0P+zjCkjkPnV7WzfDJzMHy1LnA+wj5pLT1wjO901gLXeEhA==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "3",
        "d3-axis": "3",
        "d3-brush": "3",
        "d3-chord": "3",
        "d3-color": "3",
        "d3-contour": "4",
        "d3-delaunay": "6",
        "d3-dispatch": "3",
        "d3-drag": "3",
        "d3-dsv": "3",
        "d3-ease": "3",
        "d3-fetch": "3",
        "d3-force": "3",
        "d3-format": "3",
        "d3-geo": "3",
        "d3-hierarchy": "3",
        "d3-interpolate": "3",
        "d3-path": "3",
        "d3-polygon": "3",
        "d3-quadtree": "3",
        "d3-random": "3",
        "d3-scale": "4",
        "d3-scale-chromatic": "3",
        "d3-selection": "3",
        "d3-shape": "3",
        "d3-time": "3",
        "d3-time-format": "4",
        "d3-timer": "3",
        "d3-transition": "3",
        "d3-zoom": "3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-array": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/d3-array/-/d3-array-3.2.4.tgz",
      "integrity": "sha512-tdQAmyA18i4J7wprpYq8ClcxZy3SC31QMeByyCFyRt7BVHdREQZ5lpzoe5mFEYZUWe+oq8HBvk9JjpibyEV4Jg==",
      "license": "ISC",
      "dependencies": {
        "internmap": "1 - 2"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-axis": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/d3-axis/-/d3-axis-3.0.0.tgz",
      "integrity": "sha512-IH5tgjV4jE/GhHkRV0HiVYPDtvfjHQlQfJHs0usq7M30XcSBvOotpmH1IgkcXsO/5gEQZD43B//fc7SRT5S+xw==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-brush": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/d3-brush/-/d3-brush-3.0.0.tgz",
      "integrity": "sha512-ALnjWlVYkXsVIGlOsuWH1+3udkYFI48Ljihfnh8FZPF2QS9o+PzGLBslO0PjzVoHLZ2KCVgAM8NVkXPJB2aNnQ==",
      "license": "ISC",
      "dependencies": {
        "d3-dispatch": "1 - 3",
        "d3-drag": "2 - 3",
        "d3-interpolate": "1 - 3",
        "d3-selection": "3",
        "d3-transition": "3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-chord": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-chord/-/d3-chord-3.0.1.tgz",
      "integrity": "sha512-VE5S6TNa+j8msksl7HwjxMHDM2yNK3XCkusIlpX5kwauBfXuyLAtNg9jCp/iHH61tgI4sb6R/EIMWCqEIdjT/g==",
      "license": "ISC",
      "dependencies": {
        "d3-path": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-color": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-color/-/d3-color-3.1.0.tgz",
      "integrity": "sha512-zg/chbXyeBtMQ1LbD/WSoW2DpC3I0mpmPdW+ynRTj/x2DAWYrIY7qeZIHidozwV24m4iavr15lNwIwLxRmOxhA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-contour": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/d3-contour/-/d3-contour-4.0.2.tgz",
      "integrity": "sha512-4EzFTRIikzs47RGmdxbeUvLWtGedDUNkTcmzoeyg4sP/dvCexO47AaQL7VKy/gul85TOxw+IBgA8US2xwbToNA==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "^3.2.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-delaunay": {
      "version": "6.0.4",
      "resolved": "https://registry.npmjs.org/d3-delaunay/-/d3-delaunay-6.0.4.tgz",
      "integrity": "sha512-mdjtIZ1XLAM8bm/hx3WwjfHt6Sggek7qH043O8KEjDXN40xi3vx/6pYSVTwLjEgiXQTbvaouWKynLBiUZ6SK6A==",
      "license": "ISC",
      "dependencies": {
        "delaunator": "5"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-dispatch": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-dispatch/-/d3-dispatch-3.0.1.tgz",
      "integrity": "sha512-rzUyPU/S7rwUflMyLc1ETDeBj0NRuHKKAcvukozwhshr6g6c5d8zh4c2gQjY2bZ0dXeGLWc1PF174P2tVvKhfg==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-drag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/d3-drag/-/d3-drag-3.0.0.tgz",
      "integrity": "sha512-pWbUJLdETVA8lQNJecMxoXfH6x+mO2UQo8rSmZ+QqxcbyA3hfeprFgIT//HW2nlHChWeIIMwS2Fq+gEARkhTkg==",
      "license": "ISC",
      "dependencies": {
        "d3-dispatch": "1 - 3",
        "d3-selection": "3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-dsv": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-dsv/-/d3-dsv-3.0.1.tgz",
      "integrity": "sha512-UG6OvdI5afDIFP9w4G0mNq50dSOsXHJaRE8arAS5o9ApWnIElp8GZw1Dun8vP8OyHOZ/QJUKUJwxiiCCnUwm+Q==",
      "license": "ISC",
      "dependencies": {
        "commander": "7",
        "iconv-lite": "0.6",
        "rw": "1"
      },
      "bin": {
        "csv2json": "bin/dsv2json.js",
        "csv2tsv": "bin/dsv2dsv.js",
        "dsv2dsv": "bin/dsv2dsv.js",
        "dsv2json": "bin/dsv2json.js",
        "json2csv": "bin/json2dsv.js",
        "json2dsv": "bin/json2dsv.js",
        "json2tsv": "bin/json2dsv.js",
        "tsv2csv": "bin/dsv2dsv.js",
        "tsv2json": "bin/dsv2json.js"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-dsv/node_modules/commander": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-7.2.0.tgz",
      "integrity": "sha512-QrWXB+ZQSVPmIWIhtEO9H+gwHaMGYiF5ChvoJ+K9ZGHG/sVsa6yiesAD1GC/x46sET00Xlwo1u49RVVVzvcSkw==",
      "license": "MIT",
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/d3-dsv/node_modules/iconv-lite": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/d3-ease": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-ease/-/d3-ease-3.0.1.tgz",
      "integrity": "sha512-wR/XK3D3XcLIZwpbvQwQ5fK+8Ykds1ip7A2Txe0yxncXSdq1L9skcG7blcedkOX+ZcgxGAmLX1FrRGbADwzi0w==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-fetch": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-fetch/-/d3-fetch-3.0.1.tgz",
      "integrity": "sha512-kpkQIM20n3oLVBKGg6oHrUchHM3xODkTzjMoj7aWQFq5QEM+R6E4WkzT5+tojDY7yjez8KgCBRoj4aEr99Fdqw==",
      "license": "ISC",
      "dependencies": {
        "d3-dsv": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-force": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/d3-force/-/d3-force-3.0.0.tgz",
      "integrity": "sha512-zxV/SsA+U4yte8051P4ECydjD/S+qeYtnaIyAs9tgHCqfguma/aAQDjo85A9Z6EKhBirHRJHXIgJUlffT4wdLg==",
      "license": "ISC",
      "dependencies": {
        "d3-dispatch": "1 - 3",
        "d3-quadtree": "1 - 3",
        "d3-timer": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-format": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-format/-/d3-format-3.1.0.tgz",
      "integrity": "sha512-YyUI6AEuY/Wpt8KWLgZHsIU86atmikuoOmCfommt0LYHiQSPjvX2AcFc38PX0CBpr2RCyZhjex+NS/LPOv6YqA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-geo": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/d3-geo/-/d3-geo-3.1.1.tgz",
      "integrity": "sha512-637ln3gXKXOwhalDzinUgY83KzNWZRKbYubaG+fGVuc/dxO64RRljtCTnf5ecMyE1RIdtqpkVcq0IbtU2S8j2Q==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2.5.0 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-hierarchy": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/d3-hierarchy/-/d3-hierarchy-3.1.2.tgz",
      "integrity": "sha512-FX/9frcub54beBdugHjDCdikxThEqjnR93Qt7PvQTOHxyiNCAlvMrHhclk3cD5VeAaq9fxmfRp+CnWw9rEMBuA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-interpolate": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-interpolate/-/d3-interpolate-3.0.1.tgz",
      "integrity": "sha512-3bYs1rOD33uo8aqJfKP3JWPAibgw8Zm2+L9vBKEHJ2Rg+viTR7o5Mmv5mZcieN+FRYaAOWX5SJATX6k1PWz72g==",
      "license": "ISC",
      "dependencies": {
        "d3-color": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-path": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-path/-/d3-path-3.1.0.tgz",
      "integrity": "sha512-p3KP5HCf/bvjBSSKuXid6Zqijx7wIfNW+J/maPs+iwR35at5JCbLUT0LzF1cnjbCHWhqzQTIN2Jpe8pRebIEFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-polygon": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-polygon/-/d3-polygon-3.0.1.tgz",
      "integrity": "sha512-3vbA7vXYwfe1SYhED++fPUQlWSYTTGmFmQiany/gdbiWgU/iEyQzyymwL9SkJjFFuCS4902BSzewVGsHHmHtXg==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-quadtree": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-quadtree/-/d3-quadtree-3.0.1.tgz",
      "integrity": "sha512-04xDrxQTDTCFwP5H6hRhsRcb9xxv2RzkcsygFzmkSIOJy3PeRJP7sNk3VRIbKXcog561P9oU0/rVH6vDROAgUw==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-random": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-random/-/d3-random-3.0.1.tgz",
      "integrity": "sha512-FXMe9GfxTxqd5D6jFsQ+DJ8BJS4E/fT5mqqdjovykEB2oFbTMDVdg1MGFxfQW+FBOGoB++k8swBrgwSHT1cUXQ==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-scale": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/d3-scale/-/d3-scale-4.0.2.tgz",
      "integrity": "sha512-GZW464g1SH7ag3Y7hXjf8RoUuAFIqklOAq3MRl4OaWabTFJY9PN/E1YklhXLh+OQ3fM9yS2nOkCoS+WLZ6kvxQ==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2.10.0 - 3",
        "d3-format": "1 - 3",
        "d3-interpolate": "1.2.0 - 3",
        "d3-time": "2.1.1 - 3",
        "d3-time-format": "2 - 4"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-scale-chromatic": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-scale-chromatic/-/d3-scale-chromatic-3.1.0.tgz",
      "integrity": "sha512-A3s5PWiZ9YCXFye1o246KoscMWqf8BsD9eRiJ3He7C9OBaxKhAd5TFCdEx/7VbKtxxTsu//1mMJFrEt572cEyQ==",
      "license": "ISC",
      "dependencies": {
        "d3-color": "1 - 3",
        "d3-interpolate": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-selection": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/d3-selection/-/d3-selection-3.0.0.tgz",
      "integrity": "sha512-fmTRWbNMmsmWq6xJV8D19U/gw/bwrHfNXxrIN+HfZgnzqTHp9jOmKMhsTUjXOJnZOdZY9Q28y4yebKzqDKlxlQ==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-shape": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/d3-shape/-/d3-shape-3.2.0.tgz",
      "integrity": "sha512-SaLBuwGm3MOViRq2ABk3eLoxwZELpH6zhl3FbAoJ7Vm1gofKx6El1Ib5z23NUEhF9AsGl7y+dzLe5Cw2AArGTA==",
      "license": "ISC",
      "dependencies": {
        "d3-path": "^3.1.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/d3-time/-/d3-time-3.1.0.tgz",
      "integrity": "sha512-VqKjzBLejbSMT4IgbmVgDjpkYrNWUYJnbCGo874u7MMKIWsILRX+OpX/gTk8MqjpT1A/c6HY2dCA77ZN0lkQ2Q==",
      "license": "ISC",
      "dependencies": {
        "d3-array": "2 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-time-format": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/d3-time-format/-/d3-time-format-4.1.0.tgz",
      "integrity": "sha512-dJxPBlzC7NugB2PDLwo9Q8JiTR3M3e4/XANkreKSUxF8vvXKqm1Yfq4Q5dl8budlunRVlUUaDUgFt7eA8D6NLg==",
      "license": "ISC",
      "dependencies": {
        "d3-time": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-timer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-timer/-/d3-timer-3.0.1.tgz",
      "integrity": "sha512-ndfJ/JxxMd3nw31uyKoY2naivF+r29V+Lc0svZxe1JvvIRmi8hUsrMvdOwgS1o6uBHmiz91geQ0ylPP0aj1VUA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/d3-transition": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/d3-transition/-/d3-transition-3.0.1.tgz",
      "integrity": "sha512-ApKvfjsSR6tg06xrL434C0WydLr7JewBB3V+/39RMHsaXTOG0zmt/OAXeng5M5LBm0ojmxJrpomQVZ1aPvBL4w==",
      "license": "ISC",
      "dependencies": {
        "d3-color": "1 - 3",
        "d3-dispatch": "1 - 3",
        "d3-ease": "1 - 3",
        "d3-interpolate": "1 - 3",
        "d3-timer": "1 - 3"
      },
      "engines": {
        "node": ">=12"
      },
      "peerDependencies": {
        "d3-selection": "2 - 3"
      }
    },
    "node_modules/d3-zoom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/d3-zoom/-/d3-zoom-3.0.0.tgz",
      "integrity": "sha512-b8AmV3kfQaqWAuacbPuNbL6vahnOJflOhexLzMMNLga62+/nh0JzvJ0aO/5a5MVgUFGS7Hu1P9P03o3fJkDCyw==",
      "license": "ISC",
      "dependencies": {
        "d3-dispatch": "1 - 3",
        "d3-drag": "2 - 3",
        "d3-interpolate": "1 - 3",
        "d3-selection": "2 - 3",
        "d3-transition": "2 - 3"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/data-urls": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/data-urls/-/data-urls-6.0.0.tgz",
      "integrity": "sha512-BnBS08aLUM+DKamupXs3w2tJJoqU+AkaE/+6vQxi/G/DPmIZFJJp9Dkb1kM03AZx8ADehDUZgsNxju3mPXZYIA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "whatwg-mimetype": "^4.0.0",
        "whatwg-url": "^15.0.0"
      },
      "engines": {
        "node": ">=20"
      }
    },
    "node_modules/data-urls/node_modules/tr46": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-6.0.0.tgz",
      "integrity": "sha512-bLVMLPtstlZ4iMQHpFHTR7GAGj2jxi8Dg0s2h2MafAE4uSWF98FC/3MomU51iQAMf8/qDUbKWf5GxuvvVcXEhw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "punycode": "^2.3.1"
      },
      "engines": {
        "node": ">=20"
      }
    },
    "node_modules/data-urls/node_modules/webidl-conversions": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-8.0.0.tgz",
      "integrity": "sha512-n4W4YFyz5JzOfQeA8oN7dUYpR+MBP3PIUsn2jLjWXwK5ASUzt0Jc/A5sAUZoCYFJRGF0FBKJ+1JjN43rNdsQzA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=20"
      }
    },
    "node_modules/data-urls/node_modules/whatwg-url": {
      "version": "15.1.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-15.1.0.tgz",
      "integrity": "sha512-2ytDk0kiEj/yu90JOAp44PVPUkO9+jVhyf+SybKlRHSDlvOOZhdPIrr7xTH64l4WixO2cP+wQIcgujkGBPPz6g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "tr46": "^6.0.0",
        "webidl-conversions": "^8.0.0"
      },
      "engines": {
        "node": ">=20"
      }
    },
    "node_modules/debug": {
      "version": "4.4.3",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.3.tgz",
      "integrity": "sha512-RGwwWnwQvkVfavKVt22FGLw+xYSdzARwm0ru6DhTVA3umU5hZc28V3kO4stgYryrTlLpuvgI9GiijltAjNbcqA==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/decimal.js": {
      "version": "10.6.0",
      "resolved": "https://registry.npmjs.org/decimal.js/-/decimal.js-10.6.0.tgz",
      "integrity": "sha512-YpgQiITW3JXGntzdUmyUR1V812Hn8T1YVXhCu+wO3OpS4eU9l4YdD3qjyiKdV6mvV29zapkMeD390UVEf2lkUg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/decode-named-character-reference": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/decode-named-character-reference/-/decode-named-character-reference-1.2.0.tgz",
      "integrity": "sha512-c6fcElNV6ShtZXmsgNgFFV5tVX2PaV4g+MOAkb8eXHvn6sryJBrZa9r0zV6+dtTyoCKxtDy5tyQ5ZwQuidtd+Q==",
      "license": "MIT",
      "dependencies": {
        "character-entities": "^2.0.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/decompress-response": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-6.0.0.tgz",
      "integrity": "sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mimic-response": "^3.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/decompress-response/node_modules/mimic-response": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-3.1.0.tgz",
      "integrity": "sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/deep-eql": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/deep-eql/-/deep-eql-5.0.2.tgz",
      "integrity": "sha512-h5k/5U50IJJFpzfL6nO9jaaumfjO/f2NjK/oYB2Djzm4p9L+3T9qWpZqZ2hAbLPuuYq9wrU08WQyBTL5GbPk5Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/defaults": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/defaults/-/defaults-1.0.4.tgz",
      "integrity": "sha512-eFuaLoy/Rxalv2kr+lqMlUnrDWV+3j4pljOIJgLIhI058IQfWJ7vXhyEIHu+HtC738klGALYxOKDO0bQP3tg8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "clone": "^1.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/defer-to-connect": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-2.0.1.tgz",
      "integrity": "sha512-4tvttepXG1VaYGrRibk5EwJd1t4udunSOVMdLSAL6mId1ix438oPwPZMALY41FCijukO1L0twNcGsdzS7dHgDg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/define-data-property": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "es-define-property": "^1.0.0",
        "es-errors": "^1.3.0",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/define-properties": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/define-properties/-/define-properties-1.2.1.tgz",
      "integrity": "sha512-8QmQKqEASLd5nx0U1B1okLElbUuuttJ/AnYmRXbbbGDWh6uS208EjD4Xqq/I9wK7u0v6O08XhTWnt5XtEbR6Dg==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "define-data-property": "^1.0.1",
        "has-property-descriptors": "^1.0.0",
        "object-keys": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/delaunator": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/delaunator/-/delaunator-5.0.1.tgz",
      "integrity": "sha512-8nvh+XBe96aCESrGOqMp/84b13H9cdKbG5P2ejQCh4d4sK9RL4371qou9drQjMhvnPmhWl5hnmqbEE0fXr9Xnw==",
      "license": "ISC",
      "dependencies": {
        "robust-predicates": "^3.0.2"
      }
    },
    "node_modules/dequal": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/dequal/-/dequal-2.0.3.tgz",
      "integrity": "sha512-0je+qPKHEMohvfRTCEo3CrPG6cAzAYgmzKyxRiYSSDkS6eGJdyVJm7WaYA5ECaAD9wLB2T4EEeymA5aFVcYXCA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/detect-libc": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.1.0.tgz",
      "integrity": "sha512-vEtk+OcP7VBRtQZ1EJ3bdgzSfBjgnEalLTp5zjJrS+2Z1w2KZly4SBdac/WDU3hhsNAZ9E8SC96ME4Ey8MZ7cg==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/detect-node": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/detect-node/-/detect-node-2.1.0.tgz",
      "integrity": "sha512-T0NIuQpnTvFDATNuHN5roPwSBG83rFsuO+MXXH9/3N1eFbn4wcPjttvjMLEPWJ0RGUYgQE7cGgS3tNxbqCGM7g==",
      "dev": true,
      "license": "MIT",
      "optional": true
    },
    "node_modules/devlop": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/devlop/-/devlop-1.1.0.tgz",
      "integrity": "sha512-RWmIqhcFf1lRYBvNmr7qTNuyCt/7/ns2jbpp1+PalgE/rDQcBT0fioSMUpJ93irlUhC5hrg4cYqe6U+0ImW0rA==",
      "license": "MIT",
      "dependencies": {
        "dequal": "^2.0.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/dir-compare": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/dir-compare/-/dir-compare-4.2.0.tgz",
      "integrity": "sha512-2xMCmOoMrdQIPHdsTawECdNPwlVFB9zGcz3kuhmBO6U3oU+UQjsue0i8ayLKpgBcm+hcXPMVSGUN9d+pvJ6+VQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "minimatch": "^3.0.5",
        "p-limit": "^3.1.0 "
      }
    },
    "node_modules/dom-accessibility-api": {
      "version": "0.5.16",
      "resolved": "https://registry.npmjs.org/dom-accessibility-api/-/dom-accessibility-api-0.5.16.tgz",
      "integrity": "sha512-X7BJ2yElsnOJ30pZF4uIIDfBEVgF4XEBxL9Bxhy6dnrm5hkzqmsWHGTiHqRiITNhMyFLyAiWndIJP7Z1NTteDg==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/eastasianwidth": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/electron": {
      "version": "38.1.2",
      "resolved": "https://registry.npmjs.org/electron/-/electron-38.1.2.tgz",
      "integrity": "sha512-WXUcN3W8h8NTTZViA3KNX0rV2YBU0X0mEUM3ubupXTDY4QtIN7tmiqYVOKSKpR2LckTmBWGuEeY4D6xVoffwKQ==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "dependencies": {
        "@electron/get": "^2.0.0",
        "@types/node": "^22.7.7",
        "extract-zip": "^2.0.1"
      },
      "bin": {
        "electron": "cli.js"
      },
      "engines": {
        "node": ">= 12.20.55"
      }
    },
    "node_modules/electron-installer-common": {
      "version": "0.10.4",
      "resolved": "https://registry.npmjs.org/electron-installer-common/-/electron-installer-common-0.10.4.tgz",
      "integrity": "sha512-8gMNPXfAqUE5CfXg8RL0vXpLE9HAaPkgLXVoHE3BMUzogMWenf4LmwQ27BdCUrEhkjrKl+igs2IHJibclR3z3Q==",
      "dev": true,
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@electron/asar": "^3.2.5",
        "@malept/cross-spawn-promise": "^1.0.0",
        "debug": "^4.1.1",
        "fs-extra": "^9.0.0",
        "glob": "^7.1.4",
        "lodash": "^4.17.15",
        "parse-author": "^2.0.0",
        "semver": "^7.1.1",
        "tmp-promise": "^3.0.2"
      },
      "engines": {
        "node": ">= 10.0.0"
      },
      "funding": {
        "url": "https://github.com/electron-userland/electron-installer-common?sponsor=1"
      },
      "optionalDependencies": {
        "@types/fs-extra": "^9.0.1"
      }
    },
    "node_modules/electron-installer-common/node_modules/@malept/cross-spawn-promise": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@malept/cross-spawn-promise/-/cross-spawn-promise-1.1.1.tgz",
      "integrity": "sha512-RTBGWL5FWQcg9orDOCcp4LvItNzUPcyEU9bwaeJX0rJ1IQxzucC48Y0/sQLp/g6t99IQgAlGIaesJS+gTn7tVQ==",
      "dev": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/malept"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/subscription/pkg/npm-.malept-cross-spawn-promise?utm_medium=referral&utm_source=npm_fund"
        }
      ],
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "cross-spawn": "^7.0.1"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/electron-installer-common/node_modules/fs-extra": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-9.1.0.tgz",
      "integrity": "sha512-hcg3ZmepS30/7BSFqRvoo3DOMQu7IjqxO5nCDt+zM9XWjb33Wg7ziNT+Qvqbuc3+gWpzO02JubVyk2G4Zvo1OQ==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "at-least-node": "^1.0.0",
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/electron-installer-common/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/electron-installer-common/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "optional": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/electron-installer-common/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/electron-installer-debian": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/electron-installer-debian/-/electron-installer-debian-3.2.0.tgz",
      "integrity": "sha512-58ZrlJ1HQY80VucsEIG9tQ//HrTlG6sfofA3nRGr6TmkX661uJyu4cMPPh6kXW+aHdq/7+q25KyQhDrXvRL7jw==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin",
        "linux"
      ],
      "dependencies": {
        "@malept/cross-spawn-promise": "^1.0.0",
        "debug": "^4.1.1",
        "electron-installer-common": "^0.10.2",
        "fs-extra": "^9.0.0",
        "get-folder-size": "^2.0.1",
        "lodash": "^4.17.4",
        "word-wrap": "^1.2.3",
        "yargs": "^16.0.2"
      },
      "bin": {
        "electron-installer-debian": "src/cli.js"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/electron-installer-debian/node_modules/@malept/cross-spawn-promise": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@malept/cross-spawn-promise/-/cross-spawn-promise-1.1.1.tgz",
      "integrity": "sha512-RTBGWL5FWQcg9orDOCcp4LvItNzUPcyEU9bwaeJX0rJ1IQxzucC48Y0/sQLp/g6t99IQgAlGIaesJS+gTn7tVQ==",
      "dev": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/malept"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/subscription/pkg/npm-.malept-cross-spawn-promise?utm_medium=referral&utm_source=npm_fund"
        }
      ],
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "cross-spawn": "^7.0.1"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/electron-installer-debian/node_modules/cliui": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
      "dev": true,
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.0",
        "wrap-ansi": "^7.0.0"
      }
    },
    "node_modules/electron-installer-debian/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true,
      "license": "MIT",
      "optional": true
    },
    "node_modules/electron-installer-debian/node_modules/fs-extra": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-9.1.0.tgz",
      "integrity": "sha512-hcg3ZmepS30/7BSFqRvoo3DOMQu7IjqxO5nCDt+zM9XWjb33Wg7ziNT+Qvqbuc3+gWpzO02JubVyk2G4Zvo1OQ==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "at-least-node": "^1.0.0",
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/electron-installer-debian/node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/electron-installer-debian/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/electron-installer-debian/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/electron-installer-debian/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/electron-installer-debian/node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/electron-installer-debian/node_modules/yargs": {
      "version": "16.2.0",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-16.2.0.tgz",
      "integrity": "sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "cliui": "^7.0.2",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.0",
        "y18n": "^5.0.5",
        "yargs-parser": "^20.2.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/electron-installer-debian/node_modules/yargs-parser": {
      "version": "20.2.9",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-20.2.9.tgz",
      "integrity": "sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==",
      "dev": true,
      "license": "ISC",
      "optional": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/electron-installer-redhat": {
      "version": "3.4.0",
      "resolved": "https://registry.npmjs.org/electron-installer-redhat/-/electron-installer-redhat-3.4.0.tgz",
      "integrity": "sha512-gEISr3U32Sgtj+fjxUAlSDo3wyGGq6OBx7rF5UdpIgbnpUvMN4W5uYb0ThpnAZ42VEJh/3aODQXHbFS4f5J3Iw==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin",
        "linux"
      ],
      "dependencies": {
        "@malept/cross-spawn-promise": "^1.0.0",
        "debug": "^4.1.1",
        "electron-installer-common": "^0.10.2",
        "fs-extra": "^9.0.0",
        "lodash": "^4.17.15",
        "word-wrap": "^1.2.3",
        "yargs": "^16.0.2"
      },
      "bin": {
        "electron-installer-redhat": "src/cli.js"
      },
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/electron-installer-redhat/node_modules/@malept/cross-spawn-promise": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@malept/cross-spawn-promise/-/cross-spawn-promise-1.1.1.tgz",
      "integrity": "sha512-RTBGWL5FWQcg9orDOCcp4LvItNzUPcyEU9bwaeJX0rJ1IQxzucC48Y0/sQLp/g6t99IQgAlGIaesJS+gTn7tVQ==",
      "dev": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/malept"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/subscription/pkg/npm-.malept-cross-spawn-promise?utm_medium=referral&utm_source=npm_fund"
        }
      ],
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "cross-spawn": "^7.0.1"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/electron-installer-redhat/node_modules/cliui": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
      "dev": true,
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.0",
        "wrap-ansi": "^7.0.0"
      }
    },
    "node_modules/electron-installer-redhat/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true,
      "license": "MIT",
      "optional": true
    },
    "node_modules/electron-installer-redhat/node_modules/fs-extra": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-9.1.0.tgz",
      "integrity": "sha512-hcg3ZmepS30/7BSFqRvoo3DOMQu7IjqxO5nCDt+zM9XWjb33Wg7ziNT+Qvqbuc3+gWpzO02JubVyk2G4Zvo1OQ==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "at-least-node": "^1.0.0",
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/electron-installer-redhat/node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/electron-installer-redhat/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/electron-installer-redhat/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/electron-installer-redhat/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/electron-installer-redhat/node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/electron-installer-redhat/node_modules/yargs": {
      "version": "16.2.0",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-16.2.0.tgz",
      "integrity": "sha512-D1mvvtDG0L5ft/jGWkLpG1+m0eQxOfaBvTNELraWj22wSVUMWxZUvYgJYcKh6jGGIkJFhH4IZPQhR4TKpc8mBw==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "cliui": "^7.0.2",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.0",
        "y18n": "^5.0.5",
        "yargs-parser": "^20.2.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/electron-installer-redhat/node_modules/yargs-parser": {
      "version": "20.2.9",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-20.2.9.tgz",
      "integrity": "sha512-y11nGElTIV+CT3Zv9t7VKl+Q3hTQoT9a1Qzezhhl6Rp21gJ/IVTW7Z3y9EWXhuUBC2Shnf+DX0antecpAwSP8w==",
      "dev": true,
      "license": "ISC",
      "optional": true,
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/electron-log": {
      "version": "5.4.3",
      "resolved": "https://registry.npmjs.org/electron-log/-/electron-log-5.4.3.tgz",
      "integrity": "sha512-sOUsM3LjZdugatazSQ/XTyNcw8dfvH1SYhXWiJyfYodAAKOZdHs0txPiLDXFzOZbhXgAgshQkshH2ccq0feyLQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/electron-squirrel-startup": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/electron-squirrel-startup/-/electron-squirrel-startup-1.0.1.tgz",
      "integrity": "sha512-sTfFIHGku+7PsHLJ7v0dRcZNkALrV+YEozINTW8X1nM//e5O3L+rfYuvSW00lmGHnYmUjARZulD8F2V8ISI9RA==",
      "license": "Apache-2.0",
      "dependencies": {
        "debug": "^2.2.0"
      }
    },
    "node_modules/electron-squirrel-startup/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/electron-squirrel-startup/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.222",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.222.tgz",
      "integrity": "sha512-gA7psSwSwQRE60CEoLz6JBCQPIxNeuzB2nL8vE03GK/OHxlvykbLyeiumQy1iH5C2f3YbRAZpGCMT12a/9ih9w==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/electron-winstaller": {
      "version": "5.4.0",
      "resolved": "https://registry.npmjs.org/electron-winstaller/-/electron-winstaller-5.4.0.tgz",
      "integrity": "sha512-bO3y10YikuUwUuDUQRM4KfwNkKhnpVO7IPdbsrejwN9/AABJzzTQ4GeHwyzNSrVO+tEH3/Np255a3sVZpZDjvg==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@electron/asar": "^3.2.1",
        "debug": "^4.1.1",
        "fs-extra": "^7.0.1",
        "lodash": "^4.17.21",
        "temp": "^0.9.0"
      },
      "engines": {
        "node": ">=8.0.0"
      },
      "optionalDependencies": {
        "@electron/windows-sign": "^1.1.2"
      }
    },
    "node_modules/electron-winstaller/node_modules/fs-extra": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-7.0.1.tgz",
      "integrity": "sha512-YJDaCJZEnBmcbw13fvdAM9AwNOJwOzrE4pqMqBq5nFiEqXUqHwlK4B+3pUw6JNvfSPtX05xFHtYy/1ni01eGCw==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "graceful-fs": "^4.1.2",
        "jsonfile": "^4.0.0",
        "universalify": "^0.1.0"
      },
      "engines": {
        "node": ">=6 <7 || >=8"
      }
    },
    "node_modules/electron/node_modules/@types/node": {
      "version": "22.18.6",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-22.18.6.tgz",
      "integrity": "sha512-r8uszLPpeIWbNKtvWRt/DbVi5zbqZyj1PTmhRMqBMvDnaz1QpmSKujUtJLrqGZeoM8v72MfYggDceY4K1itzWQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "undici-types": "~6.21.0"
      }
    },
    "node_modules/electron/node_modules/undici-types": {
      "version": "6.21.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-6.21.0.tgz",
      "integrity": "sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/emoji-regex": {
      "version": "9.2.2",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/encoding": {
      "version": "0.1.13",
      "resolved": "https://registry.npmjs.org/encoding/-/encoding-0.1.13.tgz",
      "integrity": "sha512-ETBauow1T35Y/WZMkio9jiM0Z5xjHHmJ4XmjZOq1l/dXz3lr2sRn87nJy20RupqSh1F2m3HHPSp8ShIPQJrJ3A==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "iconv-lite": "^0.6.2"
      }
    },
    "node_modules/encoding/node_modules/iconv-lite": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/end-of-stream": {
      "version": "1.4.5",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.5.tgz",
      "integrity": "sha512-ooEGc6HP26xXq/N+GCGOT0JKCLDGrq2bQUZrQ7gyrJiZANJ/8YDTxTpQBXGMn+WbIQXNVpyWymm7KYVICQnyOg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "once": "^1.4.0"
      }
    },
    "node_modules/entities": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/entities/-/entities-6.0.1.tgz",
      "integrity": "sha512-aN97NXWF6AWBTahfVOIrB/NShkzi5H7F9r1s9mD3cDj4Ko5f2qhhVoYMibXF7GlLveb/D2ioWay8lxI97Ven3g==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.12"
      },
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/env-paths": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/env-paths/-/env-paths-2.2.1.tgz",
      "integrity": "sha512-+h1lkLKhZMTYjog1VEpJNG7NZJWcuc2DDk/qsqSTRRCOXiLjeQ1d1/udrUGhqMxUgAlwKNZ0cf2uqan5GLuS2A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/err-code": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/err-code/-/err-code-2.0.3.tgz",
      "integrity": "sha512-2bmlRpNKBxT/CRmPOlyISQpNj+qSeYvcym/uT0Jx2bMOlKLtSy1ZmLuVxSEKKyor/N5yhvp/ZiG1oE3DEYMSFA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/error-ex": {
      "version": "1.3.4",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.4.tgz",
      "integrity": "sha512-sqQamAnR14VgCr1A618A3sGrygcpK+HEbenA/HiEAkkUwcZIIB/tgWqHFxWgOyDh4nB4JCRimh79dR5Ywc9MDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-module-lexer": {
      "version": "1.7.0",
      "resolved": "https://registry.npmjs.org/es-module-lexer/-/es-module-lexer-1.7.0.tgz",
      "integrity": "sha512-jEQoCwk8hyb2AZziIOLhDqpm5+2ww5uIE6lkO/6jcOCusfk6LhMHpXXfBLXTZ7Ydyt0j4VoUQv6uGNYbdW+kBA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/es6-error": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/es6-error/-/es6-error-4.1.1.tgz",
      "integrity": "sha512-Um/+FxMr9CISWh0bi5Zv0iOD+4cFh5qLeks1qhAopKVAJw3drgKbKySikp7wGhDL0HPeaja0P5ULZrxLkniUVg==",
      "dev": true,
      "license": "MIT",
      "optional": true
    },
    "node_modules/esbuild": {
      "version": "0.25.10",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.10.tgz",
      "integrity": "sha512-9RiGKvCwaqxO2owP61uQ4BgNborAQskMR6QusfWzQqv7AZOg5oGehdY2pRJMTKuwxd1IDBP4rSbI5lHzU7SMsQ==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.25.10",
        "@esbuild/android-arm": "0.25.10",
        "@esbuild/android-arm64": "0.25.10",
        "@esbuild/android-x64": "0.25.10",
        "@esbuild/darwin-arm64": "0.25.10",
        "@esbuild/darwin-x64": "0.25.10",
        "@esbuild/freebsd-arm64": "0.25.10",
        "@esbuild/freebsd-x64": "0.25.10",
        "@esbuild/linux-arm": "0.25.10",
        "@esbuild/linux-arm64": "0.25.10",
        "@esbuild/linux-ia32": "0.25.10",
        "@esbuild/linux-loong64": "0.25.10",
        "@esbuild/linux-mips64el": "0.25.10",
        "@esbuild/linux-ppc64": "0.25.10",
        "@esbuild/linux-riscv64": "0.25.10",
        "@esbuild/linux-s390x": "0.25.10",
        "@esbuild/linux-x64": "0.25.10",
        "@esbuild/netbsd-arm64": "0.25.10",
        "@esbuild/netbsd-x64": "0.25.10",
        "@esbuild/openbsd-arm64": "0.25.10",
        "@esbuild/openbsd-x64": "0.25.10",
        "@esbuild/openharmony-arm64": "0.25.10",
        "@esbuild/sunos-x64": "0.25.10",
        "@esbuild/win32-arm64": "0.25.10",
        "@esbuild/win32-ia32": "0.25.10",
        "@esbuild/win32-x64": "0.25.10"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-4.0.0.tgz",
      "integrity": "sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/estree-util-is-identifier-name": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/estree-util-is-identifier-name/-/estree-util-is-identifier-name-3.0.0.tgz",
      "integrity": "sha512-hFtqIDZTIUZ9BXLb8y4pYGyk6+wekIivNVTcmvk8NoOh+VeRn5y6cEHzbURrWbfp1fIqdVipilzj+lfaadNZmg==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/estree-walker": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-3.0.3.tgz",
      "integrity": "sha512-7RUKfXgSMMkzt6ZuXmqapOurLGPPfgj6l9uRZ7lRGolvk0y2yocc35LdcxKC5PQZdn2DMqioAQ2NoWcrTKmm6g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "^1.0.0"
      }
    },
    "node_modules/eventemitter3": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-5.0.1.tgz",
      "integrity": "sha512-GWkBvjiSZK87ELrYOSESUYeVIc9mvLLf/nXalMOS5dYrgZq9o5OVkbZAVM06CVxYsCwH9BDZFPlQTlPA1j4ahA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/execa": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/execa/-/execa-1.0.0.tgz",
      "integrity": "sha512-adbxcyWV46qiHyvSp50TKt05tB4tK3HcmF7/nxfAdhnox83seTDbwnaqKO4sXRy7roHAIFqJP/Rw/AuEbX61LA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "cross-spawn": "^6.0.0",
        "get-stream": "^4.0.0",
        "is-stream": "^1.1.0",
        "npm-run-path": "^2.0.0",
        "p-finally": "^1.0.0",
        "signal-exit": "^3.0.0",
        "strip-eof": "^1.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/execa/node_modules/cross-spawn": {
      "version": "6.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-6.0.6.tgz",
      "integrity": "sha512-VqCUuhcd1iB+dsv8gxPttb5iZh/D0iubSP21g36KXdEuf6I5JiioesUVjpCdHV9MZRUfVFlvwtIUyPfxo5trtw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "nice-try": "^1.0.4",
        "path-key": "^2.0.1",
        "semver": "^5.5.0",
        "shebang-command": "^1.2.0",
        "which": "^1.2.9"
      },
      "engines": {
        "node": ">=4.8"
      }
    },
    "node_modules/execa/node_modules/get-stream": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-4.1.0.tgz",
      "integrity": "sha512-GMat4EJ5161kIy2HevLlr4luNjBgvmj413KaQA7jt4V8B4RDsfpHk7WQ9GVqfYyyx8OS/L66Kox+rJRNklLK7w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "pump": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/execa/node_modules/path-key": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz",
      "integrity": "sha512-fEHGKCSmUSDPv4uoj8AlD+joPlq3peND+HRYyxFz4KPw4z926S/b8rIuFs2FYJg3BwsxJf6A9/3eIdLaYC+9Dw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/execa/node_modules/semver": {
      "version": "5.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
      "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/execa/node_modules/shebang-command": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz",
      "integrity": "sha512-EV3L1+UQWGor21OmnvojK36mhg+TyIKDh3iFBKBohr5xeXIhNBcx8oWdgkTEEQ+BEFFYdLRuqMfd5L84N1V5Vg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^1.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/execa/node_modules/shebang-regex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-1.0.0.tgz",
      "integrity": "sha512-wpoSFAxys6b2a2wHZ1XpDSgD7N9iVjg29Ph9uV/uaP9Ex/KXlkTZTeddxDPSYQpgvzKLGJke2UU0AzoGCjNIvQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/execa/node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/execa/node_modules/which": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "which": "bin/which"
      }
    },
    "node_modules/expect-type": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/expect-type/-/expect-type-1.2.2.tgz",
      "integrity": "sha512-JhFGDVJ7tmDJItKhYgJCGLOWjuK9vPxiXoUFLwLDc99NlmklilbiQJwoctZtt13+xMw91MCk/REan6MWHqDjyA==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/exponential-backoff": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/exponential-backoff/-/exponential-backoff-3.1.2.tgz",
      "integrity": "sha512-8QxYTVXUkuy7fIIoitQkPwGonB8F3Zj8eEO8Sqg9Zv/bkI7RJAzowee4gr81Hak/dUTpA2Z7VfQgoijjPNlUZA==",
      "dev": true,
      "license": "Apache-2.0"
    },
    "node_modules/extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==",
      "license": "MIT"
    },
    "node_modules/external-editor": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/external-editor/-/external-editor-3.1.0.tgz",
      "integrity": "sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chardet": "^0.7.0",
        "iconv-lite": "^0.4.24",
        "tmp": "^0.0.33"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/extract-zip": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/extract-zip/-/extract-zip-2.0.1.tgz",
      "integrity": "sha512-GDhU9ntwuKyGXdZBUgTIe+vXnWj0fppUEtMDL0+idd5Sta8TGpHssn/eusA9mrPr9qNDym6SxAYZjNvCn/9RBg==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "debug": "^4.1.1",
        "get-stream": "^5.1.0",
        "yauzl": "^2.10.0"
      },
      "bin": {
        "extract-zip": "cli.js"
      },
      "engines": {
        "node": ">= 10.17.0"
      },
      "optionalDependencies": {
        "@types/yauzl": "^2.9.1"
      }
    },
    "node_modules/fast-glob": {
      "version": "3.3.3",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.3.tgz",
      "integrity": "sha512-7MptL8U0cqcFdzIzwOTHoilX9x5BrNqye7Z/LuC7kCMRio1EMSyqRK3BEAUD7sXRq4iT4AzTVuZdhgQ2TCvYLg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.8"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fastq": {
      "version": "1.19.1",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.19.1.tgz",
      "integrity": "sha512-GwLTyxkCXjXbxqIhTsMI2Nui8huMPtnxg7krajPJAjnEG/iiOS7i+zCtWGZR9G0NBKbXKh6X9m9UIsYX/N6vvQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/fd-slicer": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/fd-slicer/-/fd-slicer-1.1.0.tgz",
      "integrity": "sha512-cE1qsB/VwyQozZ+q1dGxR8LBYNZeofhEdUNGSMbQD3Gw2lAzX9Zb3uIU6Ebc/Fmyjo9AWWfnn0AUCHqtevs/8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "pend": "~1.2.0"
      }
    },
    "node_modules/filename-reserved-regex": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/filename-reserved-regex/-/filename-reserved-regex-2.0.0.tgz",
      "integrity": "sha512-lc1bnsSr4L4Bdif8Xb/qrtokGbq5zlsms/CYH8PP+WtCkGNF65DPiQY8vG3SakEdRn8Dlnm+gW/qWKKjS5sZzQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/filenamify": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/filenamify/-/filenamify-4.3.0.tgz",
      "integrity": "sha512-hcFKyUG57yWGAzu1CMt/dPzYZuv+jAJUT85bL8mrXvNe6hWj6yEHEc4EdcgiA6Z3oi1/9wXJdZPXF2dZNgwgOg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "filename-reserved-regex": "^2.0.0",
        "strip-outer": "^1.0.1",
        "trim-repeated": "^1.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/find-up": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
      "integrity": "sha512-78/PXT1wlLLDgTzDs7sjq9hzz0vXD+zn+7wypEe4fXQxCmdmqfGsEPQxmiCSQI3ajFV91bVSsvNtrJRiW6nGng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^6.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/flora-colossus": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/flora-colossus/-/flora-colossus-2.0.0.tgz",
      "integrity": "sha512-dz4HxH6pOvbUzZpZ/yXhafjbR2I8cenK5xL0KtBFb7U2ADsR+OwXifnxZjij/pZWF775uSCMzWVd+jDik2H2IA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^4.3.4",
        "fs-extra": "^10.1.0"
      },
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/flora-colossus/node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/flora-colossus/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/flora-colossus/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/foreground-child": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.1.tgz",
      "integrity": "sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "cross-spawn": "^7.0.6",
        "signal-exit": "^4.0.1"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/fs-extra": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-8.1.0.tgz",
      "integrity": "sha512-yhlQgA6mnOJUKOsRUFsgJdQCvkKhcz8tlZG5HBQfReYZy46OwLcY+Zia0mtdHsOo9y/hP+CxMN0TU9QxoOtG4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^4.0.0",
        "universalify": "^0.1.0"
      },
      "engines": {
        "node": ">=6 <7 || >=8"
      }
    },
    "node_modules/fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/galactus": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/galactus/-/galactus-1.0.0.tgz",
      "integrity": "sha512-R1fam6D4CyKQGNlvJne4dkNF+PvUUl7TAJInvTGa9fti9qAv95quQz29GXapA4d8Ec266mJJxFVh82M4GIIGDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^4.3.4",
        "flora-colossus": "^2.0.0",
        "fs-extra": "^10.1.0"
      },
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/galactus/node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/galactus/node_modules/jsonfile": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.2.0.tgz",
      "integrity": "sha512-FGuPw30AdOIUTRMC2OMRtQV+jkVj2cfPqSeWXv1NEAJ1qZ5zb1X6z1mFhbfOB/iy3ssJCD+3KuZ8r8C3uVFlAg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/galactus/node_modules/universalify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/gar": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/gar/-/gar-1.0.4.tgz",
      "integrity": "sha512-w4n9cPWyP7aHxKxYHFQMegj7WIAsL/YX/C4Bs5Rr8s1H9M1rNtRWRsw+ovYMkXDQ5S4ZbYHsHAPmevPjPgw44w==",
      "deprecated": "Package no longer supported. Contact Support at https://www.npmjs.com/support for more info.",
      "dev": true,
      "license": "MIT",
      "optional": true
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-folder-size": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/get-folder-size/-/get-folder-size-2.0.1.tgz",
      "integrity": "sha512-+CEb+GDCM7tkOS2wdMKTn9vU7DgnKUTuDlehkNJKNSovdCOVxs14OfKCk4cvSaR3za4gj+OBdl9opPN9xrJ0zA==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "gar": "^1.0.4",
        "tiny-each-async": "2.0.3"
      },
      "bin": {
        "get-folder-size": "bin/get-folder-size"
      }
    },
    "node_modules/get-package-info": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/get-package-info/-/get-package-info-1.0.0.tgz",
      "integrity": "sha512-SCbprXGAPdIhKAXiG+Mk6yeoFH61JlYunqdFQFHDtLjJlDjFf6x07dsS8acO+xWt52jpdVo49AlVDnUVK1sDNw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "bluebird": "^3.1.1",
        "debug": "^2.2.0",
        "lodash.get": "^4.0.0",
        "read-pkg-up": "^2.0.0"
      },
      "engines": {
        "node": ">= 4.0"
      }
    },
    "node_modules/get-package-info/node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/get-package-info/node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/get-stream": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
      "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "pump": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/global-agent": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/global-agent/-/global-agent-3.0.0.tgz",
      "integrity": "sha512-PT6XReJ+D07JvGoxQMkT6qji/jVNfX/h364XHZOWeRzy64sSFr+xJ5OX7LI3b4MPQzdL4H8Y8M0xzPpsVMwA8Q==",
      "dev": true,
      "license": "BSD-3-Clause",
      "optional": true,
      "dependencies": {
        "boolean": "^3.0.1",
        "es6-error": "^4.1.1",
        "matcher": "^3.0.0",
        "roarr": "^2.15.3",
        "semver": "^7.3.2",
        "serialize-error": "^7.0.1"
      },
      "engines": {
        "node": ">=10.0"
      }
    },
    "node_modules/global-agent/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "optional": true,
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/global-dirs": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/global-dirs/-/global-dirs-3.0.1.tgz",
      "integrity": "sha512-NBcGGFbBA9s1VzD41QXDG+3++t9Mn5t1FpLdhESY6oKY4gYTFpX4wO3sqGUa0Srjtbfj3szX0RnemmrVRUdULA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ini": "2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/globalthis": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/globalthis/-/globalthis-1.0.4.tgz",
      "integrity": "sha512-DpLKbNU4WylpxJykQujfCcwYWiV/Jhm50Goo0wrVILAv5jOr9d+H+UR3PhSCD2rCCEIg0uc+G+muBTwD54JhDQ==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "define-properties": "^1.2.1",
        "gopd": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/got": {
      "version": "11.8.6",
      "resolved": "https://registry.npmjs.org/got/-/got-11.8.6.tgz",
      "integrity": "sha512-6tfZ91bOr7bOXnK7PRDCGBLa1H4U080YHNaAQ2KsMGlLEzRbk44nsZF2E1IeRc3vtJHPVbKCYgdFbaGO2ljd8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@sindresorhus/is": "^4.0.0",
        "@szmarczak/http-timer": "^4.0.5",
        "@types/cacheable-request": "^6.0.1",
        "@types/responselike": "^1.0.0",
        "cacheable-lookup": "^5.0.3",
        "cacheable-request": "^7.0.2",
        "decompress-response": "^6.0.0",
        "http2-wrapper": "^1.0.0-beta.5.2",
        "lowercase-keys": "^2.0.0",
        "p-cancelable": "^2.0.0",
        "responselike": "^2.0.0"
      },
      "engines": {
        "node": ">=10.19.0"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/got?sponsor=1"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/has-property-descriptors": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "es-define-property": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/hast-util-from-parse5": {
      "version": "8.0.3",
      "resolved": "https://registry.npmjs.org/hast-util-from-parse5/-/hast-util-from-parse5-8.0.3.tgz",
      "integrity": "sha512-3kxEVkEKt0zvcZ3hCRYI8rqrgwtlIOFMWkbclACvjlDw8Li9S2hk/d51OI0nr/gIpdMHNepwgOKqZ/sy0Clpyg==",
      "license": "MIT",
      "dependencies": {
        "@types/hast": "^3.0.0",
        "@types/unist": "^3.0.0",
        "devlop": "^1.0.0",
        "hastscript": "^9.0.0",
        "property-information": "^7.0.0",
        "vfile": "^6.0.0",
        "vfile-location": "^5.0.0",
        "web-namespaces": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/hast-util-is-element": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/hast-util-is-element/-/hast-util-is-element-3.0.0.tgz",
      "integrity": "sha512-Val9mnv2IWpLbNPqc/pUem+a7Ipj2aHacCwgNfTiK0vJKl0LF+4Ba4+v1oPHFpf3bLYmreq0/l3Gud9S5OH42g==",
      "license": "MIT",
      "dependencies": {
        "@types/hast": "^3.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/hast-util-parse-selector": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/hast-util-parse-selector/-/hast-util-parse-selector-4.0.0.tgz",
      "integrity": "sha512-wkQCkSYoOGCRKERFWcxMVMOcYE2K1AaNLU8DXS9arxnLOUEWbOXKXiJUNzEpqZ3JOKpnha3jkFrumEjVliDe7A==",
      "license": "MIT",
      "dependencies": {
        "@types/hast": "^3.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/hast-util-raw": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/hast-util-raw/-/hast-util-raw-9.1.0.tgz",
      "integrity": "sha512-Y8/SBAHkZGoNkpzqqfCldijcuUKh7/su31kEBp67cFY09Wy0mTRgtsLYsiIxMJxlu0f6AA5SUTbDR8K0rxnbUw==",
      "license": "MIT",
      "dependencies": {
        "@types/hast": "^3.0.0",
        "@types/unist": "^3.0.0",
        "@ungap/structured-clone": "^1.0.0",
        "hast-util-from-parse5": "^8.0.0",
        "hast-util-to-parse5": "^8.0.0",
        "html-void-elements": "^3.0.0",
        "mdast-util-to-hast": "^13.0.0",
        "parse5": "^7.0.0",
        "unist-util-position": "^5.0.0",
        "unist-util-visit": "^5.0.0",
        "vfile": "^6.0.0",
        "web-namespaces": "^2.0.0",
        "zwitch": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/hast-util-to-jsx-runtime": {
      "version": "2.3.6",
      "resolved": "https://registry.npmjs.org/hast-util-to-jsx-runtime/-/hast-util-to-jsx-runtime-2.3.6.tgz",
      "integrity": "sha512-zl6s8LwNyo1P9uw+XJGvZtdFF1GdAkOg8ujOw+4Pyb76874fLps4ueHXDhXWdk6YHQ6OgUtinliG7RsYvCbbBg==",
      "license": "MIT",
      "dependencies": {
        "@types/estree": "^1.0.0",
        "@types/hast": "^3.0.0",
        "@types/unist": "^3.0.0",
        "comma-separated-tokens": "^2.0.0",
        "devlop": "^1.0.0",
        "estree-util-is-identifier-name": "^3.0.0",
        "hast-util-whitespace": "^3.0.0",
        "mdast-util-mdx-expression": "^2.0.0",
        "mdast-util-mdx-jsx": "^3.0.0",
        "mdast-util-mdxjs-esm": "^2.0.0",
        "property-information": "^7.0.0",
        "space-separated-tokens": "^2.0.0",
        "style-to-js": "^1.0.0",
        "unist-util-position": "^5.0.0",
        "vfile-message": "^4.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/hast-util-to-parse5": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/hast-util-to-parse5/-/hast-util-to-parse5-8.0.0.tgz",
      "integrity": "sha512-3KKrV5ZVI8if87DVSi1vDeByYrkGzg4mEfeu4alwgmmIeARiBLKCZS2uw5Gb6nU9x9Yufyj3iudm6i7nl52PFw==",
      "license": "MIT",
      "dependencies": {
        "@types/hast": "^3.0.0",
        "comma-separated-tokens": "^2.0.0",
        "devlop": "^1.0.0",
        "property-information": "^6.0.0",
        "space-separated-tokens": "^2.0.0",
        "web-namespaces": "^2.0.0",
        "zwitch": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/hast-util-to-parse5/node_modules/property-information": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/property-information/-/property-information-6.5.0.tgz",
      "integrity": "sha512-PgTgs/BlvHxOu8QuEN7wi5A0OmXaBcHpmCSTehcs6Uuu9IkDIEo13Hy7n898RHfrQ49vKCoGeWZSaAK01nwVig==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/hast-util-to-text": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/hast-util-to-text/-/hast-util-to-text-4.0.2.tgz",
      "integrity": "sha512-KK6y/BN8lbaq654j7JgBydev7wuNMcID54lkRav1P0CaE1e47P72AWWPiGKXTJU271ooYzcvTAn/Zt0REnvc7A==",
      "license": "MIT",
      "dependencies": {
        "@types/hast": "^3.0.0",
        "@types/unist": "^3.0.0",
        "hast-util-is-element": "^3.0.0",
        "unist-util-find-after": "^5.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/hast-util-whitespace": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/hast-util-whitespace/-/hast-util-whitespace-3.0.0.tgz",
      "integrity": "sha512-88JUN06ipLwsnv+dVn+OIYOvAuvBMy/Qoi6O7mQHxdPXpjy+Cd6xRkWwux7DKO+4sYILtLBRIKgsdpS2gQc7qw==",
      "license": "MIT",
      "dependencies": {
        "@types/hast": "^3.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/hastscript": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/hastscript/-/hastscript-9.0.1.tgz",
      "integrity": "sha512-g7df9rMFX/SPi34tyGCyUBREQoKkapwdY/T04Qn9TDWfHhAYt4/I0gMVirzK5wEzeUqIjEB+LXC/ypb7Aqno5w==",
      "license": "MIT",
      "dependencies": {
        "@types/hast": "^3.0.0",
        "comma-separated-tokens": "^2.0.0",
        "hast-util-parse-selector": "^4.0.0",
        "property-information": "^7.0.0",
        "space-separated-tokens": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/highlight.js": {
      "version": "11.11.1",
      "resolved": "https://registry.npmjs.org/highlight.js/-/highlight.js-11.11.1.tgz",
      "integrity": "sha512-Xwwo44whKBVCYoliBQwaPvtd/2tYFkRQtXDWj1nackaV2JPXx3L0+Jvd8/qCJ2p+ML0/XVkJ2q+Mr+UVdpJK5w==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/hosted-git-info": {
      "version": "2.8.9",
      "resolved": "https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.8.9.tgz",
      "integrity": "sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/html-encoding-sniffer": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/html-encoding-sniffer/-/html-encoding-sniffer-4.0.0.tgz",
      "integrity": "sha512-Y22oTqIU4uuPgEemfz7NDJz6OeKf12Lsu+QC+s3BVpda64lTiMYCyGwg5ki4vFxkMwQdeZDl2adZoqUgdFuTgQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "whatwg-encoding": "^3.1.1"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/html-url-attributes": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/html-url-attributes/-/html-url-attributes-3.0.1.tgz",
      "integrity": "sha512-ol6UPyBWqsrO6EJySPz2O7ZSr856WDrEzM5zMqp+FJJLGMW35cLYmmZnl0vztAZxRUoNZJFTCohfjuIJ8I4QBQ==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/html-void-elements": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/html-void-elements/-/html-void-elements-3.0.0.tgz",
      "integrity": "sha512-bEqo66MRXsUGxWHV5IP0PUiAWwoEjba4VCzg0LjFJBpchPaTfyfCKTG6bc5F8ucKec3q5y6qOdGyYTSBEvhCrg==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/http-cache-semantics": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.2.0.tgz",
      "integrity": "sha512-dTxcvPXqPvXBQpq5dUr6mEMJX4oIEFv6bwom3FDwKRDsuIjjJGANqhBuoAn9c1RQJIdAKav33ED65E2ys+87QQ==",
      "dev": true,
      "license": "BSD-2-Clause"
    },
    "node_modules/http-proxy-agent": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-5.0.0.tgz",
      "integrity": "sha512-n2hY8YdoRE1i7r6M0w9DIw5GgZN0G25P8zLCRQ8rjXtTU3vsNFBI/vWK/UIeE6g5MUUz6avwAPXmL6Fy9D/90w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@tootallnate/once": "2",
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/http2-wrapper": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/http2-wrapper/-/http2-wrapper-1.0.3.tgz",
      "integrity": "sha512-V+23sDMr12Wnz7iTcDeJr3O6AIxlnvT/bmaAAAP/Xda35C90p9599p0F1eHR/N1KILWSoWVAiOMFjBBXaXSMxg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "quick-lru": "^5.1.1",
        "resolve-alpn": "^1.0.0"
      },
      "engines": {
        "node": ">=10.19.0"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/humanize-ms": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
      "integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.0.0"
      }
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ieee754": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "BSD-3-Clause"
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/indent-string": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-4.0.0.tgz",
      "integrity": "sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/infer-owner": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/infer-owner/-/infer-owner-1.0.4.tgz",
      "integrity": "sha512-IClj+Xz94+d7irH5qRyfJonOdfTzuDaifE6ZPWfx0N0+/ATZCbuTPq2prFl526urkQd90WyUKIh1DfBQ2hMz9A==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/ini": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ini/-/ini-2.0.0.tgz",
      "integrity": "sha512-7PnF4oN3CvZF23ADhA5wRaYEQpJ8qygSkbtTXWBeXWXmEVRXK+1ITciHWwHhsjv1TmW0MgacIv6hEi5pX5NQdA==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/inline-style-parser": {
      "version": "0.2.4",
      "resolved": "https://registry.npmjs.org/inline-style-parser/-/inline-style-parser-0.2.4.tgz",
      "integrity": "sha512-0aO8FkhNZlj/ZIbNi7Lxxr12obT7cL1moPfE4tg1LkX7LlLfC6DeX4l2ZEud1ukP9jNQyNnfzQVqwbwmAATY4Q==",
      "license": "MIT"
    },
    "node_modules/internmap": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/internmap/-/internmap-2.0.3.tgz",
      "integrity": "sha512-5Hh7Y1wQbvY5ooGgPbDaL5iYLAPzMTUrjMulskHLH6wnv/A+1q5rgEaiuqEjB+oxGXIVZs1FF+R/KPN3ZSQYYg==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/interpret": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/interpret/-/interpret-3.1.1.tgz",
      "integrity": "sha512-6xwYfHbajpoF0xLW+iwLkhwgvLoZDfjYfoFNu8ftMoXINzwuymNLd9u/KmwtdT2GbR+/Cz66otEGEVVUHX9QLQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/ip-address": {
      "version": "10.0.1",
      "resolved": "https://registry.npmjs.org/ip-address/-/ip-address-10.0.1.tgz",
      "integrity": "sha512-NWv9YLW4PoW2B7xtzaS3NCot75m6nK7Icdv0o3lfMceJVRfSoQwqD4wEH5rLwoKJwUiZ/rfpiVBhnaF0FK4HoA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/is-alphabetical": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-alphabetical/-/is-alphabetical-2.0.1.tgz",
      "integrity": "sha512-FWyyY60MeTNyeSRpkM2Iry0G9hpr7/9kD40mD/cGQEuilcZYS4okz8SN2Q6rLCJ8gbCt6fN+rC+6tMGS99LaxQ==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/is-alphanumerical": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-alphanumerical/-/is-alphanumerical-2.0.1.tgz",
      "integrity": "sha512-hmbYhX/9MUMF5uh7tOXyK/n0ZvWpad5caBA17GsC6vyuCqaWliRG5K1qS9inmUhEMaOBIW7/whAnSwveW/LtZw==",
      "license": "MIT",
      "dependencies": {
        "is-alphabetical": "^2.0.0",
        "is-decimal": "^2.0.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/is-core-module": {
      "version": "2.16.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-decimal": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-decimal/-/is-decimal-2.0.1.tgz",
      "integrity": "sha512-AAB9hiomQs5DXWcRB1rqsxGUstbRroFOPPVAomNk/3XHR5JyEZChOyTWe2oayKnsSsr/kcGqF+z6yuH6HHpN0A==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-4.0.0.tgz",
      "integrity": "sha512-O4L094N2/dZ7xqVdrXhh9r1KODPJpFms8B5sGdJLPy664AgvXsreZUyCQQNItZRDlYug4xStLjNp/sz3HvBowQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-hexadecimal": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-hexadecimal/-/is-hexadecimal-2.0.1.tgz",
      "integrity": "sha512-DgZQp241c8oO6cA1SbTEWiXeoxV42vlcJxgH+B3hi1AiqqKruZR3ZGF8In3fj4+/y/7rHvlOZLZtgJ/4ttYGZg==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/is-interactive": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-interactive/-/is-interactive-1.0.0.tgz",
      "integrity": "sha512-2HvIEKRoqS62guEC+qBjpvRubdX910WCMuJTZ+I9yvqKU2/12eSL549HMwtabb4oupdj2sMP50k+XJfB/8JE6w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-lambda": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/is-lambda/-/is-lambda-1.0.1.tgz",
      "integrity": "sha512-z7CMFGNrENq5iFB9Bqo64Xk6Y9sg+epq1myIcdHaGnbMTYOxvzsEtdYqQUylB7LxfkvgrrjP32T6Ywciio9UIQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-plain-obj": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-4.1.0.tgz",
      "integrity": "sha512-+Pgi+vMuUNkJyExiMBt5IlFoMyKnr5zhJ4Uspz58WOhBF5QoIZkFyNHIbBAtHwzVAgk5RtndVNsDRN61/mmDqg==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-potential-custom-element-name": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/is-potential-custom-element-name/-/is-potential-custom-element-name-1.0.1.tgz",
      "integrity": "sha512-bCYeRA2rVibKZd+s2625gGnGF/t7DSqDs4dP7CrLA1m7jKWz6pps0LpYLJN8Q64HtmPKJ1hrN3nzPNKFEKOUiQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/is-stream": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-1.1.0.tgz",
      "integrity": "sha512-uQPm8kcs47jx38atAcWTVxyltQYoPT68y9aWYdV6yWXSyW8mzSat0TL6CiWdZeCdF3KrAvpVtnHbTv4RN+rqdQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-unicode-supported": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-0.1.0.tgz",
      "integrity": "sha512-knxG2q4UC3u8stRGyAVJCOdxFmv5DZiRcdlIaAQXAbSfJya+OhopNotLQrstBhququ4ZpuKbDc/8S6mgXgPFPw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/isarray": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-0.0.1.tgz",
      "integrity": "sha512-D2S+3GLxWH+uhrNEcoh/fnmYeP8E8/zHl644d/jdA0g2uyXvy3sb0qxotE+ne0LtccHknQzWwZEzhak7oJ0COQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/isbinaryfile": {
      "version": "4.0.10",
      "resolved": "https://registry.npmjs.org/isbinaryfile/-/isbinaryfile-4.0.10.tgz",
      "integrity": "sha512-iHrqe5shvBUcFbmZq9zOQHBoeOhZJu6RQGrDpBgenUm/Am+F3JM2MgQj+rK3Z601fzrL5gLZWtAPH2OBaSVcyw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/gjtorikian/"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/istanbul-lib-coverage": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
      "integrity": "sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-report": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^4.0.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-source-maps": {
      "version": "5.0.6",
      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-5.0.6.tgz",
      "integrity": "sha512-yg2d+Em4KizZC5niWhQaIomgf5WlL4vOOjZ5xGCmF8SnPE/mDWWXgvRExdcpCgh9lLRRa1/fSYp2ymmbJ1pI+A==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.23",
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-reports": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.2.0.tgz",
      "integrity": "sha512-HGYWWS/ehqTV3xN10i23tkPkpH46MLCIMFNCaaKNavAXTF1RkqxawEPtnjnGZ6XKSInBKkiOA5BKS+aZiY3AvA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jackspeak": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-4.1.1.tgz",
      "integrity": "sha512-zptv57P3GpL+O0I7VdMJNBZCu+BPHVQUk55Ft8/QCJjTVxrnJHuVuX/0Bl2A6/+2oyR/ZMEuFKwmzqqZ/U5nPQ==",
      "dev": true,
      "license": "BlueOak-1.0.0",
      "dependencies": {
        "@isaacs/cliui": "^8.0.2"
      },
      "engines": {
        "node": "20 || >=22"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/jiti": {
      "version": "2.5.1",
      "resolved": "https://registry.npmjs.org/jiti/-/jiti-2.5.1.tgz",
      "integrity": "sha512-twQoecYPiVA5K/h6SxtORw/Bs3ar+mLUtoPSc7iMXzQzK8d7eJ/R09wmTwAjiamETn1cXYPGfNnu7DMoHgu12w==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jiti": "lib/jiti-cli.mjs"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/jsdom": {
      "version": "27.0.0",
      "resolved": "https://registry.npmjs.org/jsdom/-/jsdom-27.0.0.tgz",
      "integrity": "sha512-lIHeR1qlIRrIN5VMccd8tI2Sgw6ieYXSVktcSHaNe3Z5nE/tcPQYQWOq00wxMvYOsz+73eAkNenVvmPC6bba9A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@asamuzakjp/dom-selector": "^6.5.4",
        "cssstyle": "^5.3.0",
        "data-urls": "^6.0.0",
        "decimal.js": "^10.5.0",
        "html-encoding-sniffer": "^4.0.0",
        "http-proxy-agent": "^7.0.2",
        "https-proxy-agent": "^7.0.6",
        "is-potential-custom-element-name": "^1.0.1",
        "parse5": "^7.3.0",
        "rrweb-cssom": "^0.8.0",
        "saxes": "^6.0.0",
        "symbol-tree": "^3.2.4",
        "tough-cookie": "^6.0.0",
        "w3c-xmlserializer": "^5.0.0",
        "webidl-conversions": "^8.0.0",
        "whatwg-encoding": "^3.1.1",
        "whatwg-mimetype": "^4.0.0",
        "whatwg-url": "^15.0.0",
        "ws": "^8.18.2",
        "xml-name-validator": "^5.0.0"
      },
      "engines": {
        "node": ">=20"
      },
      "peerDependencies": {
        "canvas": "^3.0.0"
      },
      "peerDependenciesMeta": {
        "canvas": {
          "optional": true
        }
      }
    },
    "node_modules/jsdom/node_modules/agent-base": {
      "version": "7.1.4",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.4.tgz",
      "integrity": "sha512-MnA+YT8fwfJPgBx3m60MNqakm30XOkyIoH1y6huTQvC0PwZG7ki8NacLBcrPbNoo8vEZy7Jpuk7+jMO+CUovTQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/jsdom/node_modules/http-proxy-agent": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-7.0.2.tgz",
      "integrity": "sha512-T1gkAiYYDWYx3V5Bmyu7HcfcvL7mUrTWiM6yOfa3PIphViJ/gFPbvidQ+veqSOHci/PxBcDabeUNCzpOODJZig==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "agent-base": "^7.1.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/jsdom/node_modules/https-proxy-agent": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz",
      "integrity": "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "agent-base": "^7.1.2",
        "debug": "4"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/jsdom/node_modules/tr46": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-6.0.0.tgz",
      "integrity": "sha512-bLVMLPtstlZ4iMQHpFHTR7GAGj2jxi8Dg0s2h2MafAE4uSWF98FC/3MomU51iQAMf8/qDUbKWf5GxuvvVcXEhw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "punycode": "^2.3.1"
      },
      "engines": {
        "node": ">=20"
      }
    },
    "node_modules/jsdom/node_modules/webidl-conversions": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-8.0.0.tgz",
      "integrity": "sha512-n4W4YFyz5JzOfQeA8oN7dUYpR+MBP3PIUsn2jLjWXwK5ASUzt0Jc/A5sAUZoCYFJRGF0FBKJ+1JjN43rNdsQzA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=20"
      }
    },
    "node_modules/jsdom/node_modules/whatwg-url": {
      "version": "15.1.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-15.1.0.tgz",
      "integrity": "sha512-2ytDk0kiEj/yu90JOAp44PVPUkO9+jVhyf+SybKlRHSDlvOOZhdPIrr7xTH64l4WixO2cP+wQIcgujkGBPPz6g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "tr46": "^6.0.0",
        "webidl-conversions": "^8.0.0"
      },
      "engines": {
        "node": ">=20"
      }
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/json-stringify-safe": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/json-stringify-safe/-/json-stringify-safe-5.0.1.tgz",
      "integrity": "sha512-ZClg6AaYvamvYEE82d3Iyd3vSSIjQ+odgjaTzRuO3s7toCdFKczob2i0zCh7JE8kWn17yvAWhUVxvqGwUalsRA==",
      "dev": true,
      "license": "ISC",
      "optional": true
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonfile": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-4.0.0.tgz",
      "integrity": "sha512-m6F1R3z8jjlf2imQHS2Qez5sjKWQzbuuhuJ/FKYFRZvPE3PuHcSMVZzfsLhGVOkfd20obL5SWEBew5ShlquNxg==",
      "dev": true,
      "license": "MIT",
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/junk": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/junk/-/junk-3.1.0.tgz",
      "integrity": "sha512-pBxcB3LFc8QVgdggvZWyeys+hnrNWg4OcZIU/1X59k5jQdLBlCsYGRQaz234SqoRLTCgMH00fY0xRJH+F9METQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.4",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.4.tgz",
      "integrity": "sha512-oxVHkHR/EJf2CNXnWxRLW6mg7JyCCUcG0DtEGmL2ctUo1PNTin1PUil+r/+4r5MpVgC/fn1kjsx7mjSujKqIpw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/listr2": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/listr2/-/listr2-7.0.2.tgz",
      "integrity": "sha512-rJysbR9GKIalhTbVL2tYbF2hVyDnrf7pFUZBwjPaMIdadYHmeT+EVi/Bu3qd7ETQPahTotg2WRCatXwRBW554g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "cli-truncate": "^3.1.0",
        "colorette": "^2.0.20",
        "eventemitter3": "^5.0.1",
        "log-update": "^5.0.1",
        "rfdc": "^1.3.0",
        "wrap-ansi": "^8.1.0"
      },
      "engines": {
        "node": ">=16.0.0"
      }
    },
    "node_modules/listr2/node_modules/ansi-regex": {
      "version": "6.2.2",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.2.2.tgz",
      "integrity": "sha512-Bq3SmSpyFHaWjPk8If9yc6svM8c56dB5BAtW4Qbw5jHTwwXXcTLoRMkpDJp6VL0XzlWaCHTXrkFURMYmD0sLqg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/listr2/node_modules/ansi-styles": {
      "version": "6.2.3",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.3.tgz",
      "integrity": "sha512-4Dj6M28JB+oAH8kFkTLUo+a2jwOFkuqb3yucU0CANcRRUbxS0cP0nZYCGjcc3BNXwRIsUVmDGgzawme7zvJHvg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/listr2/node_modules/strip-ansi": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.2.tgz",
      "integrity": "sha512-gmBGslpoQJtgnMAvOVqGZpEz9dyoKTCzy2nfz/n8aIFhN/jCE/rCmcxabB6jOOHV+0WNnylOxaxBQPSvcWklhA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/listr2/node_modules/wrap-ansi": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^6.1.0",
        "string-width": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/load-json-file": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/load-json-file/-/load-json-file-2.0.0.tgz",
      "integrity": "sha512-3p6ZOGNbiX4CdvEd1VcE6yi78UrGNpjHO33noGwHCnT/o2fyllJDepsm8+mFFv/DvtwFHht5HIHSyOy5a+ChVQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.1.2",
        "parse-json": "^2.2.0",
        "pify": "^2.0.0",
        "strip-bom": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/locate-path": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-6.0.0.tgz",
      "integrity": "sha512-iPZK6eYjbxRu3uB4/WZ3EsEIMJFMqAoopl3R+zuq0UjcAm/MO6KCweDgPfP3elTztoKP3KtnVHxTn2NHBSDVUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^5.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lodash.get": {
      "version": "4.4.2",
      "resolved": "https://registry.npmjs.org/lodash.get/-/lodash.get-4.4.2.tgz",
      "integrity": "sha512-z+Uw/vLuy6gQe8cfaFWD7p0wVv8fJl3mbzXh33RS+0oW2wvUqiRXiQ69gLWSLpgB5/6sU+r6BlQR0MBILadqTQ==",
      "deprecated": "This package is deprecated. Use the optional chaining (?.) operator instead.",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/log-symbols": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/log-symbols/-/log-symbols-4.1.0.tgz",
      "integrity": "sha512-8XPvpAA8uyhfteu8pIvQxpJZ7SYYdpUivZpGy6sFsBuKRY/7rQGavedeB8aK+Zkyq6upMFVL/9AW6vOYzfRyLg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.1.0",
        "is-unicode-supported": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/log-update": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/log-update/-/log-update-5.0.1.tgz",
      "integrity": "sha512-5UtUDQ/6edw4ofyljDNcOVJQ4c7OjDro4h3y8e1GQL5iYElYclVHJ3zeWchylvMaKnDbDilC8irOVyexnA/Slw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-escapes": "^5.0.0",
        "cli-cursor": "^4.0.0",
        "slice-ansi": "^5.0.0",
        "strip-ansi": "^7.0.1",
        "wrap-ansi": "^8.0.1"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/log-update/node_modules/ansi-escapes": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-5.0.0.tgz",
      "integrity": "sha512-5GFMVX8HqE/TB+FuBJGuO5XG0WrsA6ptUqoODaT/n9mmUaZFkqnBueB4leqGBCmrUHnCnC4PCZTCd0E7QQ83bA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-fest": "^1.0.2"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/log-update/node_modules/ansi-regex": {
      "version": "6.2.2",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.2.2.tgz",
      "integrity": "sha512-Bq3SmSpyFHaWjPk8If9yc6svM8c56dB5BAtW4Qbw5jHTwwXXcTLoRMkpDJp6VL0XzlWaCHTXrkFURMYmD0sLqg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/log-update/node_modules/ansi-styles": {
      "version": "6.2.3",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.3.tgz",
      "integrity": "sha512-4Dj6M28JB+oAH8kFkTLUo+a2jwOFkuqb3yucU0CANcRRUbxS0cP0nZYCGjcc3BNXwRIsUVmDGgzawme7zvJHvg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/log-update/node_modules/strip-ansi": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.2.tgz",
      "integrity": "sha512-gmBGslpoQJtgnMAvOVqGZpEz9dyoKTCzy2nfz/n8aIFhN/jCE/rCmcxabB6jOOHV+0WNnylOxaxBQPSvcWklhA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/log-update/node_modules/type-fest": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-1.4.0.tgz",
      "integrity": "sha512-yGSza74xk0UG8k+pLh5oeoYirvIiWo5t0/o3zHHAO2tRDiZcxWP7fywNlXhqb6/r6sWvwi+RsyQMWhVLe4BVuA==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/log-update/node_modules/wrap-ansi": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^6.1.0",
        "string-width": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/longest-streak": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/longest-streak/-/longest-streak-3.1.0.tgz",
      "integrity": "sha512-9Ri+o0JYgehTaVBBDoMqIl8GXtbWg711O3srftcHhZ0dqnETqLaoIK0x17fUw9rFSlK/0NlsKe0Ahhyl5pXE2g==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/loupe": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/loupe/-/loupe-3.2.1.tgz",
      "integrity": "sha512-CdzqowRJCeLU72bHvWqwRBBlLcMEtIvGrlvef74kMnV2AolS9Y8xUv1I0U/MNAWMhBlKIoyuEgoJ0t/bbwHbLQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/lowercase-keys": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-2.0.0.tgz",
      "integrity": "sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/lowlight": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/lowlight/-/lowlight-3.3.0.tgz",
      "integrity": "sha512-0JNhgFoPvP6U6lE/UdVsSq99tn6DhjjpAj5MxG49ewd2mOBVtwWYIT8ClyABhq198aXXODMU6Ox8DrGy/CpTZQ==",
      "license": "MIT",
      "dependencies": {
        "@types/hast": "^3.0.0",
        "devlop": "^1.0.0",
        "highlight.js": "~11.11.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/lru-cache": {
      "version": "7.18.3",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-7.18.3.tgz",
      "integrity": "sha512-jumlc0BIUrS3qJGgIkWZsyfAM7NCWiBcCDhnd+3NNM5KbBmLTgHVfWBcg6W+rLUsIpzpERPsvwUP7CckAQSOoA==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/lz-string": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/lz-string/-/lz-string-1.5.0.tgz",
      "integrity": "sha512-h5bgJWpxJNswbU7qCrV0tIKQCaS3blPDrqKWx+QxzuzL1zGUzij9XCWLrSLsJPu5t+eWA/ycetzYAO5IOMcWAQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "bin": {
        "lz-string": "bin/bin.js"
      }
    },
    "node_modules/magic-string": {
      "version": "0.30.19",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.19.tgz",
      "integrity": "sha512-2N21sPY9Ws53PZvsEpVtNuSW+ScYbQdp4b9qUaL+9QkHUrGFKo56Lg9Emg5s9V/qrtNBmiR01sYhUOwu3H+VOw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.5"
      }
    },
    "node_modules/magicast": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/magicast/-/magicast-0.3.5.tgz",
      "integrity": "sha512-L0WhttDl+2BOsybvEOLK7fW3UA0OQ0IQ2d6Zl2x/a6vVRs3bAY0ECOSHHeL5jD+SbOpOCUEi0y1DgHEn9Qn1AQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.25.4",
        "@babel/types": "^7.25.4",
        "source-map-js": "^1.2.0"
      }
    },
    "node_modules/make-dir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
      "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-dir/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/make-fetch-happen": {
      "version": "10.2.1",
      "resolved": "https://registry.npmjs.org/make-fetch-happen/-/make-fetch-happen-10.2.1.tgz",
      "integrity": "sha512-NgOPbRiaQM10DYXvN3/hhGVI2M5MtITFryzBGxHM5p4wnFxsVCbxkrBrDsk+EZ5OB4jEOT7AjDxtdF+KVEFT7w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "agentkeepalive": "^4.2.1",
        "cacache": "^16.1.0",
        "http-cache-semantics": "^4.1.0",
        "http-proxy-agent": "^5.0.0",
        "https-proxy-agent": "^5.0.0",
        "is-lambda": "^1.0.1",
        "lru-cache": "^7.7.1",
        "minipass": "^3.1.6",
        "minipass-collect": "^1.0.2",
        "minipass-fetch": "^2.0.3",
        "minipass-flush": "^1.0.5",
        "minipass-pipeline": "^1.2.4",
        "negotiator": "^0.6.3",
        "promise-retry": "^2.0.1",
        "socks-proxy-agent": "^7.0.0",
        "ssri": "^9.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/map-age-cleaner": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/map-age-cleaner/-/map-age-cleaner-0.1.3.tgz",
      "integrity": "sha512-bJzx6nMoP6PDLPBFmg7+xRKeFZvFboMrGlxmNj9ClvX53KrmvM5bXFXEWjbz4cz1AFn+jWJ9z/DJSz7hrs0w3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-defer": "^1.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/markdown-table": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/markdown-table/-/markdown-table-3.0.4.tgz",
      "integrity": "sha512-wiYz4+JrLyb/DqW2hkFJxP7Vd7JuTDm77fvbM8VfEQdmSMqcImWeeRbHwZjBjIFki/VaMK2BhFi7oUUZeM5bqw==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/matcher": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/matcher/-/matcher-3.0.0.tgz",
      "integrity": "sha512-OkeDaAZ/bQCxeFAozM55PKcKU0yJMPGifLwV4Qgjitu+5MoAfSQN4lsLJeXZ1b8w0x+/Emda6MZgXS1jvsapng==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "escape-string-regexp": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/mdast-util-find-and-replace": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/mdast-util-find-and-replace/-/mdast-util-find-and-replace-3.0.2.tgz",
      "integrity": "sha512-Tmd1Vg/m3Xz43afeNxDIhWRtFZgM2VLyaf4vSTYwudTyeuTneoL3qtWMA5jeLyz/O1vDJmmV4QuScFCA2tBPwg==",
      "license": "MIT",
      "dependencies": {
        "@types/mdast": "^4.0.0",
        "escape-string-regexp": "^5.0.0",
        "unist-util-is": "^6.0.0",
        "unist-util-visit-parents": "^6.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-5.0.0.tgz",
      "integrity": "sha512-/veY75JbMK4j1yjvuUxuVsiS/hr/4iHs9FTT6cgTexxdE0Ly/glccBAkloH/DofkjRbZU3bnoj38mOmhkZ0lHw==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/mdast-util-from-markdown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/mdast-util-from-markdown/-/mdast-util-from-markdown-2.0.2.tgz",
      "integrity": "sha512-uZhTV/8NBuw0WHkPTrCqDOl0zVe1BIng5ZtHoDk49ME1qqcjYmmLmOf0gELgcRMxN4w2iuIeVso5/6QymSrgmA==",
      "license": "MIT",
      "dependencies": {
        "@types/mdast": "^4.0.0",
        "@types/unist": "^3.0.0",
        "decode-named-character-reference": "^1.0.0",
        "devlop": "^1.0.0",
        "mdast-util-to-string": "^4.0.0",
        "micromark": "^4.0.0",
        "micromark-util-decode-numeric-character-reference": "^2.0.0",
        "micromark-util-decode-string": "^2.0.0",
        "micromark-util-normalize-identifier": "^2.0.0",
        "micromark-util-symbol": "^2.0.0",
        "micromark-util-types": "^2.0.0",
        "unist-util-stringify-position": "^4.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/mdast-util-gfm": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/mdast-util-gfm/-/mdast-util-gfm-3.1.0.tgz",
      "integrity": "sha512-0ulfdQOM3ysHhCJ1p06l0b0VKlhU0wuQs3thxZQagjcjPrlFRqY215uZGHHJan9GEAXd9MbfPjFJz+qMkVR6zQ==",
      "license": "MIT",
      "dependencies": {
        "mdast-util-from-markdown": "^2.0.0",
        "mdast-util-gfm-autolink-literal": "^2.0.0",
        "mdast-util-gfm-footnote": "^2.0.0",
        "mdast-util-gfm-strikethrough": "^2.0.0",
        "mdast-util-gfm-table": "^2.0.0",
        "mdast-util-gfm-task-list-item": "^2.0.0",
        "mdast-util-to-markdown": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/mdast-util-gfm-autolink-literal": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/mdast-util-gfm-autolink-literal/-/mdast-util-gfm-autolink-literal-2.0.1.tgz",
      "integrity": "sha512-5HVP2MKaP6L+G6YaxPNjuL0BPrq9orG3TsrZ9YXbA3vDw/ACI4MEsnoDpn6ZNm7GnZgtAcONJyPhOP8tNJQavQ==",
      "license": "MIT",
      "dependencies": {
        "@types/mdast": "^4.0.0",
        "ccount": "^2.0.0",
        "devlop": "^1.0.0",
        "mdast-util-find-and-replace": "^3.0.0",
        "micromark-util-character": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/mdast-util-gfm-footnote": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mdast-util-gfm-footnote/-/mdast-util-gfm-footnote-2.1.0.tgz",
      "integrity": "sha512-sqpDWlsHn7Ac9GNZQMeUzPQSMzR6Wv0WKRNvQRg0KqHh02fpTz69Qc1QSseNX29bhz1ROIyNyxExfawVKTm1GQ==",
      "license": "MIT",
      "dependencies": {
        "@types/mdast": "^4.0.0",
        "devlop": "^1.1.0",
        "mdast-util-from-markdown": "^2.0.0",
        "mdast-util-to-markdown": "^2.0.0",
        "micromark-util-normalize-identifier": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/mdast-util-gfm-strikethrough": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/mdast-util-gfm-strikethrough/-/mdast-util-gfm-strikethrough-2.0.0.tgz",
      "integrity": "sha512-mKKb915TF+OC5ptj5bJ7WFRPdYtuHv0yTRxK2tJvi+BDqbkiG7h7u/9SI89nRAYcmap2xHQL9D+QG/6wSrTtXg==",
      "license": "MIT",
      "dependencies": {
        "@types/mdast": "^4.0.0",
        "mdast-util-from-markdown": "^2.0.0",
        "mdast-util-to-markdown": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/mdast-util-gfm-table": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/mdast-util-gfm-table/-/mdast-util-gfm-table-2.0.0.tgz",
      "integrity": "sha512-78UEvebzz/rJIxLvE7ZtDd/vIQ0RHv+3Mh5DR96p7cS7HsBhYIICDBCu8csTNWNO6tBWfqXPWekRuj2FNOGOZg==",
      "license": "MIT",
      "dependencies": {
        "@types/mdast": "^4.0.0",
        "devlop": "^1.0.0",
        "markdown-table": "^3.0.0",
        "mdast-util-from-markdown": "^2.0.0",
        "mdast-util-to-markdown": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/mdast-util-gfm-task-list-item": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/mdast-util-gfm-task-list-item/-/mdast-util-gfm-task-list-item-2.0.0.tgz",
      "integrity": "sha512-IrtvNvjxC1o06taBAVJznEnkiHxLFTzgonUdy8hzFVeDun0uTjxxrRGVaNFqkU1wJR3RBPEfsxmU6jDWPofrTQ==",
      "license": "MIT",
      "dependencies": {
        "@types/mdast": "^4.0.0",
        "devlop": "^1.0.0",
        "mdast-util-from-markdown": "^2.0.0",
        "mdast-util-to-markdown": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/mdast-util-mdx-expression": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/mdast-util-mdx-expression/-/mdast-util-mdx-expression-2.0.1.tgz",
      "integrity": "sha512-J6f+9hUp+ldTZqKRSg7Vw5V6MqjATc+3E4gf3CFNcuZNWD8XdyI6zQ8GqH7f8169MM6P7hMBRDVGnn7oHB9kXQ==",
      "license": "MIT",
      "dependencies": {
        "@types/estree-jsx": "^1.0.0",
        "@types/hast": "^3.0.0",
        "@types/mdast": "^4.0.0",
        "devlop": "^1.0.0",
        "mdast-util-from-markdown": "^2.0.0",
        "mdast-util-to-markdown": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/mdast-util-mdx-jsx": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/mdast-util-mdx-jsx/-/mdast-util-mdx-jsx-3.2.0.tgz",
      "integrity": "sha512-lj/z8v0r6ZtsN/cGNNtemmmfoLAFZnjMbNyLzBafjzikOM+glrjNHPlf6lQDOTccj9n5b0PPihEBbhneMyGs1Q==",
      "license": "MIT",
      "dependencies": {
        "@types/estree-jsx": "^1.0.0",
        "@types/hast": "^3.0.0",
        "@types/mdast": "^4.0.0",
        "@types/unist": "^3.0.0",
        "ccount": "^2.0.0",
        "devlop": "^1.1.0",
        "mdast-util-from-markdown": "^2.0.0",
        "mdast-util-to-markdown": "^2.0.0",
        "parse-entities": "^4.0.0",
        "stringify-entities": "^4.0.0",
        "unist-util-stringify-position": "^4.0.0",
        "vfile-message": "^4.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/mdast-util-mdxjs-esm": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/mdast-util-mdxjs-esm/-/mdast-util-mdxjs-esm-2.0.1.tgz",
      "integrity": "sha512-EcmOpxsZ96CvlP03NghtH1EsLtr0n9Tm4lPUJUBccV9RwUOneqSycg19n5HGzCf+10LozMRSObtVr3ee1WoHtg==",
      "license": "MIT",
      "dependencies": {
        "@types/estree-jsx": "^1.0.0",
        "@types/hast": "^3.0.0",
        "@types/mdast": "^4.0.0",
        "devlop": "^1.0.0",
        "mdast-util-from-markdown": "^2.0.0",
        "mdast-util-to-markdown": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/mdast-util-phrasing": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/mdast-util-phrasing/-/mdast-util-phrasing-4.1.0.tgz",
      "integrity": "sha512-TqICwyvJJpBwvGAMZjj4J2n0X8QWp21b9l0o7eXyVJ25YNWYbJDVIyD1bZXE6WtV6RmKJVYmQAKWa0zWOABz2w==",
      "license": "MIT",
      "dependencies": {
        "@types/mdast": "^4.0.0",
        "unist-util-is": "^6.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/mdast-util-to-hast": {
      "version": "13.2.0",
      "resolved": "https://registry.npmjs.org/mdast-util-to-hast/-/mdast-util-to-hast-13.2.0.tgz",
      "integrity": "sha512-QGYKEuUsYT9ykKBCMOEDLsU5JRObWQusAolFMeko/tYPufNkRffBAQjIE+99jbA87xv6FgmjLtwjh9wBWajwAA==",
      "license": "MIT",
      "dependencies": {
        "@types/hast": "^3.0.0",
        "@types/mdast": "^4.0.0",
        "@ungap/structured-clone": "^1.0.0",
        "devlop": "^1.0.0",
        "micromark-util-sanitize-uri": "^2.0.0",
        "trim-lines": "^3.0.0",
        "unist-util-position": "^5.0.0",
        "unist-util-visit": "^5.0.0",
        "vfile": "^6.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/mdast-util-to-markdown": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/mdast-util-to-markdown/-/mdast-util-to-markdown-2.1.2.tgz",
      "integrity": "sha512-xj68wMTvGXVOKonmog6LwyJKrYXZPvlwabaryTjLh9LuvovB/KAH+kvi8Gjj+7rJjsFi23nkUxRQv1KqSroMqA==",
      "license": "MIT",
      "dependencies": {
        "@types/mdast": "^4.0.0",
        "@types/unist": "^3.0.0",
        "longest-streak": "^3.0.0",
        "mdast-util-phrasing": "^4.0.0",
        "mdast-util-to-string": "^4.0.0",
        "micromark-util-classify-character": "^2.0.0",
        "micromark-util-decode-string": "^2.0.0",
        "unist-util-visit": "^5.0.0",
        "zwitch": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/mdast-util-to-string": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/mdast-util-to-string/-/mdast-util-to-string-4.0.0.tgz",
      "integrity": "sha512-0H44vDimn51F0YwvxSJSm0eCDOJTRlmN0R1yBh4HLj9wiV1Dn0QoXGbvFAWj2hSItVTlCmBF1hqKlIyUBVFLPg==",
      "license": "MIT",
      "dependencies": {
        "@types/mdast": "^4.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/mdn-data": {
      "version": "2.12.2",
      "resolved": "https://registry.npmjs.org/mdn-data/-/mdn-data-2.12.2.tgz",
      "integrity": "sha512-IEn+pegP1aManZuckezWCO+XZQDplx1366JoVhTpMpBB1sPey/SbveZQUosKiKiGYjg1wH4pMlNgXbCiYgihQA==",
      "dev": true,
      "license": "CC0-1.0"
    },
    "node_modules/mem": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/mem/-/mem-4.3.0.tgz",
      "integrity": "sha512-qX2bG48pTqYRVmDB37rn/6PT7LcR8T7oAX3bf99u1Tt1nzxYfxkgqDwUwolPlXweM0XzBOBFzSx4kfp7KP1s/w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "map-age-cleaner": "^0.1.1",
        "mimic-fn": "^2.0.0",
        "p-is-promise": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/micromark": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/micromark/-/micromark-4.0.2.tgz",
      "integrity": "sha512-zpe98Q6kvavpCr1NPVSCMebCKfD7CA2NqZ+rykeNhONIJBpc1tFKt9hucLGwha3jNTNI8lHpctWJWoimVF4PfA==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "@types/debug": "^4.0.0",
        "debug": "^4.0.0",
        "decode-named-character-reference": "^1.0.0",
        "devlop": "^1.0.0",
        "micromark-core-commonmark": "^2.0.0",
        "micromark-factory-space": "^2.0.0",
        "micromark-util-character": "^2.0.0",
        "micromark-util-chunked": "^2.0.0",
        "micromark-util-combine-extensions": "^2.0.0",
        "micromark-util-decode-numeric-character-reference": "^2.0.0",
        "micromark-util-encode": "^2.0.0",
        "micromark-util-normalize-identifier": "^2.0.0",
        "micromark-util-resolve-all": "^2.0.0",
        "micromark-util-sanitize-uri": "^2.0.0",
        "micromark-util-subtokenize": "^2.0.0",
        "micromark-util-symbol": "^2.0.0",
        "micromark-util-types": "^2.0.0"
      }
    },
    "node_modules/micromark-core-commonmark": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/micromark-core-commonmark/-/micromark-core-commonmark-2.0.3.tgz",
      "integrity": "sha512-RDBrHEMSxVFLg6xvnXmb1Ayr2WzLAWjeSATAoxwKYJV94TeNavgoIdA0a9ytzDSVzBy2YKFK+emCPOEibLeCrg==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "decode-named-character-reference": "^1.0.0",
        "devlop": "^1.0.0",
        "micromark-factory-destination": "^2.0.0",
        "micromark-factory-label": "^2.0.0",
        "micromark-factory-space": "^2.0.0",
        "micromark-factory-title": "^2.0.0",
        "micromark-factory-whitespace": "^2.0.0",
        "micromark-util-character": "^2.0.0",
        "micromark-util-chunked": "^2.0.0",
        "micromark-util-classify-character": "^2.0.0",
        "micromark-util-html-tag-name": "^2.0.0",
        "micromark-util-normalize-identifier": "^2.0.0",
        "micromark-util-resolve-all": "^2.0.0",
        "micromark-util-subtokenize": "^2.0.0",
        "micromark-util-symbol": "^2.0.0",
        "micromark-util-types": "^2.0.0"
      }
    },
    "node_modules/micromark-extension-gfm": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/micromark-extension-gfm/-/micromark-extension-gfm-3.0.0.tgz",
      "integrity": "sha512-vsKArQsicm7t0z2GugkCKtZehqUm31oeGBV/KVSorWSy8ZlNAv7ytjFhvaryUiCUJYqs+NoE6AFhpQvBTM6Q4w==",
      "license": "MIT",
      "dependencies": {
        "micromark-extension-gfm-autolink-literal": "^2.0.0",
        "micromark-extension-gfm-footnote": "^2.0.0",
        "micromark-extension-gfm-strikethrough": "^2.0.0",
        "micromark-extension-gfm-table": "^2.0.0",
        "micromark-extension-gfm-tagfilter": "^2.0.0",
        "micromark-extension-gfm-task-list-item": "^2.0.0",
        "micromark-util-combine-extensions": "^2.0.0",
        "micromark-util-types": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/micromark-extension-gfm-autolink-literal": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/micromark-extension-gfm-autolink-literal/-/micromark-extension-gfm-autolink-literal-2.1.0.tgz",
      "integrity": "sha512-oOg7knzhicgQ3t4QCjCWgTmfNhvQbDDnJeVu9v81r7NltNCVmhPy1fJRX27pISafdjL+SVc4d3l48Gb6pbRypw==",
      "license": "MIT",
      "dependencies": {
        "micromark-util-character": "^2.0.0",
        "micromark-util-sanitize-uri": "^2.0.0",
        "micromark-util-symbol": "^2.0.0",
        "micromark-util-types": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/micromark-extension-gfm-footnote": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/micromark-extension-gfm-footnote/-/micromark-extension-gfm-footnote-2.1.0.tgz",
      "integrity": "sha512-/yPhxI1ntnDNsiHtzLKYnE3vf9JZ6cAisqVDauhp4CEHxlb4uoOTxOCJ+9s51bIB8U1N1FJ1RXOKTIlD5B/gqw==",
      "license": "MIT",
      "dependencies": {
        "devlop": "^1.0.0",
        "micromark-core-commonmark": "^2.0.0",
        "micromark-factory-space": "^2.0.0",
        "micromark-util-character": "^2.0.0",
        "micromark-util-normalize-identifier": "^2.0.0",
        "micromark-util-sanitize-uri": "^2.0.0",
        "micromark-util-symbol": "^2.0.0",
        "micromark-util-types": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/micromark-extension-gfm-strikethrough": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/micromark-extension-gfm-strikethrough/-/micromark-extension-gfm-strikethrough-2.1.0.tgz",
      "integrity": "sha512-ADVjpOOkjz1hhkZLlBiYA9cR2Anf8F4HqZUO6e5eDcPQd0Txw5fxLzzxnEkSkfnD0wziSGiv7sYhk/ktvbf1uw==",
      "license": "MIT",
      "dependencies": {
        "devlop": "^1.0.0",
        "micromark-util-chunked": "^2.0.0",
        "micromark-util-classify-character": "^2.0.0",
        "micromark-util-resolve-all": "^2.0.0",
        "micromark-util-symbol": "^2.0.0",
        "micromark-util-types": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/micromark-extension-gfm-table": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/micromark-extension-gfm-table/-/micromark-extension-gfm-table-2.1.1.tgz",
      "integrity": "sha512-t2OU/dXXioARrC6yWfJ4hqB7rct14e8f7m0cbI5hUmDyyIlwv5vEtooptH8INkbLzOatzKuVbQmAYcbWoyz6Dg==",
      "license": "MIT",
      "dependencies": {
        "devlop": "^1.0.0",
        "micromark-factory-space": "^2.0.0",
        "micromark-util-character": "^2.0.0",
        "micromark-util-symbol": "^2.0.0",
        "micromark-util-types": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/micromark-extension-gfm-tagfilter": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/micromark-extension-gfm-tagfilter/-/micromark-extension-gfm-tagfilter-2.0.0.tgz",
      "integrity": "sha512-xHlTOmuCSotIA8TW1mDIM6X2O1SiX5P9IuDtqGonFhEK0qgRI4yeC6vMxEV2dgyr2TiD+2PQ10o+cOhdVAcwfg==",
      "license": "MIT",
      "dependencies": {
        "micromark-util-types": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/micromark-extension-gfm-task-list-item": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/micromark-extension-gfm-task-list-item/-/micromark-extension-gfm-task-list-item-2.1.0.tgz",
      "integrity": "sha512-qIBZhqxqI6fjLDYFTBIa4eivDMnP+OZqsNwmQ3xNLE4Cxwc+zfQEfbs6tzAo2Hjq+bh6q5F+Z8/cksrLFYWQQw==",
      "license": "MIT",
      "dependencies": {
        "devlop": "^1.0.0",
        "micromark-factory-space": "^2.0.0",
        "micromark-util-character": "^2.0.0",
        "micromark-util-symbol": "^2.0.0",
        "micromark-util-types": "^2.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/micromark-factory-destination": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/micromark-factory-destination/-/micromark-factory-destination-2.0.1.tgz",
      "integrity": "sha512-Xe6rDdJlkmbFRExpTOmRj9N3MaWmbAgdpSrBQvCFqhezUn4AHqJHbaEnfbVYYiexVSs//tqOdY/DxhjdCiJnIA==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "micromark-util-character": "^2.0.0",
        "micromark-util-symbol": "^2.0.0",
        "micromark-util-types": "^2.0.0"
      }
    },
    "node_modules/micromark-factory-label": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/micromark-factory-label/-/micromark-factory-label-2.0.1.tgz",
      "integrity": "sha512-VFMekyQExqIW7xIChcXn4ok29YE3rnuyveW3wZQWWqF4Nv9Wk5rgJ99KzPvHjkmPXF93FXIbBp6YdW3t71/7Vg==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "devlop": "^1.0.0",
        "micromark-util-character": "^2.0.0",
        "micromark-util-symbol": "^2.0.0",
        "micromark-util-types": "^2.0.0"
      }
    },
    "node_modules/micromark-factory-space": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/micromark-factory-space/-/micromark-factory-space-2.0.1.tgz",
      "integrity": "sha512-zRkxjtBxxLd2Sc0d+fbnEunsTj46SWXgXciZmHq0kDYGnck/ZSGj9/wULTV95uoeYiK5hRXP2mJ98Uo4cq/LQg==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "micromark-util-character": "^2.0.0",
        "micromark-util-types": "^2.0.0"
      }
    },
    "node_modules/micromark-factory-title": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/micromark-factory-title/-/micromark-factory-title-2.0.1.tgz",
      "integrity": "sha512-5bZ+3CjhAd9eChYTHsjy6TGxpOFSKgKKJPJxr293jTbfry2KDoWkhBb6TcPVB4NmzaPhMs1Frm9AZH7OD4Cjzw==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "micromark-factory-space": "^2.0.0",
        "micromark-util-character": "^2.0.0",
        "micromark-util-symbol": "^2.0.0",
        "micromark-util-types": "^2.0.0"
      }
    },
    "node_modules/micromark-factory-whitespace": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/micromark-factory-whitespace/-/micromark-factory-whitespace-2.0.1.tgz",
      "integrity": "sha512-Ob0nuZ3PKt/n0hORHyvoD9uZhr+Za8sFoP+OnMcnWK5lngSzALgQYKMr9RJVOWLqQYuyn6ulqGWSXdwf6F80lQ==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "micromark-factory-space": "^2.0.0",
        "micromark-util-character": "^2.0.0",
        "micromark-util-symbol": "^2.0.0",
        "micromark-util-types": "^2.0.0"
      }
    },
    "node_modules/micromark-util-character": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/micromark-util-character/-/micromark-util-character-2.1.1.tgz",
      "integrity": "sha512-wv8tdUTJ3thSFFFJKtpYKOYiGP2+v96Hvk4Tu8KpCAsTMs6yi+nVmGh1syvSCsaxz45J6Jbw+9DD6g97+NV67Q==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "micromark-util-symbol": "^2.0.0",
        "micromark-util-types": "^2.0.0"
      }
    },
    "node_modules/micromark-util-chunked": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/micromark-util-chunked/-/micromark-util-chunked-2.0.1.tgz",
      "integrity": "sha512-QUNFEOPELfmvv+4xiNg2sRYeS/P84pTW0TCgP5zc9FpXetHY0ab7SxKyAQCNCc1eK0459uoLI1y5oO5Vc1dbhA==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "micromark-util-symbol": "^2.0.0"
      }
    },
    "node_modules/micromark-util-classify-character": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/micromark-util-classify-character/-/micromark-util-classify-character-2.0.1.tgz",
      "integrity": "sha512-K0kHzM6afW/MbeWYWLjoHQv1sgg2Q9EccHEDzSkxiP/EaagNzCm7T/WMKZ3rjMbvIpvBiZgwR3dKMygtA4mG1Q==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "micromark-util-character": "^2.0.0",
        "micromark-util-symbol": "^2.0.0",
        "micromark-util-types": "^2.0.0"
      }
    },
    "node_modules/micromark-util-combine-extensions": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/micromark-util-combine-extensions/-/micromark-util-combine-extensions-2.0.1.tgz",
      "integrity": "sha512-OnAnH8Ujmy59JcyZw8JSbK9cGpdVY44NKgSM7E9Eh7DiLS2E9RNQf0dONaGDzEG9yjEl5hcqeIsj4hfRkLH/Bg==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "micromark-util-chunked": "^2.0.0",
        "micromark-util-types": "^2.0.0"
      }
    },
    "node_modules/micromark-util-decode-numeric-character-reference": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/micromark-util-decode-numeric-character-reference/-/micromark-util-decode-numeric-character-reference-2.0.2.tgz",
      "integrity": "sha512-ccUbYk6CwVdkmCQMyr64dXz42EfHGkPQlBj5p7YVGzq8I7CtjXZJrubAYezf7Rp+bjPseiROqe7G6foFd+lEuw==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "micromark-util-symbol": "^2.0.0"
      }
    },
    "node_modules/micromark-util-decode-string": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/micromark-util-decode-string/-/micromark-util-decode-string-2.0.1.tgz",
      "integrity": "sha512-nDV/77Fj6eH1ynwscYTOsbK7rR//Uj0bZXBwJZRfaLEJ1iGBR6kIfNmlNqaqJf649EP0F3NWNdeJi03elllNUQ==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "decode-named-character-reference": "^1.0.0",
        "micromark-util-character": "^2.0.0",
        "micromark-util-decode-numeric-character-reference": "^2.0.0",
        "micromark-util-symbol": "^2.0.0"
      }
    },
    "node_modules/micromark-util-encode": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/micromark-util-encode/-/micromark-util-encode-2.0.1.tgz",
      "integrity": "sha512-c3cVx2y4KqUnwopcO9b/SCdo2O67LwJJ/UyqGfbigahfegL9myoEFoDYZgkT7f36T0bLrM9hZTAaAyH+PCAXjw==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT"
    },
    "node_modules/micromark-util-html-tag-name": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/micromark-util-html-tag-name/-/micromark-util-html-tag-name-2.0.1.tgz",
      "integrity": "sha512-2cNEiYDhCWKI+Gs9T0Tiysk136SnR13hhO8yW6BGNyhOC4qYFnwF1nKfD3HFAIXA5c45RrIG1ub11GiXeYd1xA==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT"
    },
    "node_modules/micromark-util-normalize-identifier": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/micromark-util-normalize-identifier/-/micromark-util-normalize-identifier-2.0.1.tgz",
      "integrity": "sha512-sxPqmo70LyARJs0w2UclACPUUEqltCkJ6PhKdMIDuJ3gSf/Q+/GIe3WKl0Ijb/GyH9lOpUkRAO2wp0GVkLvS9Q==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "micromark-util-symbol": "^2.0.0"
      }
    },
    "node_modules/micromark-util-resolve-all": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/micromark-util-resolve-all/-/micromark-util-resolve-all-2.0.1.tgz",
      "integrity": "sha512-VdQyxFWFT2/FGJgwQnJYbe1jjQoNTS4RjglmSjTUlpUMa95Htx9NHeYW4rGDJzbjvCsl9eLjMQwGeElsqmzcHg==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "micromark-util-types": "^2.0.0"
      }
    },
    "node_modules/micromark-util-sanitize-uri": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/micromark-util-sanitize-uri/-/micromark-util-sanitize-uri-2.0.1.tgz",
      "integrity": "sha512-9N9IomZ/YuGGZZmQec1MbgxtlgougxTodVwDzzEouPKo3qFWvymFHWcnDi2vzV1ff6kas9ucW+o3yzJK9YB1AQ==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "micromark-util-character": "^2.0.0",
        "micromark-util-encode": "^2.0.0",
        "micromark-util-symbol": "^2.0.0"
      }
    },
    "node_modules/micromark-util-subtokenize": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/micromark-util-subtokenize/-/micromark-util-subtokenize-2.1.0.tgz",
      "integrity": "sha512-XQLu552iSctvnEcgXw6+Sx75GflAPNED1qx7eBJ+wydBb2KCbRZe+NwvIEEMM83uml1+2WSXpBAcp9IUCgCYWA==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "devlop": "^1.0.0",
        "micromark-util-chunked": "^2.0.0",
        "micromark-util-symbol": "^2.0.0",
        "micromark-util-types": "^2.0.0"
      }
    },
    "node_modules/micromark-util-symbol": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/micromark-util-symbol/-/micromark-util-symbol-2.0.1.tgz",
      "integrity": "sha512-vs5t8Apaud9N28kgCrRUdEed4UJ+wWNvicHLPxCa9ENlYuAY31M0ETy5y1vA33YoNPDFTghEbnh6efaE8h4x0Q==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT"
    },
    "node_modules/micromark-util-types": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/micromark-util-types/-/micromark-util-types-2.0.2.tgz",
      "integrity": "sha512-Yw0ECSpJoViF1qTU4DC6NwtC4aWGt1EkzaQB8KPPyCRR8z9TWeV0HbEFGTO+ZY1wB22zmxnJqhPyTpOVCpeHTA==",
      "funding": [
        {
          "type": "GitHub Sponsors",
          "url": "https://github.com/sponsors/unifiedjs"
        },
        {
          "type": "OpenCollective",
          "url": "https://opencollective.com/unified"
        }
      ],
      "license": "MIT"
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime-db": {
      "version": "1.54.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.54.0.tgz",
      "integrity": "sha512-aU5EJuIN2WDemCcAp2vFBfp/m4EAhWJnUNSSw0ixs7/kXbd6Pg64EmwJkNdFhB8aWt1sH2CTXrLxo/iAGV3oPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-3.0.1.tgz",
      "integrity": "sha512-xRc4oEhT6eaBpU1XF7AjpOFD+xQmXNB5OVKwp4tqCuBpHLS/ZbBDrc07mYTDqVMg6PfxUjjNp85O6Cd2Z/5HWA==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "^1.54.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/mimic-response": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-1.0.1.tgz",
      "integrity": "sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/min-indent": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/min-indent/-/min-indent-1.0.1.tgz",
      "integrity": "sha512-I9jwMn07Sy/IwOj3zVkVik2JTvgpaykDZEigL6Rx6N9LbMywwUSMtxET+7lVoDLLd3O3IXwJwvuuns8UB/HeAg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minipass-collect": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/minipass-collect/-/minipass-collect-1.0.2.tgz",
      "integrity": "sha512-6T6lH0H8OG9kITm/Jm6tdooIbogG9e0tLgpY6mphXSm/A9u8Nq1ryBG+Qspiub9LjWlBPsPS3tWQ/Botq4FdxA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/minipass-fetch": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minipass-fetch/-/minipass-fetch-2.1.2.tgz",
      "integrity": "sha512-LT49Zi2/WMROHYoqGgdlQIZh8mLPZmOrN2NdJjMXxYe4nkN6FUyuPuOAOedNJDrx0IRGg9+4guZewtp8hE6TxA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "minipass": "^3.1.6",
        "minipass-sized": "^1.0.3",
        "minizlib": "^2.1.2"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      },
      "optionalDependencies": {
        "encoding": "^0.1.13"
      }
    },
    "node_modules/minipass-flush": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/minipass-flush/-/minipass-flush-1.0.5.tgz",
      "integrity": "sha512-JmQSYYpPUqX5Jyn1mXaRwOda1uQ8HP5KAT/oDSLCzt1BYRhQU0/hDtsB1ufZfEEzMZ9aAVmsBw8+FWsIXlClWw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/minipass-pipeline": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/minipass-pipeline/-/minipass-pipeline-1.2.4.tgz",
      "integrity": "sha512-xuIq7cIOt09RPRJ19gdi4b+RiNvDFYe5JH+ggNvBqGqpQXcru3PcRmOZuHBKWK1Txf9+cQ+HMVN4d6z46LZP7A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minipass-sized": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/minipass-sized/-/minipass-sized-1.0.3.tgz",
      "integrity": "sha512-MbkQQ2CTiBMlA2Dm/5cY+9SWFEN8pzzOXi6rlM5Xxq0Yqbda5ZQy9sU75a673FE9ZK0Zsbr6Y5iP6u9nktfg2g==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/mute-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-1.0.0.tgz",
      "integrity": "sha512-avsJQhyd+680gKXyG/sQc0nXaC6rBkPOfyHYcFb9+hdkqQkR9bdnkJ0AMZhke0oesPqIO+mFFJ+IdBc7mst4IA==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
      }
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.11.tgz",
      "integrity": "sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/negotiator": {
      "version": "0.6.4",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.4.tgz",
      "integrity": "sha512-myRT3DiWPHqho5PrJaIRyaMv2kgYf0mUVgBNOYMuCH5Ki1yEiQaf/ZJuQ62nvpc44wL5WDbTX7yGJi1Neevw8w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/nice-try": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/nice-try/-/nice-try-1.0.5.tgz",
      "integrity": "sha512-1nh45deeb5olNY7eX82BkPO7SSxR5SSYJiPTrTdFUVYwAl8CKMA5N9PjTYkHiRjisVcxcQ1HXdLhx2qxxJzLNQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-abi": {
      "version": "3.77.0",
      "resolved": "https://registry.npmjs.org/node-abi/-/node-abi-3.77.0.tgz",
      "integrity": "sha512-DSmt0OEcLoK4i3NuscSbGjOf3bqiDEutejqENSplMSFA/gmB8mkED9G4pKWnPl7MDU4rSHebKPHeitpDfyH0cQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "semver": "^7.3.5"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/node-abi/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/node-api-version": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/node-api-version/-/node-api-version-0.2.1.tgz",
      "integrity": "sha512-2xP/IGGMmmSQpI1+O/k72jF/ykvZ89JeuKX3TLJAYPDVLUalrshrLHkeVcCCZqG/eEa635cr8IBYzgnDvM2O8Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "semver": "^7.3.5"
      }
    },
    "node_modules/node-api-version/node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/node-fetch": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-releases": {
      "version": "2.0.21",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.21.tgz",
      "integrity": "sha512-5b0pgg78U3hwXkCM8Z9b2FJdPZlr9Psr9V2gQPESdGHqbntyFJKFW4r5TeWGFzafGY3hzs1JC62VEQMbl1JFkw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/noms": {
      "version": "0.0.0",
      "resolved": "https://registry.npmjs.org/noms/-/noms-0.0.0.tgz",
      "integrity": "sha512-lNDU9VJaOPxUmXcLb+HQFeUgQQPtMI24Gt6hgfuMHRJgMRHMF/qZ4HJD3GDru4sSw9IQl2jPjAYnQrdIeLbwow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "inherits": "^2.0.1",
        "readable-stream": "~1.0.31"
      }
    },
    "node_modules/noms/node_modules/readable-stream": {
      "version": "1.0.34",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-1.0.34.tgz",
      "integrity": "sha512-ok1qVCJuRkNmvebYikljxJA/UEsKwLl2nI1OmaqAu4/UE+h0wKCHok4XkL/gvi39OacXvw59RJUOFUkDib2rHg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.1",
        "isarray": "0.0.1",
        "string_decoder": "~0.10.x"
      }
    },
    "node_modules/noms/node_modules/string_decoder": {
      "version": "0.10.31",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-0.10.31.tgz",
      "integrity": "sha512-ev2QzSzWPYmy9GuqfIVildA4OdcGLeFZQrq5ys6RtiuF+RQQiZWr8TZNyAcuVXyQRYfEO+MsoB/1BuQVhOJuoQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nopt": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-6.0.0.tgz",
      "integrity": "sha512-ZwLpbTgdhuZUnZzjd7nb1ZV+4DoiC6/sfiVKok72ym/4Tlf+DFdlHYmT2JPmcNNWV6Pi3SDf1kT+A4r9RTuT9g==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "abbrev": "^1.0.0"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/normalize-package-data": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.5.0.tgz",
      "integrity": "sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==",
      "dev": true,
      "license": "BSD-2-Clause",
      "dependencies": {
        "hosted-git-info": "^2.1.4",
        "resolve": "^1.10.0",
        "semver": "2 || 3 || 4 || 5",
        "validate-npm-package-license": "^3.0.1"
      }
    },
    "node_modules/normalize-package-data/node_modules/semver": {
      "version": "5.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.2.tgz",
      "integrity": "sha512-cBznnQ9KjJqU67B52RMC65CMarK2600WFnbkcaiwWq3xy/5haFJlshgnpjovMVJ+Hff49d8GEn0b87C5pDQ10g==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/normalize-url": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-6.1.0.tgz",
      "integrity": "sha512-DlL+XwOy3NxAQ8xuC0okPgK46iuVNAK01YN7RueYBqqFeGsBjV9XmCAzAdgt+667bCl5kPh9EqKKDwnaPG1I7A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/npm-run-path": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-2.0.2.tgz",
      "integrity": "sha512-lJxZYlT4DW/bRUtFh1MQIWqmLwQfAxnqWG4HhEdjMlkrJYnJn0Jrr2u3mgxqaWsdiBc76TYkTG/mhrnYTuzfHw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/npm-run-path/node_modules/path-key": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz",
      "integrity": "sha512-fEHGKCSmUSDPv4uoj8AlD+joPlq3peND+HRYyxFz4KPw4z926S/b8rIuFs2FYJg3BwsxJf6A9/3eIdLaYC+9Dw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/object-keys": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/object-keys/-/object-keys-1.1.1.tgz",
      "integrity": "sha512-NuAESUOUMrlIXOfHKzD6bpPu3tYt3xvjNdRIQ+FeT0lNb4K8WR70CaDxhuNguS2XG+GjkyMwOzsN5ZktImfhLA==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mimic-fn": "^2.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ora": {
      "version": "5.4.1",
      "resolved": "https://registry.npmjs.org/ora/-/ora-5.4.1.tgz",
      "integrity": "sha512-5b6Y85tPxZZ7QytO+BQzysW31HJku27cRIlkbAXaNx+BdcVi+LlRFmVXzeF6a7JCwJpyw5c4b+YSVImQIrBpuQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "bl": "^4.1.0",
        "chalk": "^4.1.0",
        "cli-cursor": "^3.1.0",
        "cli-spinners": "^2.5.0",
        "is-interactive": "^1.0.0",
        "is-unicode-supported": "^0.1.0",
        "log-symbols": "^4.1.0",
        "strip-ansi": "^6.0.0",
        "wcwidth": "^1.0.1"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ora/node_modules/cli-cursor": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-3.1.0.tgz",
      "integrity": "sha512-I/zHAwsKf9FqGoXM4WWRACob9+SNukZTd94DWF57E4toouRulbCxcUh6RKUEOQlYTHJnzkPMySvPNaaSLNfLZw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "restore-cursor": "^3.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ora/node_modules/restore-cursor": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-3.1.0.tgz",
      "integrity": "sha512-l+sSefzHpj5qimhFSE5a8nufZYAM3sBSVMAPtYkmC+4EH2anSGaEMXSD0izRQbu9nfyQ9y5JrVmp7E8oZrUjvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "onetime": "^5.1.0",
        "signal-exit": "^3.0.2"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ora/node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/os-tmpdir": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz",
      "integrity": "sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/p-cancelable": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-2.1.1.tgz",
      "integrity": "sha512-BZOr3nRQHOntUjTrH8+Lh54smKHoHyur8We1V8DSMVrl5A2malOOwuJRnKRDjSnkoeBh4at6BwEnb5I7Jl31wg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-defer": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-defer/-/p-defer-1.0.0.tgz",
      "integrity": "sha512-wB3wfAxZpk2AzOfUMJNL+d36xothRSyj8EXOa4f6GMqYDN9BJaaSISbsk+wS9abmnebVw95C2Kb5t85UmpCxuw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/p-finally": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz",
      "integrity": "sha512-LICb2p9CB7FS+0eR1oqWnHhp0FljGLZCWBE9aix0Uye9W8LTQPwMTYVGWQWIw9RdQiDg4+epXQODwIYJtSJaow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/p-is-promise": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/p-is-promise/-/p-is-promise-2.1.0.tgz",
      "integrity": "sha512-Y3W0wlRPK8ZMRbNq97l4M5otioeA5lm1z7bkNkxCka8HSPjR0xRWmpCmc9utiaLP9Jb1eD8BgeIxTW4AIF45Pg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-5.0.0.tgz",
      "integrity": "sha512-LaNjtRWUBY++zB5nE/NwcaoMylSPk+S+ZHNB1TzdbMJMny6dynpAGt7X/tl/QYq3TIeE6nxHppbo2LGymrG5Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-map": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/p-map/-/p-map-4.0.0.tgz",
      "integrity": "sha512-/bjOqmgETBYB5BoEeGVea8dmvHb2m9GLy1E9W43yeyfP6QQCZGFNa+XRceJEuDB6zqr+gKpIAmlLebMpykw/MQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "aggregate-error": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-try": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-1.0.0.tgz",
      "integrity": "sha512-U1etNYuMJoIz3ZXSrrySFjsXQTWOx2/jdi86L+2pRvph/qMKL6sbcCYdH23fqsbm8TH2Gn0OybpT4eSFlCVHww==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/package-json-from-dist": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
      "integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
      "dev": true,
      "license": "BlueOak-1.0.0"
    },
    "node_modules/parse-author": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/parse-author/-/parse-author-2.0.0.tgz",
      "integrity": "sha512-yx5DfvkN8JsHL2xk2Os9oTia467qnvRgey4ahSm2X8epehBLx/gWLcy5KI+Y36ful5DzGbCS6RazqZGgy1gHNw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "author-regex": "^1.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/parse-entities": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/parse-entities/-/parse-entities-4.0.2.tgz",
      "integrity": "sha512-GG2AQYWoLgL877gQIKeRPGO1xF9+eG1ujIb5soS5gPvLQ1y2o8FL90w2QWNdf9I361Mpp7726c+lj3U0qK1uGw==",
      "license": "MIT",
      "dependencies": {
        "@types/unist": "^2.0.0",
        "character-entities-legacy": "^3.0.0",
        "character-reference-invalid": "^2.0.0",
        "decode-named-character-reference": "^1.0.0",
        "is-alphanumerical": "^2.0.0",
        "is-decimal": "^2.0.0",
        "is-hexadecimal": "^2.0.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/parse-entities/node_modules/@types/unist": {
      "version": "2.0.11",
      "resolved": "https://registry.npmjs.org/@types/unist/-/unist-2.0.11.tgz",
      "integrity": "sha512-CmBKiL6NNo/OqgmMn95Fk9Whlp2mtvIv+KNpQKN2F4SjvrEesubTRWGYSg+BnWZOnlCaSTU1sMpsBOzgbYhnsA==",
      "license": "MIT"
    },
    "node_modules/parse-json": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-2.2.0.tgz",
      "integrity": "sha512-QR/GGaKCkhwk1ePQNYDRKYZ3mwU9ypsKhB0XyFnLQdomyEqk3e8wpW3V5Jp88zbxK4n5ST1nqo+g9juTpownhQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "error-ex": "^1.2.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/parse5": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/parse5/-/parse5-7.3.0.tgz",
      "integrity": "sha512-IInvU7fabl34qmi9gY8XOVxhYyMyuH2xUNpb2q8/Y+7552KlejkRvqvD19nMoUW/uQGGbqNpA6Tufu5FL5BZgw==",
      "license": "MIT",
      "dependencies": {
        "entities": "^6.0.0"
      },
      "funding": {
        "url": "https://github.com/inikulin/parse5?sponsor=1"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/path-scurry": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-2.0.0.tgz",
      "integrity": "sha512-ypGJsmGtdXUOeM5u93TyeIEfEhM6s+ljAhrk5vAvSx8uyY/02OvrZnA0YNGUrPXfpJMgI1ODd3nwz8Npx4O4cg==",
      "dev": true,
      "license": "BlueOak-1.0.0",
      "dependencies": {
        "lru-cache": "^11.0.0",
        "minipass": "^7.1.2"
      },
      "engines": {
        "node": "20 || >=22"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/path-scurry/node_modules/lru-cache": {
      "version": "11.2.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-11.2.1.tgz",
      "integrity": "sha512-r8LA6i4LP4EeWOhqBaZZjDWwehd1xUJPCJd9Sv300H0ZmcUER4+JPh7bqqZeqs1o5pgtgvXm+d9UGrB5zZGDiQ==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": "20 || >=22"
      }
    },
    "node_modules/path-scurry/node_modules/minipass": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/path-type": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/path-type/-/path-type-2.0.0.tgz",
      "integrity": "sha512-dUnb5dXUf+kzhC/W/F4e5/SkluXIFf5VUHolW1Eg1irn1hGWjPGdsRcvYJ1nD6lhk8Ir7VM0bHJKsYTx8Jx9OQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "pify": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/pathe": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/pathe/-/pathe-2.0.3.tgz",
      "integrity": "sha512-WUjGcAqP1gQacoQe+OBJsFA7Ld4DyXuUIjZ5cc75cLHvJ7dtNsTugphxIADwspS+AraAUePCKrSVtPLFj/F88w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/pathval": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/pathval/-/pathval-2.0.1.tgz",
      "integrity": "sha512-//nshmD55c46FuFw26xV/xFAaB5HF9Xdap7HJBBnrKdAd6/GxDBaNA1870O79+9ueg61cZLSVc+OaFlfmObYVQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 14.16"
      }
    },
    "node_modules/pe-library": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/pe-library/-/pe-library-1.0.1.tgz",
      "integrity": "sha512-nh39Mo1eGWmZS7y+mK/dQIqg7S1lp38DpRxkyoHf0ZcUs/HDc+yyTjuOtTvSMZHmfSLuSQaX945u05Y2Q6UWZg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=14",
        "npm": ">=7"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/jet2jet"
      }
    },
    "node_modules/pend": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/pend/-/pend-1.2.0.tgz",
      "integrity": "sha512-F3asv42UuXchdzt+xXqfW1OGlVBe+mxa2mqI0pg5yAHZPvFmY3Y6drSf/GQ1A86WgWEN9Kzh/WrgKa6iGcHXLg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pify": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/plist": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/plist/-/plist-3.1.0.tgz",
      "integrity": "sha512-uysumyrvkUX0rX/dEVqt8gC3sTBzd4zoWfLeS29nb53imdaXVvLINYXTI2GNqzaMuvacNx4uJQ8+b3zXR0pkgQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@xmldom/xmldom": "^0.8.8",
        "base64-js": "^1.5.1",
        "xmlbuilder": "^15.1.1"
      },
      "engines": {
        "node": ">=10.4.0"
      }
    },
    "node_modules/postcss": {
      "version": "8.5.6",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.5.6.tgz",
      "integrity": "sha512-3Ybi1tAuwAP9s0r1UQ2J4n5Y0G05bJkpUIO0/bI9MhwmD70S5aTWbXGBwxHrelT+XM1k6dM0pk+SwNkpTRN7Pg==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/postject": {
      "version": "1.0.0-alpha.6",
      "resolved": "https://registry.npmjs.org/postject/-/postject-1.0.0-alpha.6.tgz",
      "integrity": "sha512-b9Eb8h2eVqNE8edvKdwqkrY6O7kAwmI8kcnBv1NScolYJbo59XUF0noFq+lxbC1yN20bmC0WBEbDC5H/7ASb0A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "commander": "^9.4.0"
      },
      "bin": {
        "postject": "dist/cli.js"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/postject/node_modules/commander": {
      "version": "9.5.0",
      "resolved": "https://registry.npmjs.org/commander/-/commander-9.5.0.tgz",
      "integrity": "sha512-KRs7WVDKg86PWiuAqhDrAQnTXZKraVcCc6vFdL14qrZ/DcWwuRo7VoiYXalXO7S5GKpqYiVEwCbgFDfxNHKJBQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^12.20.0 || >=14"
      }
    },
    "node_modules/prettier": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/prettier/-/prettier-3.6.2.tgz",
      "integrity": "sha512-I7AIg5boAr5R0FFtJ6rCfD+LFsWHp81dolrFD8S79U9tb8Az2nGrJncnMSnys+bpQJfRUzqs9hnA81OAA3hCuQ==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "prettier": "bin/prettier.cjs"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/prettier/prettier?sponsor=1"
      }
    },
    "node_modules/pretty-format": {
      "version": "27.5.1",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-27.5.1.tgz",
      "integrity": "sha512-Qb1gy5OrP5+zDf2Bvnzdl3jsTf1qXVMazbvCoKhtKqVs4/YK4ozX4gKQJJVyNe+cajNPn0KoC0MC3FUmaHWEmQ==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "ansi-regex": "^5.0.1",
        "ansi-styles": "^5.0.0",
        "react-is": "^17.0.1"
      },
      "engines": {
        "node": "^10.13.0 || ^12.13.0 || ^14.15.0 || >=15.0.0"
      }
    },
    "node_modules/pretty-format/node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "dev": true,
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/proc-log": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/proc-log/-/proc-log-2.0.1.tgz",
      "integrity": "sha512-Kcmo2FhfDTXdcbfDH76N7uBYHINxc/8GW7UAVuVP9I+Va3uHSerrnKV6dLooga/gh7GlgzuCCr/eoldnL1muGw==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/process-nextick-args": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/progress": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/progress/-/progress-2.0.3.tgz",
      "integrity": "sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/promise-inflight": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/promise-inflight/-/promise-inflight-1.0.1.tgz",
      "integrity": "sha512-6zWPyEOFaQBJYcGMHBKTKJ3u6TBsnMFOIZSa6ce1e/ZrrsOlnHRHbabMjLiBYKp+n44X9eUI6VUPaukCXHuG4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/promise-retry": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/promise-retry/-/promise-retry-2.0.1.tgz",
      "integrity": "sha512-y+WKFlBR8BGXnsNlIHFGPZmyDf3DFMoLhaflAnyZgV6rG6xu+JwesTo2Q9R6XwYmtmwAFCkAk3e35jEdoeh/3g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "err-code": "^2.0.2",
        "retry": "^0.12.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/property-information": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/property-information/-/property-information-7.1.0.tgz",
      "integrity": "sha512-TwEZ+X+yCJmYfL7TPUOcvBZ4QfoT5YenQiJuX//0th53DE6w0xxLEtfK3iyryQFddXuvkIk51EEgrJQ0WJkOmQ==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/pump": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.3.tgz",
      "integrity": "sha512-todwxLMY7/heScKmntwQG8CXVkWUOdYxIvY2s0VWAAMh/nd8SoYiRaKjlr7+iCs984f2P8zvrfWcDDYVb73NfA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "end-of-stream": "^1.1.0",
        "once": "^1.3.1"
      }
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/quick-lru": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/quick-lru/-/quick-lru-5.1.1.tgz",
      "integrity": "sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/react": {
      "version": "19.1.1",
      "resolved": "https://registry.npmjs.org/react/-/react-19.1.1.tgz",
      "integrity": "sha512-w8nqGImo45dmMIfljjMwOGtbmC/mk4CMYhWIicdSflH91J9TyCyczcPFXJzrZ/ZXcgGRFeP6BU0BEJTw6tZdfQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "19.1.1",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-19.1.1.tgz",
      "integrity": "sha512-Dlq/5LAZgF0Gaz6yiqZCf6VCcZs1ghAJyrsu84Q/GT0gV+mCxbfmKNoGRKBYMJ8IEdGPqu49YWXD02GCknEDkw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "scheduler": "^0.26.0"
      },
      "peerDependencies": {
        "react": "^19.1.1"
      }
    },
    "node_modules/react-is": {
      "version": "17.0.2",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-17.0.2.tgz",
      "integrity": "sha512-w2GsyukL62IJnlaff/nRegPQR94C/XXamvMWmSHRJ4y7Ts/4ocGRmTHvOs8PSE6pB3dWOrD/nueuU5sduBsQ4w==",
      "dev": true,
      "license": "MIT",
      "peer": true
    },
    "node_modules/react-markdown": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/react-markdown/-/react-markdown-10.1.0.tgz",
      "integrity": "sha512-qKxVopLT/TyA6BX3Ue5NwabOsAzm0Q7kAPwq6L+wWDwisYs7R8vZ0nRXqq6rkueboxpkjvLGU9fWifiX/ZZFxQ==",
      "license": "MIT",
      "dependencies": {
        "@types/hast": "^3.0.0",
        "@types/mdast": "^4.0.0",
        "devlop": "^1.0.0",
        "hast-util-to-jsx-runtime": "^2.0.0",
        "html-url-attributes": "^3.0.0",
        "mdast-util-to-hast": "^13.0.0",
        "remark-parse": "^11.0.0",
        "remark-rehype": "^11.0.0",
        "unified": "^11.0.0",
        "unist-util-visit": "^5.0.0",
        "vfile": "^6.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      },
      "peerDependencies": {
        "@types/react": ">=18",
        "react": ">=18"
      }
    },
    "node_modules/react-refresh": {
      "version": "0.17.0",
      "resolved": "https://registry.npmjs.org/react-refresh/-/react-refresh-0.17.0.tgz",
      "integrity": "sha512-z6F7K9bV85EfseRCp2bzrpyQ0Gkw1uLoCel9XBVWPg/TjRj94SkJzUTGfOa4bs7iJvBWtQG0Wq7wnI0syw3EBQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/read-binary-file-arch": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/read-binary-file-arch/-/read-binary-file-arch-1.0.6.tgz",
      "integrity": "sha512-BNg9EN3DD3GsDXX7Aa8O4p92sryjkmzYYgmgTAc6CA4uGLEDzFfxOxugu21akOxpcXHiEgsYkC6nPsQvLLLmEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "debug": "^4.3.4"
      },
      "bin": {
        "read-binary-file-arch": "cli.js"
      }
    },
    "node_modules/read-pkg": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/read-pkg/-/read-pkg-2.0.0.tgz",
      "integrity": "sha512-eFIBOPW7FGjzBuk3hdXEuNSiTZS/xEMlH49HxMyzb0hyPfu4EhVjT2DH32K1hSSmVq4sebAWnZuuY5auISUTGA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "load-json-file": "^2.0.0",
        "normalize-package-data": "^2.3.2",
        "path-type": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/read-pkg-up": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/read-pkg-up/-/read-pkg-up-2.0.0.tgz",
      "integrity": "sha512-1orxQfbWGUiTn9XsPlChs6rLie/AV9jwZTGmu2NZw/CUDJQchXJFYE0Fq5j7+n558T1JhDWLdhyd1Zj+wLY//w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "find-up": "^2.0.0",
        "read-pkg": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/read-pkg-up/node_modules/find-up": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-2.1.0.tgz",
      "integrity": "sha512-NWzkk0jSJtTt08+FBFMvXoeZnOJD+jTtsRmBYbAIzJdX6l7dLgR7CTubCM5/eDdPUBvLCeVasP1brfVR/9/EZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/read-pkg-up/node_modules/locate-path": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-2.0.0.tgz",
      "integrity": "sha512-NCI2kiDkyR7VeEKm27Kda/iQHyKJe1Bu0FlTbYp3CqJu+9IFe9bLyAjMxf5ZDDbEg+iMPzB5zYyUTSm8wVTKmA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^2.0.0",
        "path-exists": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/read-pkg-up/node_modules/p-limit": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-1.3.0.tgz",
      "integrity": "sha512-vvcXsLAJ9Dr5rQOPk7toZQZJApBl2K4J6dANSsEuh6QI41JYcsS/qhTGa9ErIUUgK3WNQoJYvylxvjqmiqEA9Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-try": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/read-pkg-up/node_modules/p-locate": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-2.0.0.tgz",
      "integrity": "sha512-nQja7m7gSKuewoVRen45CtVfODR3crN3goVQ0DDZ9N3yHxgpkuBhZqsaiotSQRrADUrne346peY7kT3TSACykg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^1.1.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/read-pkg-up/node_modules/path-exists": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-3.0.0.tgz",
      "integrity": "sha512-bpC7GYwiDYQ4wYLe+FA8lhRjhQCMcQGuSgGGqDkg/QerRWw9CmGRT0iSOVRSZJ29NMLZgIzqaljJ63oaL4NIJQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/rechoir": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/rechoir/-/rechoir-0.8.0.tgz",
      "integrity": "sha512-/vxpCXddiX8NGfGO/mTafwjq4aFa/71pvamip0++IQk3zG8cbCj0fifNPrjjF1XMXUne91jL9OoxmdykoEtifQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "resolve": "^1.20.0"
      },
      "engines": {
        "node": ">= 10.13.0"
      }
    },
    "node_modules/redent": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/redent/-/redent-3.0.0.tgz",
      "integrity": "sha512-6tDA8g98We0zd0GvVeMT9arEOnTw9qM03L9cJXaCjrip1OO764RDBLBfrB4cwzNGDj5OA5ioymC9GkizgWJDUg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "indent-string": "^4.0.0",
        "strip-indent": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/rehype-highlight": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/rehype-highlight/-/rehype-highlight-7.0.2.tgz",
      "integrity": "sha512-k158pK7wdC2qL3M5NcZROZ2tR/l7zOzjxXd5VGdcfIyoijjQqpHd3JKtYSBDpDZ38UI2WJWuFAtkMDxmx5kstA==",
      "license": "MIT",
      "dependencies": {
        "@types/hast": "^3.0.0",
        "hast-util-to-text": "^4.0.0",
        "lowlight": "^3.0.0",
        "unist-util-visit": "^5.0.0",
        "vfile": "^6.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/rehype-raw": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/rehype-raw/-/rehype-raw-7.0.0.tgz",
      "integrity": "sha512-/aE8hCfKlQeA8LmyeyQvQF3eBiLRGNlfBJEvWH7ivp9sBqs7TNqBL5X3v157rM4IFETqDnIOO+z5M/biZbo9Ww==",
      "license": "MIT",
      "dependencies": {
        "@types/hast": "^3.0.0",
        "hast-util-raw": "^9.0.0",
        "vfile": "^6.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/remark-gfm": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/remark-gfm/-/remark-gfm-4.0.1.tgz",
      "integrity": "sha512-1quofZ2RQ9EWdeN34S79+KExV1764+wCUGop5CPL1WGdD0ocPpu91lzPGbwWMECpEpd42kJGQwzRfyov9j4yNg==",
      "license": "MIT",
      "dependencies": {
        "@types/mdast": "^4.0.0",
        "mdast-util-gfm": "^3.0.0",
        "micromark-extension-gfm": "^3.0.0",
        "remark-parse": "^11.0.0",
        "remark-stringify": "^11.0.0",
        "unified": "^11.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/remark-parse": {
      "version": "11.0.0",
      "resolved": "https://registry.npmjs.org/remark-parse/-/remark-parse-11.0.0.tgz",
      "integrity": "sha512-FCxlKLNGknS5ba/1lmpYijMUzX2esxW5xQqjWxw2eHFfS2MSdaHVINFmhjo+qN1WhZhNimq0dZATN9pH0IDrpA==",
      "license": "MIT",
      "dependencies": {
        "@types/mdast": "^4.0.0",
        "mdast-util-from-markdown": "^2.0.0",
        "micromark-util-types": "^2.0.0",
        "unified": "^11.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/remark-rehype": {
      "version": "11.1.2",
      "resolved": "https://registry.npmjs.org/remark-rehype/-/remark-rehype-11.1.2.tgz",
      "integrity": "sha512-Dh7l57ianaEoIpzbp0PC9UKAdCSVklD8E5Rpw7ETfbTl3FqcOOgq5q2LVDhgGCkaBv7p24JXikPdvhhmHvKMsw==",
      "license": "MIT",
      "dependencies": {
        "@types/hast": "^3.0.0",
        "@types/mdast": "^4.0.0",
        "mdast-util-to-hast": "^13.0.0",
        "unified": "^11.0.0",
        "vfile": "^6.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/remark-stringify": {
      "version": "11.0.0",
      "resolved": "https://registry.npmjs.org/remark-stringify/-/remark-stringify-11.0.0.tgz",
      "integrity": "sha512-1OSmLd3awB/t8qdoEOMazZkNsfVTeY4fTsgzcQFdXNq8ToTN4ZGwrMnlda4K6smTFKD+GRV6O48i6Z4iKgPPpw==",
      "license": "MIT",
      "dependencies": {
        "@types/mdast": "^4.0.0",
        "mdast-util-to-markdown": "^2.0.0",
        "unified": "^11.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/require-from-string": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resedit": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/resedit/-/resedit-2.0.3.tgz",
      "integrity": "sha512-oTeemxwoMuxxTYxXUwjkrOPfngTQehlv0/HoYFNkB4uzsP1Un1A9nI8JQKGOFkxpqkC7qkMs0lUsGrvUlbLNUA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "pe-library": "^1.0.1"
      },
      "engines": {
        "node": ">=14",
        "npm": ">=7"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/jet2jet"
      }
    },
    "node_modules/resolve": {
      "version": "1.22.10",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.16.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-alpn": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/resolve-alpn/-/resolve-alpn-1.2.1.tgz",
      "integrity": "sha512-0a1F4l73/ZFZOakJnQ3FvkJ2+gSTQWz/r2KE5OdDY0TxPm5h4GkqkWWfM47T7HsbnOtcJVEF4epCVy6u7Q3K+g==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/responselike": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/responselike/-/responselike-2.0.1.tgz",
      "integrity": "sha512-4gl03wn3hj1HP3yzgdI7d3lCkF95F21Pz4BPGvKHinyQzALR5CapwC8yIi0Rh58DEMQ/SguC03wFj2k0M/mHhw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "lowercase-keys": "^2.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/restore-cursor": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-4.0.0.tgz",
      "integrity": "sha512-I9fPXU9geO9bHOt9pHHOhOkYerIMsmVaWB0rA2AI9ERh/+x/i7MV5HKBNrg+ljO5eoPVgCcnFuRjJ9uH6I/3eg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "onetime": "^5.1.0",
        "signal-exit": "^3.0.2"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/restore-cursor/node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/retry": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/retry/-/retry-0.12.0.tgz",
      "integrity": "sha512-9LkiTwjUh6rT555DtE9rTX+BKByPfrMzEAtnlEtdEwr3Nkffwiihqe2bWADg+OQRjt9gl6ICdmB/ZFDCGAtSow==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/reusify": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.1.0.tgz",
      "integrity": "sha512-g6QUff04oZpHs0eG5p83rFLhHeV00ug/Yf9nZM6fLeUrPguBTkTQOdpAWWspMh55TZfVQDPaN3NQJfbVRAxdIw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rfdc": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/rfdc/-/rfdc-1.4.1.tgz",
      "integrity": "sha512-q1b3N5QkRUWUl7iyylaaj3kOpIT0N2i9MqIEQXP73GVsN9cw3fdx8X63cEmWhJGi2PPCF23Ijp7ktmd39rawIA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/rimraf": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-6.0.1.tgz",
      "integrity": "sha512-9dkvaxAsk/xNXSJzMgFqqMCuFgt2+KsOFek3TMLfo8NCPfWpBmqwyNn5Y+NX56QUYfCtsyhF3ayiboEoUmJk/A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "glob": "^11.0.0",
        "package-json-from-dist": "^1.0.0"
      },
      "bin": {
        "rimraf": "dist/esm/bin.mjs"
      },
      "engines": {
        "node": "20 || >=22"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/rimraf/node_modules/glob": {
      "version": "11.0.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-11.0.3.tgz",
      "integrity": "sha512-2Nim7dha1KVkaiF4q6Dj+ngPPMdfvLJEOpZk/jKiUAkqKebpGAWQXAq9z1xu9HKu5lWfqw/FASuccEjyznjPaA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "foreground-child": "^3.3.1",
        "jackspeak": "^4.1.1",
        "minimatch": "^10.0.3",
        "minipass": "^7.1.2",
        "package-json-from-dist": "^1.0.0",
        "path-scurry": "^2.0.0"
      },
      "bin": {
        "glob": "dist/esm/bin.mjs"
      },
      "engines": {
        "node": "20 || >=22"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/rimraf/node_modules/minimatch": {
      "version": "10.0.3",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-10.0.3.tgz",
      "integrity": "sha512-IPZ167aShDZZUMdRk66cyQAW3qr0WzbHkPdMYa8bzZhlHhO3jALbKdxcaak7W9FfT2rZNpQuUu4Od7ILEpXSaw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "@isaacs/brace-expansion": "^5.0.0"
      },
      "engines": {
        "node": "20 || >=22"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/rimraf/node_modules/minipass": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/roarr": {
      "version": "2.15.4",
      "resolved": "https://registry.npmjs.org/roarr/-/roarr-2.15.4.tgz",
      "integrity": "sha512-CHhPh+UNHD2GTXNYhPWLnU8ONHdI+5DI+4EYIAOaiD63rHeYlZvyh8P+in5999TTSFgUYuKUAjzRI4mdh/p+2A==",
      "dev": true,
      "license": "BSD-3-Clause",
      "optional": true,
      "dependencies": {
        "boolean": "^3.0.1",
        "detect-node": "^2.0.4",
        "globalthis": "^1.0.1",
        "json-stringify-safe": "^5.0.1",
        "semver-compare": "^1.0.0",
        "sprintf-js": "^1.1.2"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/robust-predicates": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/robust-predicates/-/robust-predicates-3.0.2.tgz",
      "integrity": "sha512-IXgzBWvWQwE6PrDI05OvmXUIruQTcoMDzRsOd5CDvHCVLcLHMTSYvOK5Cm46kWqlV3yAbuSpBZdJ5oP5OUoStg==",
      "license": "Unlicense"
    },
    "node_modules/rollup": {
      "version": "4.52.0",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.52.0.tgz",
      "integrity": "sha512-+IuescNkTJQgX7AkIDtITipZdIGcWF0pnVvZTWStiazUmcGA2ag8dfg0urest2XlXUi9kuhfQ+qmdc5Stc3z7g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.8"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.52.0",
        "@rollup/rollup-android-arm64": "4.52.0",
        "@rollup/rollup-darwin-arm64": "4.52.0",
        "@rollup/rollup-darwin-x64": "4.52.0",
        "@rollup/rollup-freebsd-arm64": "4.52.0",
        "@rollup/rollup-freebsd-x64": "4.52.0",
        "@rollup/rollup-linux-arm-gnueabihf": "4.52.0",
        "@rollup/rollup-linux-arm-musleabihf": "4.52.0",
        "@rollup/rollup-linux-arm64-gnu": "4.52.0",
        "@rollup/rollup-linux-arm64-musl": "4.52.0",
        "@rollup/rollup-linux-loong64-gnu": "4.52.0",
        "@rollup/rollup-linux-ppc64-gnu": "4.52.0",
        "@rollup/rollup-linux-riscv64-gnu": "4.52.0",
        "@rollup/rollup-linux-riscv64-musl": "4.52.0",
        "@rollup/rollup-linux-s390x-gnu": "4.52.0",
        "@rollup/rollup-linux-x64-gnu": "4.52.0",
        "@rollup/rollup-linux-x64-musl": "4.52.0",
        "@rollup/rollup-openharmony-arm64": "4.52.0",
        "@rollup/rollup-win32-arm64-msvc": "4.52.0",
        "@rollup/rollup-win32-ia32-msvc": "4.52.0",
        "@rollup/rollup-win32-x64-gnu": "4.52.0",
        "@rollup/rollup-win32-x64-msvc": "4.52.0",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/rrweb-cssom": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/rrweb-cssom/-/rrweb-cssom-0.8.0.tgz",
      "integrity": "sha512-guoltQEx+9aMf2gDZ0s62EcV8lsXR+0w8915TC3ITdn2YueuNjdAYh/levpU9nFaoChh9RUS5ZdQMrKfVEN9tw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/rw": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/rw/-/rw-1.3.3.tgz",
      "integrity": "sha512-PdhdWy89SiZogBLaw42zdeqtRJ//zFd2PgQavcICDUgJT5oW10QCRKbJ6bg4r0/UY2M6BWd5tkxuGFRvCkgfHQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/rxjs": {
      "version": "7.8.2",
      "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-7.8.2.tgz",
      "integrity": "sha512-dhKf903U/PQZY6boNNtAGdWbG85WAbjT/1xYoZIC7FAY0yWapOBQVsVrDl58W86//e1VpMNBtRV4MaXfdMySFA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.1.0"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/saxes": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/saxes/-/saxes-6.0.0.tgz",
      "integrity": "sha512-xAg7SOnEhrm5zI3puOOKyy1OMcMlIJZYNJY7xLBwSze0UjhPLnWfj2GF2EpT0jmzaJKIWKHLsaSSajf35bcYnA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "xmlchars": "^2.2.0"
      },
      "engines": {
        "node": ">=v12.22.7"
      }
    },
    "node_modules/scheduler": {
      "version": "0.26.0",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.26.0.tgz",
      "integrity": "sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/semver-compare": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/semver-compare/-/semver-compare-1.0.0.tgz",
      "integrity": "sha512-YM3/ITh2MJ5MtzaM429anh+x2jiLVjqILF4m4oyQB18W7Ggea7BfqdH/wGMK7dDiMghv/6WG7znWMwUDzJiXow==",
      "dev": true,
      "license": "MIT",
      "optional": true
    },
    "node_modules/serialize-error": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/serialize-error/-/serialize-error-7.0.1.tgz",
      "integrity": "sha512-8I8TjW5KMOKsZQTvoxjuSIa7foAwPWGOts+6o7sgjz41/qMD9VQHEDxi6PBvK2l0MXUmqZyNpUK+T2tQaaElvw==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "type-fest": "^0.13.1"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shell-quote": {
      "version": "1.8.3",
      "resolved": "https://registry.npmjs.org/shell-quote/-/shell-quote-1.8.3.tgz",
      "integrity": "sha512-ObmnIF4hXNg1BqhnHmgbDETF8dLPCggZWBjkQfhZpbszZnYur5DUljTcCHii5LC3J5E0yeO/1LIMyH+UvHQgyw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/siginfo": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/siginfo/-/siginfo-2.0.0.tgz",
      "integrity": "sha512-ybx0WO1/8bSBLEWXZvEd7gMW3Sn3JFlW3TvX1nREbDLRNQNaeNN8WK0meBwPdAaOI7TtRRRJn/Es1zhrrCHu7g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/signal-exit": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/slice-ansi": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-5.0.0.tgz",
      "integrity": "sha512-FC+lgizVPfie0kkhqUScwRu1O/lF6NOgJmlCgK+/LYxDCTk8sGelYaHDhFcDN+Sn3Cv+3VSa4Byeo+IMCzpMgQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^6.0.0",
        "is-fullwidth-code-point": "^4.0.0"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/slice-ansi?sponsor=1"
      }
    },
    "node_modules/slice-ansi/node_modules/ansi-styles": {
      "version": "6.2.3",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.3.tgz",
      "integrity": "sha512-4Dj6M28JB+oAH8kFkTLUo+a2jwOFkuqb3yucU0CANcRRUbxS0cP0nZYCGjcc3BNXwRIsUVmDGgzawme7zvJHvg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/smart-buffer": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
      "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 6.0.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/socks": {
      "version": "2.8.7",
      "resolved": "https://registry.npmjs.org/socks/-/socks-2.8.7.tgz",
      "integrity": "sha512-HLpt+uLy/pxB+bum/9DzAgiKS8CX1EvbWxI4zlmgGCExImLdiad2iCwXT5Z4c9c3Eq8rP2318mPW2c+QbtjK8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ip-address": "^10.0.1",
        "smart-buffer": "^4.2.0"
      },
      "engines": {
        "node": ">= 10.0.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/socks-proxy-agent": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/socks-proxy-agent/-/socks-proxy-agent-7.0.0.tgz",
      "integrity": "sha512-Fgl0YPZ902wEsAyiQ+idGd1A7rSFx/ayC1CQVMw5P+EQx2V0SgpGtf6OKFhVjPflPUl9YMmEOnmfjCdMUsygww==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "agent-base": "^6.0.2",
        "debug": "^4.3.3",
        "socks": "^2.6.2"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.2.1.tgz",
      "integrity": "sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.21",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.21.tgz",
      "integrity": "sha512-uBHU3L3czsIyYXKX88fdrGovxdSCoTGDRZ6SYXtSRxLZUzHg5P/66Ht6uoUlHu9EZod+inXhKo3qQgwXUT/y1w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/space-separated-tokens": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/space-separated-tokens/-/space-separated-tokens-2.0.2.tgz",
      "integrity": "sha512-PEGlAwrG8yXGXRjW32fGbg66JAlOAwbObuqVoJpv/mRgoWDQfgH1wDPvtzWyUSNAXBGSk8h755YDbbcEy3SH2Q==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/spdx-correct": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/spdx-correct/-/spdx-correct-3.2.0.tgz",
      "integrity": "sha512-kN9dJbvnySHULIluDHy32WHRUu3Og7B9sbY7tsFLctQkIqnMh3hErYgdMjTYuqmcXX+lK5T1lnUt3G7zNswmZA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "spdx-expression-parse": "^3.0.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "node_modules/spdx-exceptions": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-2.5.0.tgz",
      "integrity": "sha512-PiU42r+xO4UbUS1buo3LPJkjlO7430Xn5SVAhdpzzsPHsjbYVflnnFdATgabnLude+Cqu25p6N+g2lw/PFsa4w==",
      "dev": true,
      "license": "CC-BY-3.0"
    },
    "node_modules/spdx-expression-parse": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/spdx-expression-parse/-/spdx-expression-parse-3.0.1.tgz",
      "integrity": "sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "spdx-exceptions": "^2.1.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "node_modules/spdx-license-ids": {
      "version": "3.0.22",
      "resolved": "https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.22.tgz",
      "integrity": "sha512-4PRT4nh1EImPbt2jASOKHX7PB7I+e4IWNLvkKFDxNhJlfjbYlleYQh285Z/3mPTHSAK/AvdMmw5BNNuYH8ShgQ==",
      "dev": true,
      "license": "CC0-1.0"
    },
    "node_modules/sprintf-js": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.1.3.tgz",
      "integrity": "sha512-Oo+0REFV59/rz3gfJNKQiBlwfHaSESl1pcGyABQsnnIfWOFt6JNj5gCog2U6MLZ//IGYD+nA8nI+mTShREReaA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "optional": true
    },
    "node_modules/ssri": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/ssri/-/ssri-9.0.1.tgz",
      "integrity": "sha512-o57Wcn66jMQvfHG1FlYbWeZWW/dHZhJXjpIcTfXldXEk5nz5lStPo3mK0OJQfGR3RbZUlbISexbljkJzuEj/8Q==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "minipass": "^3.1.1"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/stackback": {
      "version": "0.0.2",
      "resolved": "https://registry.npmjs.org/stackback/-/stackback-0.0.2.tgz",
      "integrity": "sha512-1XMJE5fQo1jGH6Y/7ebnwPOBEkIEnT4QF32d5R1+VXdXveM0IBMJt8zfaxX1P3QhVwrYe+576+jkANtSS2mBbw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/std-env": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/std-env/-/std-env-3.9.0.tgz",
      "integrity": "sha512-UGvjygr6F6tpH7o2qyqR6QYpwraIjKSdtzyBdyytFOHmPZY917kwdwLG0RbOjWOnKmnm3PeHjaoLLMie7kPLQw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-width": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "eastasianwidth": "^0.2.0",
        "emoji-regex": "^9.2.2",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/string-width-cjs": {
      "name": "string-width",
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/string-width-cjs/node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width/node_modules/ansi-regex": {
      "version": "6.2.2",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.2.2.tgz",
      "integrity": "sha512-Bq3SmSpyFHaWjPk8If9yc6svM8c56dB5BAtW4Qbw5jHTwwXXcTLoRMkpDJp6VL0XzlWaCHTXrkFURMYmD0sLqg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/string-width/node_modules/strip-ansi": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.2.tgz",
      "integrity": "sha512-gmBGslpoQJtgnMAvOVqGZpEz9dyoKTCzy2nfz/n8aIFhN/jCE/rCmcxabB6jOOHV+0WNnylOxaxBQPSvcWklhA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/stringify-entities": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/stringify-entities/-/stringify-entities-4.0.4.tgz",
      "integrity": "sha512-IwfBptatlO+QCJUo19AqvrPNqlVMpW9YEL2LIVY+Rpv2qsjCGxaDLNRgeGsQWJhfItebuJhsGSLjaBbNSQ+ieg==",
      "license": "MIT",
      "dependencies": {
        "character-entities-html4": "^2.0.0",
        "character-entities-legacy": "^3.0.0"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi-cjs": {
      "name": "strip-ansi",
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/strip-eof": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/strip-eof/-/strip-eof-1.0.0.tgz",
      "integrity": "sha512-7FCwGGmx8mD5xQd3RPUvnSpUXHM3BWuzjtpD4TXsfcZ9EL4azvVVUscFYwD9nx8Kh+uCBC00XBtAykoMHwTh8Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/strip-indent": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-indent/-/strip-indent-3.0.0.tgz",
      "integrity": "sha512-laJTa3Jb+VQpaC6DseHhF7dXVqHTfJPCRDaEbid/drOhgitgYku/letMUqOXFoWV0zIIUbjpdH2t+tYj4bQMRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "min-indent": "^1.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-literal": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-literal/-/strip-literal-3.0.0.tgz",
      "integrity": "sha512-TcccoMhJOM3OebGhSBEmp3UZ2SfDMZUEBdRA/9ynfLi8yYajyWX3JiXArcJt4Umh4vISpspkQIY8ZZoCqjbviA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^9.0.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/antfu"
      }
    },
    "node_modules/strip-literal/node_modules/js-tokens": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-9.0.1.tgz",
      "integrity": "sha512-mxa9E9ITFOt0ban3j6L5MpjwegGz6lBQmM1IJkWeBZGcMxto50+eWdjC/52xDbS2vy0k7vIMK0Fe2wfL9OQSpQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/strip-outer": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/strip-outer/-/strip-outer-1.0.1.tgz",
      "integrity": "sha512-k55yxKHwaXnpYGsOzg4Vl8+tDrWylxDEpknGjhTiZB8dFRU5rTo9CAzeycivxV3s+zlTKwrs6WxMxR95n26kwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "^1.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/strip-outer/node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/style-to-js": {
      "version": "1.1.17",
      "resolved": "https://registry.npmjs.org/style-to-js/-/style-to-js-1.1.17.tgz",
      "integrity": "sha512-xQcBGDxJb6jjFCTzvQtfiPn6YvvP2O8U1MDIPNfJQlWMYfktPy+iGsHE7cssjs7y84d9fQaK4UF3RIJaAHSoYA==",
      "license": "MIT",
      "dependencies": {
        "style-to-object": "1.0.9"
      }
    },
    "node_modules/style-to-object": {
      "version": "1.0.9",
      "resolved": "https://registry.npmjs.org/style-to-object/-/style-to-object-1.0.9.tgz",
      "integrity": "sha512-G4qppLgKu/k6FwRpHiGiKPaPTFcG3g4wNVX/Qsfu+RqQM30E7Tyu/TEgxcL9PNLF5pdRLwQdE3YKKf+KF2Dzlw==",
      "license": "MIT",
      "dependencies": {
        "inline-style-parser": "0.2.4"
      }
    },
    "node_modules/sumchecker": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/sumchecker/-/sumchecker-3.0.1.tgz",
      "integrity": "sha512-MvjXzkz/BOfyVDkG0oFOtBxHX2u3gKbMHIF/dXblZsgD3BWOFLmHovIpZY7BykJdAjcqRCBi1WYBNdEC9yI7vg==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "debug": "^4.1.0"
      },
      "engines": {
        "node": ">= 8.0"
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/symbol-tree": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/symbol-tree/-/symbol-tree-3.2.4.tgz",
      "integrity": "sha512-9QNk5KwDF+Bvz+PyObkmSYjI5ksVUYtjW7AU22r2NKcfLJcXp96hkDWU3+XndOsUb+AQ9QhfzfCT2O+CNWT5Tw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/tar": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.2.1.tgz",
      "integrity": "sha512-DZ4yORTwrbTj/7MZYq2w+/ZFdI6OZ/f9SFHR+71gIVUZhOQPHzVCLpvRnPgyaMpfWxxk/4ONva3GQSyNIKRv6A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^5.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/tar/node_modules/minipass": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
      "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/temp": {
      "version": "0.9.4",
      "resolved": "https://registry.npmjs.org/temp/-/temp-0.9.4.tgz",
      "integrity": "sha512-yYrrsWnrXMcdsnu/7YMYAofM1ktpL5By7vZhf15CrXijWWrEYZks5AXBudalfSWJLlnen/QUJUB5aoB0kqZUGA==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "mkdirp": "^0.5.1",
        "rimraf": "~2.6.2"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/temp/node_modules/mkdirp": {
      "version": "0.5.6",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
      "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "minimist": "^1.2.6"
      },
      "bin": {
        "mkdirp": "bin/cmd.js"
      }
    },
    "node_modules/temp/node_modules/rimraf": {
      "version": "2.6.3",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.6.3.tgz",
      "integrity": "sha512-mwqeW5XsA2qAejG46gYdENaxXjx9onRNCfn7L0duuP4hCuTIi/QO7PDK07KJfp1d+izWPrzEJDcSqBa0OZQriA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "dev": true,
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      }
    },
    "node_modules/test-exclude": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-7.0.1.tgz",
      "integrity": "sha512-pFYqmTw68LXVjeWJMST4+borgQP2AyMNbg1BpZh9LbyhUeNkeaPF9gzfPGUAnSMV3qPYdWUwDIjjCLiSDOl7vg==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^10.4.1",
        "minimatch": "^9.0.4"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/test-exclude/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/test-exclude/node_modules/glob": {
      "version": "10.4.5",
      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "foreground-child": "^3.1.0",
        "jackspeak": "^3.1.2",
        "minimatch": "^9.0.4",
        "minipass": "^7.1.2",
        "package-json-from-dist": "^1.0.0",
        "path-scurry": "^1.11.1"
      },
      "bin": {
        "glob": "dist/esm/bin.mjs"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/test-exclude/node_modules/jackspeak": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
      "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
      "dev": true,
      "license": "BlueOak-1.0.0",
      "dependencies": {
        "@isaacs/cliui": "^8.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      },
      "optionalDependencies": {
        "@pkgjs/parseargs": "^0.11.0"
      }
    },
    "node_modules/test-exclude/node_modules/lru-cache": {
      "version": "10.4.3",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/test-exclude/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/test-exclude/node_modules/minipass": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/test-exclude/node_modules/path-scurry": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
      "dev": true,
      "license": "BlueOak-1.0.0",
      "dependencies": {
        "lru-cache": "^10.2.0",
        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
      },
      "engines": {
        "node": ">=16 || 14 >=14.18"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/through2": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/through2/-/through2-2.0.5.tgz",
      "integrity": "sha512-/mrRod8xqpA+IHSLyGCQ2s8SPHiCDEeQJSep1jqLYeEUClOFG2Qsh+4FU6G9VeqpZnGW/Su8LQGc4YKni5rYSQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "readable-stream": "~2.3.6",
        "xtend": "~4.0.1"
      }
    },
    "node_modules/through2/node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/through2/node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/through2/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/through2/node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/tiny-each-async": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/tiny-each-async/-/tiny-each-async-2.0.3.tgz",
      "integrity": "sha512-5ROII7nElnAirvFn8g7H7MtpfV1daMcyfTGQwsn/x2VtyV+VPiO5CjReCJtWLvoKTDEDmZocf3cNPraiMnBXLA==",
      "dev": true,
      "license": "MIT",
      "optional": true
    },
    "node_modules/tinybench": {
      "version": "2.9.0",
      "resolved": "https://registry.npmjs.org/tinybench/-/tinybench-2.9.0.tgz",
      "integrity": "sha512-0+DUvqWMValLmha6lr4kD8iAMK1HzV0/aKnCtWb9v9641TnP/MFb7Pc2bxoxQjTXAErryXVgUOfv2YqNllqGeg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/tinyexec": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/tinyexec/-/tinyexec-0.3.2.tgz",
      "integrity": "sha512-KQQR9yN7R5+OSwaK0XQoj22pwHoTlgYqmUscPYoknOoWCWfj/5/ABTMRi69FrKU5ffPVh5QcFikpWJI/P1ocHA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/tinyglobby": {
      "version": "0.2.15",
      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.15.tgz",
      "integrity": "sha512-j2Zq4NyQYG5XMST4cbs02Ak8iJUdxRM0XI5QyxXuZOzKOINmWurp3smXu3y5wDcJrptwpSjgXHzIQxR0omXljQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fdir": "^6.5.0",
        "picomatch": "^4.0.3"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/SuperchupuDev"
      }
    },
    "node_modules/tinyglobby/node_modules/fdir": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.5.0.tgz",
      "integrity": "sha512-tIbYtZbucOs0BRGqPJkshJUYdL+SDH7dVM8gjy+ERp3WAUjLEFJE+02kanyHtwjWOnwrKYBiwAmM0p4kLJAnXg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/tinyglobby/node_modules/picomatch": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/tinypool": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/tinypool/-/tinypool-1.1.1.tgz",
      "integrity": "sha512-Zba82s87IFq9A9XmjiX5uZA/ARWDrB03OHlq+Vw1fSdt0I+4/Kutwy8BP4Y/y/aORMo61FQ0vIb5j44vSo5Pkg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.0.0 || >=20.0.0"
      }
    },
    "node_modules/tinyrainbow": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/tinyrainbow/-/tinyrainbow-2.0.0.tgz",
      "integrity": "sha512-op4nsTR47R6p0vMUUoYl/a+ljLFVtlfaXkLQmqfLR1qHma1h/ysYk4hEXZ880bf2CYgTskvTa/e196Vd5dDQXw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/tinyspy": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/tinyspy/-/tinyspy-4.0.4.tgz",
      "integrity": "sha512-azl+t0z7pw/z958Gy9svOTuzqIk6xq+NSheJzn5MMWtWTFywIacg2wUlzKFGtt3cthx0r2SxMK0yzJOR0IES7Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/tldts": {
      "version": "7.0.16",
      "resolved": "https://registry.npmjs.org/tldts/-/tldts-7.0.16.tgz",
      "integrity": "sha512-5bdPHSwbKTeHmXrgecID4Ljff8rQjv7g8zKQPkCozRo2HWWni+p310FSn5ImI+9kWw9kK4lzOB5q/a6iv0IJsw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "tldts-core": "^7.0.16"
      },
      "bin": {
        "tldts": "bin/cli.js"
      }
    },
    "node_modules/tldts-core": {
      "version": "7.0.16",
      "resolved": "https://registry.npmjs.org/tldts-core/-/tldts-core-7.0.16.tgz",
      "integrity": "sha512-XHhPmHxphLi+LGbH0G/O7dmUH9V65OY20R7vH8gETHsp5AZCjBk9l8sqmRKLaGOxnETU7XNSDUPtewAy/K6jbA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/tmp": {
      "version": "0.0.33",
      "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.0.33.tgz",
      "integrity": "sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "os-tmpdir": "~1.0.2"
      },
      "engines": {
        "node": ">=0.6.0"
      }
    },
    "node_modules/tmp-promise": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/tmp-promise/-/tmp-promise-3.0.3.tgz",
      "integrity": "sha512-RwM7MoPojPxsOBYnyd2hy0bxtIlVrihNs9pj5SUvY8Zz1sQcQG2tG1hSr8PDxfgEB8RNKDhqbIlroIarSNDNsQ==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "tmp": "^0.2.0"
      }
    },
    "node_modules/tmp-promise/node_modules/tmp": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.2.5.tgz",
      "integrity": "sha512-voyz6MApa1rQGUxT3E+BK7/ROe8itEx7vD8/HEvt4xwXucvQ5G5oeEiHkmHZJuBO21RpOf+YYm9MOivj709jow==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=14.14"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/tough-cookie": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-6.0.0.tgz",
      "integrity": "sha512-kXuRi1mtaKMrsLUxz3sQYvVl37B0Ns6MzfrtV5DvJceE9bPyspOqk9xxv7XbZWcfLWbFmm997vl83qUWVJA64w==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "tldts": "^7.0.5"
      },
      "engines": {
        "node": ">=16"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/tree-kill": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/tree-kill/-/tree-kill-1.2.2.tgz",
      "integrity": "sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "tree-kill": "cli.js"
      }
    },
    "node_modules/trim-lines": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/trim-lines/-/trim-lines-3.0.1.tgz",
      "integrity": "sha512-kRj8B+YHZCc9kQYdWfJB2/oUl9rA99qbowYYBtr4ui4mZyAQ2JpvVBd/6U2YloATfqBhBTSMhTpgBHtU0Mf3Rg==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/trim-repeated": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/trim-repeated/-/trim-repeated-1.0.0.tgz",
      "integrity": "sha512-pkonvlKk8/ZuR0D5tLW8ljt5I8kmxp2XKymhepUeOdCEfKpZaktSArkLHZt76OB1ZvO9bssUsDty4SWhLvZpLg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "^1.0.2"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/trim-repeated/node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/trough": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/trough/-/trough-2.2.0.tgz",
      "integrity": "sha512-tmMpK00BjZiUyVyvrBK7knerNgmgvcV/KLVyuma/SC+TQN167GrMRciANTz09+k3zW8L8t60jWO1GpfkZdjTaw==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "dev": true,
      "license": "0BSD"
    },
    "node_modules/type-fest": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.13.1.tgz",
      "integrity": "sha512-34R7HTnG0XIJcBSn5XhDd7nNFPRcXYRZrBB2O2jdKqYODldSzBAqzsWoZYYvduky73toYS/ESqxPvkDf/F0XMg==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "optional": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/typescript": {
      "version": "5.9.2",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.9.2.tgz",
      "integrity": "sha512-CWBzXQrc/qOkhidw1OzBTQuYRbfyxDXJMVJ1XNwUHGROVmuaeiEm3OslpZ1RV96d7SKKjZKrSJu3+t/xlw3R9A==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/undici-types": {
      "version": "7.12.0",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-7.12.0.tgz",
      "integrity": "sha512-goOacqME2GYyOZZfb5Lgtu+1IDmAlAEu5xnD3+xTzS10hT0vzpf0SPjkXwAw9Jm+4n/mQGDP3LO8CPbYROeBfQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/unified": {
      "version": "11.0.5",
      "resolved": "https://registry.npmjs.org/unified/-/unified-11.0.5.tgz",
      "integrity": "sha512-xKvGhPWw3k84Qjh8bI3ZeJjqnyadK+GEFtazSfZv/rKeTkTjOJho6mFqh2SM96iIcZokxiOpg78GazTSg8+KHA==",
      "license": "MIT",
      "dependencies": {
        "@types/unist": "^3.0.0",
        "bail": "^2.0.0",
        "devlop": "^1.0.0",
        "extend": "^3.0.0",
        "is-plain-obj": "^4.0.0",
        "trough": "^2.0.0",
        "vfile": "^6.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/unique-filename": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/unique-filename/-/unique-filename-2.0.1.tgz",
      "integrity": "sha512-ODWHtkkdx3IAR+veKxFV+VBkUMcN+FaqzUUd7IZzt+0zhDZFPFxhlqwPF3YQvMHx1TD0tdgYl+kuPnJ8E6ql7A==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "unique-slug": "^3.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/unique-slug": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/unique-slug/-/unique-slug-3.0.0.tgz",
      "integrity": "sha512-8EyMynh679x/0gqE9fT9oilG+qEt+ibFyqjuVTsZn1+CMxH+XLlpvr2UZx4nVcCwTpx81nICr2JQFkM+HPLq4w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "imurmurhash": "^0.1.4"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/unist-util-find-after": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/unist-util-find-after/-/unist-util-find-after-5.0.0.tgz",
      "integrity": "sha512-amQa0Ep2m6hE2g72AugUItjbuM8X8cGQnFoHk0pGfrFeT9GZhzN5SW8nRsiGKK7Aif4CrACPENkA6P/Lw6fHGQ==",
      "license": "MIT",
      "dependencies": {
        "@types/unist": "^3.0.0",
        "unist-util-is": "^6.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/unist-util-is": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/unist-util-is/-/unist-util-is-6.0.0.tgz",
      "integrity": "sha512-2qCTHimwdxLfz+YzdGfkqNlH0tLi9xjTnHddPmJwtIG9MGsdbutfTc4P+haPD7l7Cjxf/WZj+we5qfVPvvxfYw==",
      "license": "MIT",
      "dependencies": {
        "@types/unist": "^3.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/unist-util-position": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/unist-util-position/-/unist-util-position-5.0.0.tgz",
      "integrity": "sha512-fucsC7HjXvkB5R3kTCO7kUjRdrS0BJt3M/FPxmHMBOm8JQi2BsHAHFsy27E0EolP8rp0NzXsJ+jNPyDWvOJZPA==",
      "license": "MIT",
      "dependencies": {
        "@types/unist": "^3.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/unist-util-stringify-position": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/unist-util-stringify-position/-/unist-util-stringify-position-4.0.0.tgz",
      "integrity": "sha512-0ASV06AAoKCDkS2+xw5RXJywruurpbC4JZSm7nr7MOt1ojAzvyyaO+UxZf18j8FCF6kmzCZKcAgN/yu2gm2XgQ==",
      "license": "MIT",
      "dependencies": {
        "@types/unist": "^3.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/unist-util-visit": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/unist-util-visit/-/unist-util-visit-5.0.0.tgz",
      "integrity": "sha512-MR04uvD+07cwl/yhVuVWAtw+3GOR/knlL55Nd/wAdblk27GCVt3lqpTivy/tkJcZoNPzTwS1Y+KMojlLDhoTzg==",
      "license": "MIT",
      "dependencies": {
        "@types/unist": "^3.0.0",
        "unist-util-is": "^6.0.0",
        "unist-util-visit-parents": "^6.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/unist-util-visit-parents": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/unist-util-visit-parents/-/unist-util-visit-parents-6.0.1.tgz",
      "integrity": "sha512-L/PqWzfTP9lzzEa6CKs0k2nARxTdZduw3zyh8d2NVBnsyvHjSX4TWse388YrrQKbvI8w20fGjGlhgT96WwKykw==",
      "license": "MIT",
      "dependencies": {
        "@types/unist": "^3.0.0",
        "unist-util-is": "^6.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/universalify": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-0.1.2.tgz",
      "integrity": "sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/untildify": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/untildify/-/untildify-4.0.0.tgz",
      "integrity": "sha512-KK8xQ1mkzZeg9inewmFVDNkg3l5LUhoq9kN6iWYB/CC9YMG8HA+c1Q8HwDe6dEX7kErrEVNVBO3fWsVq5iDgtw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/username": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/username/-/username-5.1.0.tgz",
      "integrity": "sha512-PCKbdWw85JsYMvmCv5GH3kXmM66rCd9m1hBEDutPNv94b/pqCMT4NtcKyeWYvLFiE8b+ha1Jdl8XAaUdPn5QTg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "execa": "^1.0.0",
        "mem": "^4.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/validate-npm-package-license": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz",
      "integrity": "sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "spdx-correct": "^3.0.0",
        "spdx-expression-parse": "^3.0.0"
      }
    },
    "node_modules/vfile": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/vfile/-/vfile-6.0.3.tgz",
      "integrity": "sha512-KzIbH/9tXat2u30jf+smMwFCsno4wHVdNmzFyL+T/L3UGqqk6JKfVqOFOZEpZSHADH1k40ab6NUIXZq422ov3Q==",
      "license": "MIT",
      "dependencies": {
        "@types/unist": "^3.0.0",
        "vfile-message": "^4.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/vfile-location": {
      "version": "5.0.3",
      "resolved": "https://registry.npmjs.org/vfile-location/-/vfile-location-5.0.3.tgz",
      "integrity": "sha512-5yXvWDEgqeiYiBe1lbxYF7UMAIm/IcopxMHrMQDq3nvKcjPKIhZklUKL+AE7J7uApI4kwe2snsK+eI6UTj9EHg==",
      "license": "MIT",
      "dependencies": {
        "@types/unist": "^3.0.0",
        "vfile": "^6.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/vfile-message": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/vfile-message/-/vfile-message-4.0.3.tgz",
      "integrity": "sha512-QTHzsGd1EhbZs4AsQ20JX1rC3cOlt/IWJruk893DfLRr57lcnOeMaWG4K0JrRta4mIJZKth2Au3mM3u03/JWKw==",
      "license": "MIT",
      "dependencies": {
        "@types/unist": "^3.0.0",
        "unist-util-stringify-position": "^4.0.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/unified"
      }
    },
    "node_modules/vite": {
      "version": "7.1.6",
      "resolved": "https://registry.npmjs.org/vite/-/vite-7.1.6.tgz",
      "integrity": "sha512-SRYIB8t/isTwNn8vMB3MR6E+EQZM/WG1aKmmIUCfDXfVvKfc20ZpamngWHKzAmmu9ppsgxsg4b2I7c90JZudIQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.25.0",
        "fdir": "^6.5.0",
        "picomatch": "^4.0.3",
        "postcss": "^8.5.6",
        "rollup": "^4.43.0",
        "tinyglobby": "^0.2.15"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^20.19.0 || >=22.12.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^20.19.0 || >=22.12.0",
        "jiti": ">=1.21.0",
        "less": "^4.0.0",
        "lightningcss": "^1.21.0",
        "sass": "^1.70.0",
        "sass-embedded": "^1.70.0",
        "stylus": ">=0.54.8",
        "sugarss": "^5.0.0",
        "terser": "^5.16.0",
        "tsx": "^4.8.1",
        "yaml": "^2.4.2"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "jiti": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        },
        "tsx": {
          "optional": true
        },
        "yaml": {
          "optional": true
        }
      }
    },
    "node_modules/vite-node": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/vite-node/-/vite-node-3.2.4.tgz",
      "integrity": "sha512-EbKSKh+bh1E1IFxeO0pg1n4dvoOTt0UDiXMd/qn++r98+jPO1xtJilvXldeuQ8giIB5IkpjCgMleHMNEsGH6pg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "cac": "^6.7.14",
        "debug": "^4.4.1",
        "es-module-lexer": "^1.7.0",
        "pathe": "^2.0.3",
        "vite": "^5.0.0 || ^6.0.0 || ^7.0.0-0"
      },
      "bin": {
        "vite-node": "vite-node.mjs"
      },
      "engines": {
        "node": "^18.0.0 || ^20.0.0 || >=22.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      }
    },
    "node_modules/vite/node_modules/fdir": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.5.0.tgz",
      "integrity": "sha512-tIbYtZbucOs0BRGqPJkshJUYdL+SDH7dVM8gjy+ERp3WAUjLEFJE+02kanyHtwjWOnwrKYBiwAmM0p4kLJAnXg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/vite/node_modules/picomatch": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/vitest": {
      "version": "3.2.4",
      "resolved": "https://registry.npmjs.org/vitest/-/vitest-3.2.4.tgz",
      "integrity": "sha512-LUCP5ev3GURDysTWiP47wRRUpLKMOfPh+yKTx3kVIEiu5KOMeqzpnYNsKyOoVrULivR8tLcks4+lga33Whn90A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/chai": "^5.2.2",
        "@vitest/expect": "3.2.4",
        "@vitest/mocker": "3.2.4",
        "@vitest/pretty-format": "^3.2.4",
        "@vitest/runner": "3.2.4",
        "@vitest/snapshot": "3.2.4",
        "@vitest/spy": "3.2.4",
        "@vitest/utils": "3.2.4",
        "chai": "^5.2.0",
        "debug": "^4.4.1",
        "expect-type": "^1.2.1",
        "magic-string": "^0.30.17",
        "pathe": "^2.0.3",
        "picomatch": "^4.0.2",
        "std-env": "^3.9.0",
        "tinybench": "^2.9.0",
        "tinyexec": "^0.3.2",
        "tinyglobby": "^0.2.14",
        "tinypool": "^1.1.1",
        "tinyrainbow": "^2.0.0",
        "vite": "^5.0.0 || ^6.0.0 || ^7.0.0-0",
        "vite-node": "3.2.4",
        "why-is-node-running": "^2.3.0"
      },
      "bin": {
        "vitest": "vitest.mjs"
      },
      "engines": {
        "node": "^18.0.0 || ^20.0.0 || >=22.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/vitest"
      },
      "peerDependencies": {
        "@edge-runtime/vm": "*",
        "@types/debug": "^4.1.12",
        "@types/node": "^18.0.0 || ^20.0.0 || >=22.0.0",
        "@vitest/browser": "3.2.4",
        "@vitest/ui": "3.2.4",
        "happy-dom": "*",
        "jsdom": "*"
      },
      "peerDependenciesMeta": {
        "@edge-runtime/vm": {
          "optional": true
        },
        "@types/debug": {
          "optional": true
        },
        "@types/node": {
          "optional": true
        },
        "@vitest/browser": {
          "optional": true
        },
        "@vitest/ui": {
          "optional": true
        },
        "happy-dom": {
          "optional": true
        },
        "jsdom": {
          "optional": true
        }
      }
    },
    "node_modules/vitest/node_modules/picomatch": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/w3c-xmlserializer": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/w3c-xmlserializer/-/w3c-xmlserializer-5.0.0.tgz",
      "integrity": "sha512-o8qghlI8NZHU1lLPrpi2+Uq7abh4GGPpYANlalzWxyWteJOCsr/P+oPBA49TOLu5FTZO4d3F9MnWJfiMo4BkmA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "xml-name-validator": "^5.0.0"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/wcwidth": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/wcwidth/-/wcwidth-1.0.1.tgz",
      "integrity": "sha512-XHPEwS0q6TaxcvG85+8EYkbiCux2XtWG2mkc47Ng2A77BQu9+DqIOJldST4HgPkuea7dvKSj5VgX3P1d4rW8Tg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "defaults": "^1.0.3"
      }
    },
    "node_modules/web-namespaces": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/web-namespaces/-/web-namespaces-2.0.1.tgz",
      "integrity": "sha512-bKr1DkiNa2krS7qxNtdrtHAmzuYGFQLiQ13TsorsdT6ULTkPLKuu5+GsFpDlg6JFjUTwX2DyhMPG2be8uPrqsQ==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
      "dev": true,
      "license": "BSD-2-Clause"
    },
    "node_modules/whatwg-encoding": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/whatwg-encoding/-/whatwg-encoding-3.1.1.tgz",
      "integrity": "sha512-6qN4hJdMwfYBtE3YBTTHhoeuUrDBPZmbQaxWAqSALV/MeEnR5z1xd8UKud2RAkFoPkmB+hli1TZSnyi84xz1vQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "iconv-lite": "0.6.3"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/whatwg-encoding/node_modules/iconv-lite": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/whatwg-mimetype": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-mimetype/-/whatwg-mimetype-4.0.0.tgz",
      "integrity": "sha512-QaKxh0eNIi2mE9p2vEdzfagOKHCcj1pJ56EEHGQOVxp8r9/iszLUUV7v89x9O1p/T+NlTM5W7jW6+cz4Fq1YVg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/why-is-node-running": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/why-is-node-running/-/why-is-node-running-2.3.0.tgz",
      "integrity": "sha512-hUrmaWBdVDcxvYqnyh09zunKzROWjbZTiNy8dBEjkS7ehEDQibXJ7XvlmtbwuTclUiIyN+CyXQD4Vmko8fNm8w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "siginfo": "^2.0.0",
        "stackback": "0.0.2"
      },
      "bin": {
        "why-is-node-running": "cli.js"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "dev": true,
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "6.2.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
      "integrity": "sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi-cjs": {
      "name": "wrap-ansi",
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/wrap-ansi-cjs/node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/wrap-ansi/node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrap-ansi/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/ws": {
      "version": "8.18.3",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.3.tgz",
      "integrity": "sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/xml-name-validator": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/xml-name-validator/-/xml-name-validator-5.0.0.tgz",
      "integrity": "sha512-EvGK8EJ3DhaHfbRlETOWAS5pO9MZITeauHKJyb8wyajUfQUenkIg2MvLDTZ4T/TgIcm3HU0TFBgWWboAZ30UHg==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/xmlbuilder": {
      "version": "15.1.1",
      "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-15.1.1.tgz",
      "integrity": "sha512-yMqGBqtXyeN1e3TGYvgNgDVZ3j84W4cwkOXQswghol6APgZWaff9lnbvN7MHYJOiXsvGPXtjTYJEiC9J2wv9Eg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/xmlchars": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/xmlchars/-/xmlchars-2.2.0.tgz",
      "integrity": "sha512-JZnDKK8B0RCDw84FNdDAIpZK+JuJw+s7Lz8nksI7SIuU3UXJJslUthsi+uWBUYOwPFwW7W7PRLRfUKpxjtjFCw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.4"
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
      "dev": true,
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs/node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/yargs/node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/yargs/node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/yauzl": {
      "version": "2.10.0",
      "resolved": "https://registry.npmjs.org/yauzl/-/yauzl-2.10.0.tgz",
      "integrity": "sha512-p4a9I6X6nu6IhoGmBqAcbJy1mlC4j27vEPZX9F4L4/vZT3Lyq1VkFHw/V/PUcB9Buo+DG3iHkT0x3Qya58zc3g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "buffer-crc32": "~0.2.3",
        "fd-slicer": "~1.1.0"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/yoctocolors-cjs": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/yoctocolors-cjs/-/yoctocolors-cjs-2.1.3.tgz",
      "integrity": "sha512-U/PBtDf35ff0D8X8D0jfdzHYEPFxAI7jJlxZXwCSez5M3190m+QobIfh+sWDWSHMCWWJN2AWamkegn6vr6YBTw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=18"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/zwitch": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/zwitch/-/zwitch-2.0.4.tgz",
      "integrity": "sha512-bXE4cR/kVZhKZX/RjPEflHaKVhUVl85noU3v6b8apfQEc1x4A+zBxjZ4lN8LqGd6WZ3dl98pY4o717VFmoPp+A==",
      "license": "MIT",
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/wooorm"
      }
    }
  }
}


================================================================================
FILE: package.json
================================================================================

{
  "name": "recall",
  "version": "1.0.0",
  "description": "A Study App",
  "main": "dist/electron/main.js",
  "scripts": {
    "setup": "make setup",
    "build": "make build",
    "dev": "make dev",
    "dist": "make dist",
    "test": "make test",
    "test:frontend": "vitest --run",
    "test:frontend:coverage": "vitest --coverage --run --coverage.thresholds.statements=69 --coverage.thresholds.branches=69 --coverage.thresholds.functions=69 --coverage.thresholds.lines=69",
    "clean": "make clean",
    "start": "make start",
    "install-app": "make install"
  },
  "author": "Raghu Vijaykumar",
  "license": "ISC",
  "devDependencies": {
    "@electron-forge/cli": "^7.9.0",
    "@electron-forge/maker-deb": "^7.9.0",
    "@electron-forge/maker-rpm": "^7.9.0",
    "@electron-forge/maker-squirrel": "^7.9.0",
    "@electron-forge/maker-zip": "^7.9.0",
    "@electron-forge/plugin-auto-unpack-natives": "^7.9.0",
    "@electron-forge/plugin-fuses": "^7.9.0",
    "@electron/fuses": "^1.8.0",
    "@testing-library/jest-dom": "^6.8.0",
    "@testing-library/react": "^16.3.0",
    "@types/electron": "^1.4.38",
    "@types/node": "^24.5.2",
    "@types/react": "^19.1.13",
    "@types/react-dom": "^19.1.9",
    "@vitejs/plugin-react": "^5.0.3",
    "@vitest/coverage-v8": "^3.2.4",
    "concurrently": "^9.2.1",
    "copyfiles": "^2.4.1",
    "electron": "^38.1.2",
    "jsdom": "^27.0.0",
    "react": "^19.1.1",
    "react-dom": "^19.1.1",
    "rimraf": "^6.0.0",
    "typescript": "^5.9.2",
    "vite": "^7.1.6",
    "vitest": "^3.2.4"
  },
  "dependencies": {
    "@types/mime-types": "^3.0.1",
    "d3": "^7.9.0",
    "electron-log": "^5.1.6",
    "electron-squirrel-startup": "^1.0.1",
    "mime-types": "^3.0.1",
    "react-markdown": "^10.1.0",
    "rehype-highlight": "^7.0.2",
    "rehype-raw": "^7.0.0",
    "remark-gfm": "^4.0.1"
  }
}


================================================================================
FILE: scripts/check_db.py
================================================================================

import sqlite3

conn = sqlite3.connect("backend/database/recall.db")
cursor = conn.cursor()

# Check migrations
cursor.execute("SELECT * FROM schema_migrations")
print("Applied migrations:")
for row in cursor.fetchall():
    print(f"Migration: {row[1]}, Applied: {row[3]}")

# First check table schema
cursor.execute("PRAGMA table_info(workspaces)")
print("\nWorkspaces table schema:")
for row in cursor.fetchall():
    print(f"Column: {row[1]}, Type: {row[2]}")

print("\nWorkspaces data:")
cursor.execute("SELECT * FROM workspaces")
for row in cursor.fetchall():
    print(f"Row: {row}")
conn.close()


================================================================================
FILE: test_imports.py
================================================================================

#!/usr/bin/env python3
"""
Test script to verify imports work correctly
"""

import sys
import os

# Add backend to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), "backend"))

try:
    from app.services.workspace_analysis_service import WorkspaceAnalysisService

    print("✅ WorkspaceAnalysisService import successful")

    from app.services.knowledge_graph_service import KnowledgeGraphService

    print("✅ KnowledgeGraphService import successful")

    from app.services.quiz_service import QuizService

    print("✅ QuizService import successful")

    print("\n🎉 All imports successful! Implementation is ready.")

except ImportError as e:
    print(f"❌ Import failed: {e}")
    sys.exit(1)


================================================================================
FILE: test_markdown.md
================================================================================

# Rich Content Display Test

This is a test markdown file to demonstrate rich content display capabilities.

## Features

- **Bold text** and *italic text*
- `inline code` snippets
- Code blocks with syntax highlighting:

```javascript
function helloWorld() {
  console.log("Hello, World!");
  return "Rich content display enabled!";
}
```

## Embedded Content

### YouTube Videos
https://www.youtube.com/watch?v=dQw4w9WgXcQ

### Images
https://picsum.photos/400/300

### GIFs
https://media.giphy.com/media/3o7TKz9bX9Z8LxOq5i/giphy.gif

## Links
- [Regular link](https://github.com)
- https://example.com

## Tables

| Feature | Status    | Notes            |
| ------- | --------- | ---------------- |
| URLs    | ✅ Working | Auto-detected    |
| YouTube | ✅ Working | Embedded iframes |
| Images  | ✅ Working | Auto-displayed   |
| GIFs    | ✅ Working | Animated support |

## Lists

1. Ordered list item 1
2. Ordered list item 2
   - Nested unordered item
   - Another nested item

- Unordered list item
- Another item
  1. Nested ordered item
  2. Another nested ordered item

## Blockquotes

> This is a blockquote
> It can span multiple lines
> And contain **formatted text**

## Task Lists

- [x] Install dependencies
- [x] Create RichMarkdownRenderer
- [x] Implement URL detection
- [x] Add YouTube embedding
- [x] Support images and GIFs
- [ ] Test all features
- [ ] Deploy to production

---

*This file demonstrates the rich content display capabilities similar to Notion and Jupyter notebooks.*


================================================================================
FILE: tsconfig.electron.json
================================================================================

{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "module": "CommonJS",
    "outDir": "dist/electron",
    "rootDir": "electron",
    "noEmitOnError": false
  },
  "include": ["electron/**/*.ts", "electron/**/*.d.ts"],
  "exclude": ["node_modules", "dist", "frontend"]
}


================================================================================
FILE: tsconfig.json
================================================================================

{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "lib": ["ES2020", "DOM"],
    "outDir": "./dist",
    "rootDir": ".",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "moduleResolution": "node",
    "allowSyntheticDefaultImports": true,
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "jsx": "react-jsx"
  },
  "include": [
    "electron/**/*.ts",
    "electron/**/*.tsx",
    "electron/**/*.d.ts",
    "frontend/**/*.ts",
    "frontend/**/*.tsx",
    "frontend/**/*.d.ts"
  ],
  "exclude": ["node_modules", "dist"]
}


================================================================================
FILE: vite.config.ts
================================================================================

/// <reference types="vitest" />
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  root: 'frontend',
  build: {
    outDir: '../dist/frontend',
    emptyOutDir: true,
  },
  base: './',
  server: {
    port: 3000,
  },
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: ['./src/test/setup.ts'],
    coverage: {
      provider: 'v8',
      reporter: ['text', 'json', 'html'],
      thresholds: {
        global: {
          statements: 69,
          branches: 69,
          functions: 69,
          lines: 69,
        },
      },
    },
  },
})


================================================================================
FILE: wiki/BUILD.md
================================================================================

# Build Process

This document outlines the steps to build the Recall application. The application consists of a Python Flask backend, a React/TypeScript frontend, and an Electron wrapper for the desktop application.

## 1. Backend Build

The backend is a Python Flask application. It doesn't require a separate "build" step in the traditional sense, but rather relies on dependency installation.

1.  **Navigate to the backend directory:**
    ```bash
    cd backend
    ```

2.  **Install Python dependencies:**
    It's recommended to use a virtual environment.
    ```bash
    python -m venv .venv
    ./.venv/Scripts/activate  # On Windows
    source ./.venv/bin/activate # On macOS/Linux
    pip install -r requirements.txt
    ```

3.  **Run the backend (for development):**
    ```bash
    python main.py
    ```

## 2. Frontend Build

The frontend is a React/TypeScript application.

1.  **Navigate to the project root directory:**
    ```bash
    cd ..
    ```

2.  **Install Node.js dependencies:**
    ```bash
    npm install
    # or yarn install
    ```

3.  **Build the frontend for production:**
    ```bash
    npm run build
    # This will typically output to a `dist` or `build` directory within `frontend/`
    ```

## 3. Electron Build

The Electron application wraps the frontend and communicates with the backend.

1.  **Ensure frontend is built:**
    The Electron application will serve the built frontend assets. Make sure you have run `npm run build` in the frontend.

2.  **Run Electron in development mode:**
    ```bash
    npm run electron:dev
    ```

3.  **Build Electron for production (packaging):**
    This step is usually combined with packaging. Refer to `PACKAGING.md` for details on creating distributable packages.
    ```bash
    npm run electron:build

================================================================================
FILE: wiki/PACKAGING.md
================================================================================

e# Packaging the Recall Application

This document details the process of packaging the Recall application into distributable formats for various operating systems. The packaging process primarily uses Electron Forge.

## Prerequisites

*   Ensure all build steps for the frontend and backend are completed. Refer to `BUILD.md`.
*   Node.js and npm/yarn installed.
*   Python 3.x and pip installed.

## Electron Forge Configuration

Electron Forge uses `forge.config.js` for its configuration. This file defines the makers (for different package formats) and other packaging options.

## Packaging Steps

1.  **Install Electron Forge dependencies (if not already installed):**
    ```bash
    npm install --save-dev @electron-forge/cli
    npx electron-forge import
    ```

2.  **Run the package command:**
    This command will trigger the Electron Forge to build and package the application according to the `forge.config.js` configuration.
    ```bash
    npm run make
    ```
    This command will:
    *   Compile the Electron main process code.
    *   Bundle the frontend assets (which should already be built).
    *   Create distributable packages (e.g., `.exe` for Windows, `.dmg` for macOS, `.deb`/`.rpm` for Linux) in the `out/` directory.

## Platform-Specific Notes

*   **Windows (`.exe`):** The `make` command will generate an executable installer.
*   **macOS (`.dmg`):** A disk image will be created.
*   **Linux (`.deb`, `.rpm`):** Debian and RPM packages will be generated, suitable for respective Linux distributions.

## Customizing Packaging

To customize the packaging process (e.g., change icons, add splash screens, modify installer options), you will need to edit the `forge.config.js` file. Refer to the Electron Forge documentation for detailed configuration options.

================================================================================
FILE: wiki/design/backend-design.md
================================================================================

# Backend Design Document

## Overview
The Recall backend is a FastAPI-based REST API that serves as the core data and business logic layer for the Recall study application. It manages workspaces, files, quiz generation, progress tracking, and search functionality.

## Architecture

### Core Components

#### 1. FastAPI Application (`app.py`)
- **Purpose**: Main application entry point with CORS configuration and router inclusion
- **Key Features**:
  - Lifespan management for clean startup/shutdown
  - CORS middleware for Electron app integration
  - Static file serving for file assets
  - Router mounting for different API endpoints

#### 2. Data Models (`models/`)
- **Workspace Models**: Define workspace types (folder-based, custom), creation/update operations, and statistics
- **File Models**: Handle file metadata, types, tree structures, and statistics
- **Quiz Models**: Define question types, difficulty levels, quiz sessions, and results
- **Progress Models**: Track study sessions, achievements, and gamification stats

All models use Pydantic for validation and serialization.

#### 3. API Routes (`routes/`)
- **Workspaces Router**: CRUD operations for workspace management
- **Files Router**: File system operations and metadata retrieval
- **Quiz Router**: Quiz generation and session management
- **Progress Router**: Progress tracking and statistics
- **Search Router**: Full-text search across workspace content

#### 4. Services Layer (`services/`)
- **DatabaseService**: SQLite operations with connection management and utility methods
- **MigrationService**: Database schema versioning and migration handling
- **WorkspaceService**: Business logic for workspace operations
- **FileService**: File system interactions and metadata processing

#### 5. LLM Integration (`llm_clients/`)
- **Factory Pattern**: Singleton factory for LLM client management
- **Supported Providers**: Gemini and Ollama
- **Features**:
  - Rate limiting
  - Retry mechanisms
  - Configurable API keys and settings
- **Usage**: Quiz generation and content analysis

### Database Design

#### SQLite Database
- **Location**: `~/.recall/recall.db`
- **Migration System**: Version-controlled schema changes
- **Key Tables**:
  - `workspaces`: Workspace metadata and configuration
  - `files`: File metadata and relationships
  - `quiz_sessions`: Quiz attempt tracking
  - `progress`: Study progress and achievements
  - `search_index`: Full-text search data

#### Migration System
- **Version Control**: Sequential migration files in `migrations/`
- **Automatic Application**: Migrations applied on startup
- **Rollback Support**: Ability to revert schema changes

### API Design

#### RESTful Endpoints
- **Base URL**: `/api/`
- **Response Format**: JSON with consistent error handling
- **Authentication**: None (local application)

#### Key Endpoints
- `GET/POST/PUT/DELETE /api/workspaces` - Workspace management
- `GET/POST /api/files` - File operations
- `POST /api/quiz/generate` - Quiz creation
- `GET/POST /api/progress` - Progress tracking
- `GET /api/search` - Content search

### Error Handling
- **HTTP Status Codes**: Standard REST status codes
- **Error Responses**: Consistent JSON error format
- **Logging**: Comprehensive logging with electron-log integration

### Dependencies
- **FastAPI**: Web framework
- **SQLite3**: Database
- **Pydantic**: Data validation
- **Uvicorn**: ASGI server
- **LLM Libraries**: Google AI SDK, Ollama client

## Deployment
- **Packaging**: PyInstaller for executable distribution
- **Process Management**: Electron main process handles backend lifecycle
- **Port Management**: Automatic port selection (8000+) to avoid conflicts


================================================================================
FILE: wiki/design/electron-design.md
================================================================================

# Electron Design Document

## Overview
The Electron layer provides the desktop application framework for Recall, managing the application lifecycle, native OS integration, and communication between the frontend React app and the Python backend. It creates a seamless desktop experience while maintaining security through context isolation.

## Architecture

### Main Process (`main.ts`)
The main process handles application-level concerns and runs in a Node.js environment.

#### Key Responsibilities
- **Backend Management**: Spawns and manages the Python FastAPI backend process
- **Window Creation**: Creates and configures the main BrowserWindow
- **Menu System**: Application menu with keyboard shortcuts
- **IPC Handling**: Inter-process communication with renderer process
- **Protocol Registration**: Custom `app://` protocol for packaged app
- **Lifecycle Management**: Clean startup/shutdown handling

### Preload Script (`preload.ts`)
Provides a secure bridge between main and renderer processes.

#### Security Features
- **Context Isolation**: Renderer cannot directly access Node.js APIs
- **Type Safety**: TypeScript definitions for exposed APIs
- **Limited API Surface**: Only necessary functions exposed

#### Exposed APIs
- **Menu Events**: Application menu event handling
- **File Operations**: Secure file system access
- **Theme Management**: Dark/light mode toggling
- **IPC Communication**: Typed IPC channels

### Process Architecture

#### Backend Process Management
- **Automatic Startup**: Backend starts when Electron app launches
- **Port Management**: Finds available port (8000+) to avoid conflicts
- **Health Monitoring**: Monitors backend readiness
- **Clean Shutdown**: Ensures backend terminates properly on app exit

#### Window Management
- **Single Window**: Main application window (1000x700)
- **Web Preferences**: Security settings (context isolation, no node integration)
- **Development Mode**: DevTools and hot reload in development
- **Production Mode**: Optimized loading from custom protocol

### IPC Communication

#### Main → Renderer
- **Menu Events**: Navigation and action triggers
- **File Operations**: Folder selection results
- **Theme Changes**: Dark/light mode updates

#### Renderer → Main
- **File System Requests**: Folder tree, file content reading
- **Theme Toggle**: Dark mode preference changes
- **Ping/Pong**: Health check communication

### Menu System

#### Application Menu Structure
- **File Menu**: New file, save, workspaces, files, quiz, progress, exit
- **Workspace Menu**: Create workspace, open workspace, refresh files
- **Edit Menu**: Standard edit operations (undo, redo, cut, copy, paste)
- **View Menu**: Tab switching, reload, dev tools, zoom controls
- **Settings Menu**: Theme toggle
- **Help Menu**: About dialog

#### Keyboard Shortcuts
- **Ctrl+N**: New file
- **Ctrl+S**: Save file
- **Ctrl+O**: Open folder
- **F5**: Refresh files
- **Ctrl+T**: Toggle theme
- **Ctrl+Q**: Quit application

### File System Integration

#### Folder Operations
- **Native Dialog**: OS folder picker for workspace creation
- **Tree Building**: Recursive directory structure creation
- **File Filtering**: Text-based files only (.txt, .md, .py, .js, etc.)
- **Hidden File Exclusion**: Skips .git, node_modules, __pycache__, etc.

#### File Content Access
- **Async Reading**: Non-blocking file content retrieval
- **MIME Type Handling**: Proper content-type headers
- **Error Handling**: Graceful failure for inaccessible files

### Custom Protocol (`app://`)

#### Purpose
- **Packaged App Support**: Serve frontend files in production
- **MIME Type Correction**: Proper content-type for all assets
- **Security**: Isolated from file:// protocol vulnerabilities

#### Implementation
- **Protocol Handler**: Intercepts app:// requests
- **File Resolution**: Maps URLs to frontend dist directory
- **Buffer Handling**: Proper binary data handling for assets

### Theme Management

#### Dark/Light Mode
- **System Integration**: Respects OS theme preference
- **Manual Toggle**: User can override system setting
- **IPC Communication**: Theme changes communicated to renderer

### Logging and Error Handling

#### Electron-Log Integration
- **File Logging**: Logs written to `userData/logs/main.log`
- **Log Rotation**: 5MB max size, automatic rotation
- **Error Capture**: Uncaught exceptions and unhandled rejections
- **Process Monitoring**: Backend stdout/stderr logging

### Build and Packaging

#### Development
- **Hot Reload**: Vite dev server integration
- **DevTools**: Automatic DevTools opening in development
- **Source Maps**: Debug support

#### Production
- **Forge Configuration**: Electron Forge build setup
- **Backend Bundling**: PyInstaller executable inclusion
- **Asset Optimization**: Minified frontend bundle

### Security Considerations

#### Context Isolation
- **No Direct Node Access**: Renderer cannot require() Node modules
- **Preload Bridge**: All main process communication through preload
- **Input Validation**: All IPC messages validated

#### Process Separation
- **Main Process**: Privileged, handles system operations
- **Renderer Process**: Unprivileged, handles UI only
- **Backend Process**: Separate Python process for business logic

### Dependencies
- **Electron**: Desktop application framework
- **Electron Forge**: Build and packaging tool
- **Electron Log**: Logging framework
- **Mime-Types**: MIME type detection
- **TypeScript**: Type safety for main process

### Platform-Specific Features

#### Windows
- **Process Termination**: SIGKILL for reliable backend shutdown
- **Menu Adjustments**: Windows-specific menu structure

#### macOS
- **Dock Integration**: Application menu in dock
- **Window Management**: macOS-specific window controls

#### Linux
- **Generic Handling**: Cross-platform compatibility
- **Process Management**: Unix signal handling

### Performance Optimizations

#### Startup Time
- **Parallel Initialization**: Backend and window creation in parallel
- **Lazy Loading**: Components loaded on demand
- **Caching**: File system cache for folder trees

#### Memory Management
- **Process Cleanup**: Proper backend process termination
- **Event Listener Cleanup**: Prevents memory leaks
- **Resource Disposal**: File handles and buffers properly closed

### Error Recovery

#### Backend Failures
- **Automatic Restart**: Attempts to restart failed backend
- **Port Retry**: Finds alternative ports if initial port occupied
- **Graceful Degradation**: App continues with limited functionality

#### IPC Errors
- **Timeout Handling**: IPC calls with reasonable timeouts
- **Fallback Behavior**: Graceful handling of communication failures
- **User Notification**: Clear error messages for users


================================================================================
FILE: wiki/design/feature/directory-structure-and-build.md
================================================================================

# Directory Structure and Build Process Design Document

## Overview

This document provides a comprehensive overview of the Recall application's directory structure and build process. The application is a desktop study app built with a Python Flask backend, React/TypeScript frontend, and Electron wrapper.

## Monorepo Structure for Electron Applications

### Conceptual Organization

This project uses a monorepo structure that enables seamless integration between multiple technology stacks within a single Electron application. The key insight is organizing code by **responsibility and technology** rather than by deployment unit, allowing for:

- **Unified Version Control**: Single repository for all components
- **Atomic Changes**: Cross-component changes in single commits
- **Shared Tooling**: Common build scripts and configurations
- **Integrated Testing**: End-to-end tests across all layers
- **Simplified Dependencies**: Clear visibility of inter-component relationships

### Core Component Separation

```
recall/
├── backend/                 # Python API server (FastAPI)
├── frontend/                # React/TypeScript UI
├── electron/                # Desktop application wrapper
├── wiki/                    # Documentation and specifications
├── scripts/                 # Development and deployment utilities
└── [build configs]         # Unified build orchestration
```

#### Backend (`/backend`)
- **Technology**: Python FastAPI with SQLAlchemy
- **Responsibility**: Data persistence, business logic, API endpoints
- **Build Output**: Standalone executable (`recall-backend.exe`)
- **Runtime**: Separate process communicating via HTTP

#### Frontend (`/frontend`)
- **Technology**: React + TypeScript + Vite
- **Responsibility**: User interface and user experience
- **Build Output**: Static web assets (HTML, JS, CSS)
- **Runtime**: Served by Electron's built-in web server

#### Electron (`/electron`)
- **Technology**: Node.js + TypeScript
- **Responsibility**: Desktop integration, process management, security
- **Build Output**: Compiled JavaScript for main/preload processes
- **Runtime**: Native desktop application wrapper

#### Wiki (`/wiki`)
- **Technology**: Markdown + custom tooling
- **Responsibility**: Documentation, design specs, architectural decisions
- **Build Output**: Static documentation (optional integration)
- **Runtime**: External reference material

### Integration Through Build System

The monorepo's power lies in its **unified build orchestration** that treats these disparate technologies as a cohesive whole:

#### Single Command Build Process
```bash
make build  # Orchestrates all components
├── make build-frontend     # React → static assets
├── make build-electron     # TS → compiled JS
├── make build-backend-pyinstaller  # Python → executable
└── [integration]           # Combine into final package
```

#### Component Communication Architecture
```
┌─────────────────┐    HTTP    ┌─────────────────┐
│   Electron      │◄──────────►│     Backend     │
│   (Main Process)│            │  (Python exe)  │
└─────────────────┘            └─────────────────┘
         │                              │
         │ IPC                          │
         ▼                              │
┌─────────────────┐                     │
│   Frontend      │◄────────────────────┘
│   (React SPA)   │    HTTP API calls
└─────────────────┘
```

#### Runtime Process Management
1. **Electron launches** → Creates desktop window
2. **Backend starts** → Separate process with HTTP API
3. **Frontend loads** → Served via custom `app://` protocol
4. **IPC bridges** → Secure communication between processes

### Benefits for Electron App Development

#### Development Experience
- **Hot Reloading**: Frontend changes reflect immediately
- **Unified Debugging**: Single IDE workspace for all code
- **Shared Scripts**: Common development commands
- **Integrated Testing**: Cross-component test suites

#### Build Optimization
- **Parallel Building**: Components build simultaneously
- **Incremental Builds**: Only rebuild changed components
- **Artifact Reuse**: Cache intermediate build outputs
- **Unified Packaging**: Single distributable with all components

#### Future Extensibility
The structure naturally accommodates new components:

```
recall/
├── backend/                 # Existing Python API
├── frontend/                # Existing React UI
├── electron/                # Existing desktop wrapper
├── wiki/                    # Existing documentation
├── mobile/                  # Future: React Native app
├── cli/                     # Future: Command-line interface
├── shared/                  # Future: Cross-platform utilities
├── extensions/              # Future: Plugin system
└── [build configs]         # Unified orchestration
```

#### Technology Migration
- **Gradual Updates**: Migrate components independently
- **Compatibility Layers**: Maintain API contracts between components
- **Staged Rollouts**: Deploy component updates separately
- **Rollback Safety**: Version pinning and dependency management

### Build Integration Patterns

#### Configuration Inheritance
- **Shared Tooling**: Common linting, formatting, testing configs
- **Environment Variables**: Unified configuration across components
- **Dependency Management**: Centralized package management

#### Cross-Component Dependencies
- **API Contracts**: Defined interfaces between backend/frontend
- **Shared Types**: TypeScript definitions used across Electron/React
- **Build Dependencies**: Frontend build waits for backend API availability

#### Deployment Flexibility
- **Component Isolation**: Deploy backend/frontend independently
- **Version Pinning**: Lock compatible versions of components
- **Feature Flags**: Enable/disable features across the stack
- **Environment Parity**: Consistent configurations across dev/staging/prod

## Build Process

### Overview

The build process is orchestrated through a Makefile that coordinates building the backend, frontend, and Electron components. The application uses:

- **PyInstaller** for packaging the Python backend into a standalone executable
- **Vite** for building the React frontend
- **TypeScript** for compiling Electron scripts
- **Electron Forge** for creating distributable desktop packages

### Build Targets

#### Setup (`make setup`)
1. Installs Node.js dependencies via npm
2. Creates Python virtual environment
3. Installs Python dependencies from requirements.txt

#### Build (`make build`)
1. Runs tests first
2. Builds frontend with Vite
3. Compiles Electron TypeScript files
4. Packages backend with PyInstaller
5. Copies built assets to distribution directory

#### Development (`make dev`)
1. Kills any existing backend processes
2. Runs frontend development server
3. Starts Electron in development mode

#### Distribution (`make dist`)
1. Cleans previous builds
2. Runs full build process
3. Creates distributable packages using Electron Forge

#### Testing (`make test`)
1. Activates Python virtual environment
2. Runs pytest on backend tests

### Build Configuration Files

#### build.yaml
- Defines files to include in the packaged application
- Specifies Electron Forge build options
- Configures Windows-specific packaging (NSIS installer, portable version)
- Excludes development artifacts and unnecessary files

#### vite.config.ts
- Configures Vite for React frontend building
- Sets root directory to `frontend/`
- Outputs built files to `../dist/frontend`
- Configures development server on port 3000

#### tsconfig.electron.json
- Extends main TypeScript config
- Configures CommonJS module system for Electron
- Outputs compiled files to `dist/electron`
- Includes only Electron-related TypeScript files

#### Makefile
- Provides high-level build orchestration
- Handles cross-platform compatibility (Windows/macOS/Linux)
- Manages process cleanup and virtual environment activation
- Coordinates multi-stage build process

### Development Workflow

1. **Initial Setup**: Run `make setup` to install all dependencies
2. **Development**: Use `make dev` to start development servers
3. **Testing**: Run `make test` to execute backend tests
4. **Building**: Use `make build` for production builds
5. **Packaging**: Run `make dist` to create distributable packages
6. **Installation**: Use `make install` for full clean rebuild and install

### Key Build Dependencies

#### Frontend Build
- **Vite**: Fast build tool and development server
- **React**: UI framework
- **TypeScript**: Type-safe JavaScript
- **ESLint/Prettier**: Code quality tools

#### Backend Build
- **PyInstaller**: Python application packaging
- **Flask**: Web framework
- **SQLAlchemy**: Database ORM
- **pytest**: Testing framework

#### Desktop Packaging
- **Electron Forge**: Electron application packaging
- **Electron Builder**: Alternative packaging tool
- **NSIS**: Windows installer creation

### Build Output Structure

```
dist/
├── frontend/               # Built React application
│   ├── assets/
│   ├── index.html
│   └── (other static files)
├── electron/               # Compiled Electron scripts
│   ├── main.js
│   ├── preload.js
│   └── preload.d.ts
└── backend/
    └── recall-backend.exe  # Packaged Python executable
```

### Packaging and Distribution

The final distributable package includes:
- Electron executable
- Packaged Python backend
- Built React frontend
- Static assets
- Database migration scripts

Packages are created for Windows (NSIS installer and portable versions) and can be extended to other platforms.

### Continuous Integration

The build process is designed to be CI/CD friendly with:
- Automated testing before builds
- Clean build artifacts management
- Cross-platform compatibility
- Deterministic build outputs

This structure ensures reliable, reproducible builds across different development and deployment environments.

## Build and Packaging Internals

### Backend Packaging with PyInstaller

The Python backend is packaged into a standalone executable using PyInstaller with specific configuration:

#### PyInstaller Command Structure
```bash
python -m PyInstaller \
  --onefile \
  --name recall-backend \
  main.py \
  --hidden-import uvicorn \
  --collect-all uvicorn \
  --add-data "app/static;app/static" \
  --add-data "migrations;migrations"
```

#### Key PyInstaller Options Explained
- **`--onefile`**: Creates a single executable file instead of a directory bundle
- **`--hidden-import uvicorn`**: Explicitly includes uvicorn module (FastAPI's ASGI server)
- **`--collect-all uvicorn`**: Includes all uvicorn submodules and dependencies
- **`--add-data "app/static;app/static"`**: Includes static assets with proper path resolution
- **`--add-data "migrations;migrations"`**: Includes database migration scripts

#### Build Environment Setup
The backend is built in an isolated virtual environment:
1. Creates temporary virtual environment (`backend/.venv-build`)
2. Installs PyInstaller and all project dependencies
3. Runs PyInstaller with the specified configuration
4. Outputs `recall-backend.exe` to `backend/dist/`

### Frontend Build with Vite

The React/TypeScript frontend uses Vite for fast, optimized builds:

#### Vite Configuration Details
```typescript
export default defineConfig({
  plugins: [react()],
  root: 'frontend',
  build: {
    outDir: '../dist/frontend',
    emptyOutDir: true,
  },
  base: './',
  server: {
    port: 3000,
  },
})
```

#### Build Process Flow
1. **Entry Resolution**: Starts from `frontend/index.html`
2. **Dependency Analysis**: Analyzes imports and builds dependency graph
3. **Code Transformation**: Transpiles TypeScript to JavaScript, processes JSX
4. **Asset Processing**: Optimizes CSS, images, and other assets
5. **Bundle Generation**: Creates optimized chunks with code splitting
6. **Output Generation**: Produces `dist/frontend/` with all static assets

### Electron Compilation

Electron TypeScript files are compiled using the TypeScript compiler:

#### TypeScript Configuration for Electron
```json
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "module": "CommonJS",
    "outDir": "dist/electron",
    "rootDir": "electron",
    "noEmitOnError": false
  },
  "include": ["electron/**/*.ts", "electron/**/*.d.ts"],
  "exclude": ["node_modules", "dist", "frontend"]
}
```

#### Compilation Output
- **Input**: `electron/main.ts`, `electron/preload.ts`
- **Output**: `dist/electron/main.js`, `dist/electron/preload.js`
- **Module System**: CommonJS (required for Electron main process)

### Electron Forge Packaging

Electron Forge orchestrates the final packaging process:

#### Forge Configuration Structure
```javascript
module.exports = {
  build: {
    files: ["dist/electron/**/*", "dist/frontend/**/*"],
  },
  packagerConfig: {
    asar: false,  // Disable ASAR packaging for easier debugging
    ignore: [     // Files to exclude from package
      /\.ts$/,    // TypeScript source files
      /src$/,     // Source directories
      /tsconfig\.json$/,
      /\.git$/,
      /backend\//, // Backend source (only include executable)
    ],
    extraResource: ["backend/dist/recall-backend.exe"],
  },
  makers: [      // Package formats to create
    { name: "@electron-forge/maker-squirrel" }, // Windows NSIS installer
    { name: "@electron-forge/maker-zip" },     // Cross-platform ZIP
    { name: "@electron-forge/maker-deb" },     // Debian packages
    { name: "@electron-forge/maker-rpm" },     // RPM packages
  ],
  plugins: [     // Security and functionality plugins
    new FusesPlugin({ /* Electron fuses configuration */ })
  ]
};
```

#### Packaging Process Details

1. **File Collection**: Gathers all files specified in `build.files` and `packagerConfig.extraResource`
2. **ASAR Creation**: Optionally creates ASAR archive (disabled in this config for debugging)
3. **Platform-Specific Packaging**: Creates installers appropriate for each target platform
4. **Code Signing**: Applies security fuses to prevent code modification

#### Electron Fuses Security
```javascript
new FusesPlugin({
  version: FuseVersion.V1,
  [FuseV1Options.RunAsNode]: false,                    // Prevent Node.js execution
  [FuseV1Options.EnableCookieEncryption]: true,       // Encrypt cookies
  [FuseV1Options.EnableNodeOptionsEnvironmentVariable]: false, // Disable NODE_OPTIONS
  [FuseV1Options.EnableNodeCliInspectArguments]: false, // Disable dev tools
  [FuseV1Options.EnableEmbeddedAsarIntegrityValidation]: true, // Validate ASAR integrity
  [FuseV1Options.OnlyLoadAppFromAsar]: true,          // Only load from ASAR
})
```

### Runtime Architecture

#### Backend Startup Process
1. **Executable Launch**: `recall-backend.exe` starts the PyInstaller bundle
2. **Environment Detection**: Checks for frozen environment (`sys.frozen`)
3. **Logging Setup**: Configures file and console logging
4. **Port Binding**: Attempts to bind to specified PORT environment variable
5. **Uvicorn Server**: Starts FastAPI application with uvicorn ASGI server

#### Electron Main Process Flow
1. **App Ready**: Waits for Electron app ready event
2. **Protocol Registration**: Registers custom `app://` protocol for serving frontend
3. **Backend Startup**: Launches backend executable and waits for ready signal
4. **Window Creation**: Creates BrowserWindow after backend confirmation
5. **IPC Setup**: Establishes communication channels between processes

#### Inter-Process Communication
- **Backend ↔ Frontend**: HTTP API calls through localhost
- **Main Process ↔ Renderer**: Electron IPC for file operations and system integration
- **File System Monitoring**: Real-time file watching with fs.watch
- **Process Management**: Backend lifecycle management with spawn/kill

### Development vs Production Differences

#### Development Mode
- **Hot Reloading**: Vite dev server with HMR
- **Source Maps**: Full debugging capabilities
- **Console Access**: DevTools always available
- **Loose Security**: Some Electron security features relaxed

#### Production Mode
- **Optimized Bundles**: Minified and tree-shaken code
- **Security Hardened**: All Electron fuses enabled
- **Self-Contained**: Includes all dependencies
- **Code Signed**: Ready for distribution

### Build Artifacts Cleanup

The Makefile includes comprehensive cleanup targets:
- **Frontend**: Removes `dist/frontend` directory
- **Backend**: Removes `backend/dist` and `backend/build` directories
- **Electron**: Removes `dist/electron` directory
- **Virtual Environments**: Removes temporary build environments

This ensures clean, reproducible builds across different environments and prevents stale artifacts from affecting builds.


================================================================================
FILE: wiki/design/feature/knowledge-graph.md
================================================================================

# Knowledge Graph Component Design

## 1. Overview
This document outlines the design for the Knowledge Graph component, which aims to analyze user workspaces, create a graph of knowledge based on user interests, and suggest relevant topics for study and exploration.

### 1.1 How Workspace Analysis Works
Workspace analysis is the foundational process that extracts meaningful concepts and relationships from user files to build the knowledge graph. The process follows these steps:

1. **File Discovery**: The system scans all readable text files within a specified workspace directory, recursively exploring subdirectories.
2. **Content Extraction**: For each file, the system reads the text content, handling various encodings and file formats (primarily plain text, Markdown, and code files).
3. **Preprocessing**: Text is cleaned by removing formatting artifacts, normalizing whitespace, and optionally filtering out common stop words or boilerplate code.
4. **Concept Extraction**: Using NLP techniques (e.g., spaCy for entity recognition, KeyBERT for keyword extraction), the system identifies key concepts, topics, and entities mentioned in the text.
5. **Relationship Inference**: Concepts are analyzed for semantic relationships, such as hierarchical ("dives_deep_to") or associative ("relates_to") connections, often using embedding similarity or co-occurrence patterns.
6. **Storage**: Extracted concepts, relationships, and file linkages are stored in the SQLite database with timestamps and relevance scores.

The analysis can be triggered manually via API or run incrementally when files are modified, ensuring the knowledge graph stays current with the user's workspace.

### 1.2 How the Knowledge Graph is Created
The knowledge graph is constructed as a structured representation of concepts and their interconnections, stored in SQLite tables:

1. **Concept Identification**: Each unique concept (e.g., "Machine Learning", "Neural Networks") becomes a node in the graph with metadata like name, description, and creation timestamp.
2. **Relationship Building**: Edges between concepts are established based on semantic analysis, with types like "relates_to" (broader connections) and "dives_deep_to" (hierarchical specialization).
3. **File Linking**: Concepts are linked back to their source files with snippets and relevance scores, creating an "appendix-like" reference system.
4. **Graph Updates**: The graph evolves through incremental analysis, updating existing nodes and edges rather than rebuilding from scratch.
5. **Global Aggregation**: Across multiple workspaces, a global graph can be constructed by merging concepts and relationships, representing the user's overall knowledge landscape.

### 1.3 How Suggested Topics Work
Topic suggestions leverage the knowledge graph to surface relevant concepts for learning and exploration:

1. **Scoring Algorithm**: Concepts are ranked using a hybrid formula combining frequency (how often a concept appears), recency (how recently files containing the concept were accessed), and semantic similarity (how related the concept is to recently viewed topics).
2. **T-shaped Exploration**: Suggestions balance breadth (related concepts) and depth (subtopics within a concept hierarchy).
3. **Context Awareness**: Suggestions can be tailored to a specific concept or workspace, focusing on knowledge gaps or unexplored areas.
4. **Personalization**: The system learns from user interactions, prioritizing concepts that align with their interests and study patterns.
5. **Transparency**: Each suggestion includes an explanation of why it was recommended, often visualized through charts showing the contribution of frequency, recency, and similarity factors.

## 2. Data Sources and Extraction
*   **Primary Data Source:** All readable text files within user workspaces.
*   **Future Extension:** The system is designed to be extensible to include analysis of images and videos.
*   **Extraction Method:** Concepts and relationships will be extracted from the text content using natural language processing (NLP) techniques.

## 3. Knowledge Graph Schema (SQLite Implementation)

The knowledge graph will be stored in an SQLite database. Below is the proposed schema:

### Table: `concepts`
Represents individual topics or ideas extracted from the workspace.
| Column Name   | Data Type | Constraints               | Description                                    |
| ------------- | --------- | ------------------------- | ---------------------------------------------- |
| `concept_id`  | TEXT      | PRIMARY KEY               | Unique identifier for the concept (UUID).      |
| `name`        | TEXT      | NOT NULL                  | The name or title of the concept.              |
| `description` | TEXT      |                           | A brief description of the concept (optional). |
| `created_at`  | TIMESTAMP | DEFAULT CURRENT_TIMESTAMP | Timestamp of concept creation.                 |
| `updated_at`  | TIMESTAMP | DEFAULT CURRENT_TIMESTAMP | Timestamp of last update.                      |

### Table: `relationships`
Represents the connections between concepts.
| Column Name         | Data Type | Constraints                                   | Description                                                                            |
| ------------------- | --------- | --------------------------------------------- | -------------------------------------------------------------------------------------- |
| `relationship_id`   | TEXT      | PRIMARY KEY                                   | Unique identifier for the relationship (UUID).                                         |
| `source_concept_id` | TEXT      | NOT NULL, FOREIGN KEY (`concepts.concept_id`) | The `concept_id` of the source concept.                                                |
| `target_concept_id` | TEXT      | NOT NULL, FOREIGN KEY (`concepts.concept_id`) | The `concept_id` of the target concept.                                                |
| `type`              | TEXT      | NOT NULL                                      | Type of relationship (e.g., "relates_to", "dives_deep_to").                            |
| `strength`          | REAL      |                                               | A numerical value indicating the strength or relevance of the relationship (optional). |
| `created_at`        | TIMESTAMP | DEFAULT CURRENT_TIMESTAMP                     | Timestamp of relationship creation.                                                    |

### Table: `concept_files`
Links concepts to the specific files where they are mentioned or discussed.
| Column Name        | Data Type | Constraints                                       | Description                                                                   |
| ------------------ | --------- | ------------------------------------------------- | ----------------------------------------------------------------------------- |
| `concept_file_id`  | TEXT      | PRIMARY KEY                                       | Unique identifier for the link (UUID).                                        |
| `concept_id`       | TEXT      | NOT NULL, FOREIGN KEY (`concepts.concept_id`)     | The `concept_id` linked to the file.                                          |
| `file_id`          | TEXT      | NOT NULL, FOREIGN KEY (`files.file_id`)           | The `file_id` from the existing `files` table.                                |
| `workspace_id`     | TEXT      | NOT NULL, FOREIGN KEY (`workspaces.workspace_id`) | The `workspace_id` from the existing `workspaces` table.                      |
| `snippet`          | TEXT      |                                                   | A relevant text snippet from the file where the concept appears.              |
| `relevance_score`  | REAL      |                                                   | A score indicating how relevant the concept is to this specific file snippet. |
| `last_accessed_at` | TIMESTAMP |                                                   | Timestamp when the file was last accessed in relation to this concept.        |

### Existing Tables (for reference and integration):
*   `files`: Contains metadata about files in the workspace (e.g., `file_id`, `path`, `content_hash`).
*   `workspaces`: Contains metadata about user workspaces (e.g., `workspace_id`, `name`).

## 4. Topic Suggestion Algorithms
The system will employ a "T-shaped understanding" approach for topic suggestions, combining broad and deep exploration. Suggestions will be based on:
*   **Frequency:** Most frequently occurring concepts within a workspace or across all workspaces.
*   **Recency:** Concepts related to recently accessed or modified files.
*   **Knowledge Gaps:** Identifying concepts that are related to existing concepts in the user's graph but have not yet been deeply explored or are underrepresented in their workspace content.
*   **Hierarchical Exploration:** Utilizing "dives_deep_to" relationships to suggest more specific sub-topics, and "relates_to" for broader, related areas.
*   **File Linkage:** An "appendix-like" feature will link suggested topics back to relevant files in the workspace, providing context and resources for further study.

### 4.1 Hybrid Topic Suggestion Scoring
To balance **explainability** (Frequency + Recency) with **semantic intelligence** (Embedding Similarity), suggested topics are ranked using a weighted scoring formula.

#### Formula
For each candidate concept **C** in workspace **W**:

```
Score(C) = w_f * F(C) + w_r * R(C) + w_s * S(C)
```

Where:
- **F(C): Frequency score**  
  Normalized count of occurrences of concept **C** across workspace files.  

```
F(C) = count(C) / max_count
```
- **R(C): Recency score**  
Based on last accessed/modified time of files linked to concept **C**.  
Recent concepts get higher values.  

```
R(C) = exp(-Δt / τ)
```

Where:
- Δt = time since last access (in hours/days).  
- τ = decay constant (e.g., 7 days).  
- **S(C): Semantic similarity score**  
Embedding similarity between **C** and user's **current focus set** (recently opened concepts/files).  

```
S(C) = max_cosine_similarity(C, focus_set)
```

#### Default Weights
- **w_f = 0.4** (Frequency: ensures common concepts are surfaced)  
- **w_r = 0.3** (Recency: prioritizes what the user touched recently)  
- **w_s = 0.3** (Semantic neighbors: brings in related but unexplored concepts)  

Weights can be tuned depending on user preference:
- Higher **w_f** → more stable, popular concepts.  
- Higher **w_r** → time-sensitive suggestions.  
- Higher **w_s** → more exploratory, semantic expansion.  

#### Example (Python)

```python
import math
from sentence_transformers import util

def compute_score(concept, max_count, now, focus_embeddings,
                w_f=0.4, w_r=0.3, w_s=0.3, tau_days=7):
  # Frequency (normalized)
  F = concept["count"] / max_count

  # Recency (exponential decay)
  delta_days = (now - concept["last_accessed"]).days
  R = math.exp(-delta_days / tau_days)

  # Semantic similarity (max cosine to focus set)
  emb = concept["embedding"]
  S = max(util.cos_sim(emb, f).item() for f in focus_embeddings)

  return w_f*F + w_r*R + w_s*S
```

#### Benefits
*   **Balanced:** Combines objective (frequency), contextual (recency), and semantic (embedding) signals.
*   **Explainable:** Each component can be shown to the user.
*   **Extendable:** Additional features (e.g., graph centrality, LLM reasoning) can be added as new terms in the formula.

### 4.2 Visual Explanation for Topic Suggestions
To make the system more transparent and engaging, each suggested topic includes a visual breakdown of why it was recommended. This helps users understand the algorithm's reasoning and builds trust in the suggestions.

#### UI Component: Suggestion Explanation Chart
When a user hovers over or selects a suggested topic, a modal or tooltip displays a radar chart or stacked bar chart showing the contribution of each scoring factor:

- **Radar Chart Example:**
  - Axes: Frequency, Recency, Semantic Similarity
  - Values: Normalized scores (0-1) for each factor
  - Visual: Filled area shows the overall "relevance profile" of the topic

- **Stacked Bar Chart Example:**
  - Bars: One per suggested topic
  - Segments: Colored sections showing percentage contribution of each factor
  - Labels: Hover tooltips with exact scores and explanations

#### Sample Implementation (React with Chart.js)

```jsx
import { Radar } from 'react-chartjs-2';

const SuggestionExplanation = ({ topic }) => {
  const data = {
    labels: ['Frequency', 'Recency', 'Semantic Similarity'],
    datasets: [{
      label: topic.name,
      data: [topic.frequencyScore, topic.recencyScore, topic.similarityScore],
      backgroundColor: 'rgba(54, 162, 235, 0.2)',
      borderColor: 'rgba(54, 162, 235, 1)',
      borderWidth: 1,
    }]
  };

  return <Radar data={data} />;
};
```

#### Benefits
*   **Transparency:** Users see exactly why a topic was suggested.
*   **Engagement:** Visual elements make the system more interactive and understandable.
*   **Trust Building:** Clear explanations reduce skepticism about algorithmic recommendations.
*   **Personalization Insight:** Helps users understand their own learning patterns and interests.

## 5. Backend API Endpoints

### 5.1. Trigger Workspace Analysis
*   **Endpoint:** `POST /api/workspaces/{workspace_id}/analyze`
*   **Purpose:** Initiates the process of analyzing a specific user's workspace to extract concepts and build/update its knowledge graph. Supports incremental updates.
*   **Request Body:**
    ```json
    {
        "force_reanalysis": false, // Optional: boolean, if true, re-analyzes all files
        "file_paths": ["/path/to/new_file.txt", "/path/to/modified_file.md"] // Optional: array of file paths for incremental analysis
    }
    ```
*   **Response Body:**
    ```json
    {
        "status": "analysis_started",
        "task_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef"
    }
    ```

### 5.2. Retrieve Workspace Knowledge Graph
*   **Endpoint:** `GET /api/workspaces/{workspace_id}/knowledge-graph`
*   **Purpose:** Fetches the knowledge graph for a specific workspace.
*   **Request Parameters:**
    *   `depth`: (Optional) Integer, limits the graph traversal depth.
    *   `concept_id`: (Optional) String (UUID), focuses the graph on a subgraph around a specific concept.
*   **Response Body:**
    ```json
    {
        "nodes": [
            {"id": "concept_id_1", "name": "Concept A", "description": "..." },
            {"id": "concept_id_2", "name": "Concept B", "description": "..." }
        ],
        "edges": [
            {"id": "rel_id_1", "source": "concept_id_1", "target": "concept_id_2", "type": "relates_to", "strength": 0.75 }
        ]
    }
    ```

### 5.3. Get Workspace Suggested Topics
*   **Endpoint:** `GET /api/workspaces/{workspace_id}/suggested-topics`
*   **Purpose:** Provides a list of suggested topics relevant to a specific workspace.
*   **Request Parameters:**
    *   `limit`: (Optional) Integer, maximum number of topics to return.
    *   `context_concept_id`: (Optional) String (UUID), provides suggestions related to a specific concept.
*   **Response Body:**
    ```json
    {
        "topics": [
            {"concept_id": "concept_id_3", "name": "Suggested Topic X", "relevance_score": 0.92},
            {"concept_id": "concept_id_4", "name": "Suggested Topic Y", "relevance_score": 0.88}
        ]
    }
    ```

### 5.4. Retrieve Files by Concept
*   **Endpoint:** `GET /api/concepts/{concept_id}/files`
*   **Purpose:** Returns a list of file metadata associated with a given concept, across all workspaces.
*   **Request Parameters:**
    *   `concept_id`: String (UUID), the ID of the concept.
*   **Response Body:**
    ```json
    {
        "files": [
            {"file_id": "file_id_1", "path": "/path/to/file1.txt", "workspace_id": "ws_id_1", "snippet": "Relevant text snippet from file 1..."},
            {"file_id": "file_id_2", "path": "/path/to/file2.md", "workspace_id": "ws_id_2", "snippet": "Another relevant snippet from file 2..."}
        ]
    }
    ```

### 5.5. Retrieve Global Knowledge Graph
*   **Endpoint:** `GET /api/knowledge-graph/global`
*   **Purpose:** Fetches a consolidated knowledge graph across all user workspaces, representing overall interests.
*   **Request Parameters:**
    *   `depth`: (Optional) Integer, limits the graph traversal depth.
    *   `concept_id`: (Optional) String (UUID), focuses the graph on a subgraph around a specific concept.
*   **Response Body:** (Same structure as Retrieve Workspace Knowledge Graph, but aggregated globally)

### 5.6. Get Global Suggested Topics
*   **Endpoint:** `GET /api/suggested-topics/global`
*   **Purpose:** Provides a list of suggested topics based on the user's overall interests across all workspaces.
*   **Request Parameters:**
    *   `limit`: (Optional) Integer, maximum number of topics to return.
    *   `context_concept_id`: (Optional) String (UUID), provides suggestions related to a specific concept.
*   **Response Body:** (Same structure as Get Workspace Suggested Topics, but aggregated globally)

## 6. Frontend Component Design

### 6.1. Knowledge Graph Visualization
*   **Type:** Interactive force-directed graph (e.g., using D3.js or similar library).
*   **Nodes:** Represent concepts, visually distinct (e.g., by color, size) based on relevance or type.
*   **Edges:** Represent relationships, with labels for `relates_to` and `dives_deep_to`.
*   **Interactivity:**
    *   **Clicking a node:** Expands its immediate connections (if not already visible) and populates the "Associated Files Sidebar" with relevant files.
    *   **Hovering over a node/edge:** Displays a tooltip with more details (e.g., concept description, relationship strength).
    *   **Dragging nodes:** Allows users to rearrange the graph for better readability.
    *   **Zoom/Pan:** Standard graph navigation.

### 6.2. Suggested Topics UI
*   **Location:** A separate, scrollable list component, likely positioned adjacent to the knowledge graph.
*   **Content:** Displays a prioritized list of suggested topics (from `GET /api/workspaces/{workspace_id}/suggested-topics` or `GET /api/suggested-topics/global`).
*   **Interactivity:**
    *   **Clicking a suggested topic:**
        *   Highlights the corresponding concept in the knowledge graph (if present).
        *   Triggers the display of associated files in the "Associated Files Sidebar."
        *   Potentially re-centers the graph on the selected topic.

### 6.3. Associated Files Sidebar
*   **Location:** A dedicated sidebar area, appearing when a concept node or suggested topic is selected.
*   **Content:** Lists files (with their paths and relevant snippets) that are linked to the currently selected concept (from `GET /api/concepts/{concept_id}/files`).
*   **Interactivity:**
    *   **Clicking a file entry:** Opens the file in the editor or navigates to the relevant section.
    *   **Scrolling:** Allows viewing all associated files.

## 7. System Architecture Diagram

```mermaid
graph TD
    User[User] -->|Interacts with| Frontend[Frontend Application]
    Frontend -->|Calls API| Backend[Backend Service]

    subgraph Backend Service
        API_GW[API Gateway]
        KG_Service[Knowledge Graph Service]
        Analysis_Service[Workspace Analysis Service]
        DB[Database / Graph Database]
    end

    subgraph Frontend Application
        KG_Viz[Knowledge Graph Visualization]
        Suggested_Topics_UI[Suggested Topics UI]
        File_Sidebar[Associated Files Sidebar]
    end

    API_GW -->|POST /api/workspaces/{workspace_id}/analyze| Analysis_Service
    API_GW -->|GET /api/workspaces/{workspace_id}/knowledge-graph| KG_Service
    API_GW -->|GET /api/workspaces/{workspace_id}/suggested-topics| KG_Service
    API_GW -->|GET /api/concepts/{concept_id}/files| KG_Service
    API_GW -->|GET /api/knowledge-graph/global| KG_Service
    API_GW -->|GET /api/suggested-topics/global| KG_Service

    Analysis_Service -->|Extracts Concepts & Relationships| DB
    KG_Service -->|Retrieves Graph Data| DB

    Frontend --> KG_Viz
    Frontend --> Suggested_Topics_UI
    KG_Viz --> File_Sidebar

    click KG_Viz "Knowledge Graph Visualization: Interactive force-directed graph, node expansion, sidebar for associated files."
    click Suggested_Topics_UI "Suggested Topics UI: Separate, scrollable list of topics."
    click File_Sidebar "Associated Files Sidebar: Displays files linked to selected concepts."

## 8. GPU-Accelerated Local Implementation Design

This section outlines how the knowledge graph pipeline can leverage local GPU resources for **concept extraction**, **relationship building**, and **topic suggestions**, while remaining SQLite-based and offline-first.

### 8.1 Workspace Analysis (GPU-based)

#### Design Options

| Design                                 | Method                                                                                                             | Pros                                                                 | Cons                                                                          |
| -------------------------------------- | ------------------------------------------------------------------------------------------------------------------ | -------------------------------------------------------------------- | ----------------------------------------------------------------------------- |
| **A. Embedding-based (Sentence-BERT)** | Extract concepts using spaCy/KeyBERT → encode with `sentence-transformers` → compute similarity for relationships. | Semantic similarity, efficient with GPU, scalable for many concepts. | Needs embedding infra, relationships are similarity-based (not hierarchical). |
| **B. LLM-driven extraction**           | Use a local LLM (e.g., LLaMA/Mistral) to extract concepts + label relationships (`relates_to`, `dives_deep_to`).   | Richer, hierarchical links, domain-flexible.                         | Slower, more GPU-hungry, may hallucinate relationships.                       |
| **C. Hybrid (Recommended)**            | Use embeddings for base similarity + optional LLM pass for refinement/hierarchies.                                 | Balanced accuracy + performance, explainable, extensible to cloud.   | Requires caching to avoid re-processing unchanged files.                      |

#### Example (Python, Sentence-BERT)

```python
from sentence_transformers import SentenceTransformer, util

model = SentenceTransformer('all-MiniLM-L6-v2')

concepts = ["Kafka Streams", "Spark Structured Streaming", "Message Queue"]
embeddings = model.encode(concepts, convert_to_tensor=True)

# Compute relationships by similarity
for i in range(len(concepts)):
    for j in range(i+1, len(concepts)):
        score = util.cos_sim(embeddings[i], embeddings[j])
        if score > 0.5:
            print(concepts[i], "relates_to", concepts[j], ":", float(score))
```

### 8.2 Knowledge Graph Storage (SQLite + Vectors)

The system remains SQLite-based but with optional vector storage.

#### Design Options

| Design             | Method                                                                                 | Pros                                     | Cons                                         |
| ------------------ | -------------------------------------------------------------------------------------- | ---------------------------------------- | -------------------------------------------- |
| **A. SQLite only** | Store concepts/relationships as before, add embedding BLOB column (with `sqlite-vec`). | Simple, portable, single DB file.        | Embedding search less performant than FAISS. |
| **B. Hybrid**      | SQLite for metadata + FAISS (or Qdrant) for vector similarity.                         | Efficient large-scale similarity search. | Two systems to maintain.                     |

👉 Recommended: Start with SQLite only; upgrade to hybrid if datasets grow large.

### 8.3 Topic Suggestion (GPU-enhanced)

#### Design Options

| Design                                  | Method                                                                                    | Pros                                          | Cons                            |
| --------------------------------------- | ----------------------------------------------------------------------------------------- | --------------------------------------------- | ------------------------------- |
| **A. Frequency + Recency (baseline)**   | Rank concepts by occurrence + last accessed time.                                         | Simple, explainable, fast.                    | Ignores semantic relationships. |
| **B. Embedding Neighbors**              | Suggest concepts with highest embedding similarity to recently accessed ones.             | Surfaces semantically related topics.         | May return noisy neighbors.     |
| **C. Graph + Embeddings (Recommended)** | Combine graph traversal (`relates_to`, `dives_deep_to`) with semantic similarity ranking. | Balanced: structure + meaning, works offline. | More complex scoring logic.     |
| **D. LLM Reasoning**                    | Ask local LLM to generate personalized suggestions based on graph context.                | Adaptive, can infer unexplored gaps.          | Heavy GPU use, slower.          |

### 8.4 Local GPU-Optimized Pipeline (MVP)

#### Electron Backend → Python Worker
*   Extract concepts with spaCy/KeyBERT.
*   Encode embeddings with Sentence-BERT (GPU).
*   Insert/update into SQLite (concepts, relationships, concept_files, embedding).

#### Knowledge Graph Storage
*   SQLite schema + optional embedding column.
*   Vector similarity handled via `sqlite-vec`.

#### Suggestions
*   Start with Frequency + Recency.
*   Enhance with semantic neighbors from embeddings.
*   Optional: LLM refinement for hierarchies.

#### Frontend
*   D3.js graph visualization.
*   Suggested topics list (sorted by frequency + semantic relevance).
*   Sidebar showing associated files.

### 8.5 Future Cloud Upgrade Path
*   Concept/relationship extraction: move from local models → hosted LLMs (Claude/Gemini).
*   Graph storage: migrate SQLite → Postgres + PGVector or Neo4j.
*   Suggestions: add LLM personalization layer for deeper reasoning.

The local-first design ensures portability and offline functionality, while keeping migration paths open for cloud scale.
```


================================================================================
FILE: wiki/design/feature/quiz-generation-improvements.md
================================================================================

# Quiz Generation Improvements Design Document

## Overview

This document outlines the design for improving the quiz generation system in the Recall application. The improvements focus on two main areas:

1. **Refining the algorithm** to produce more diverse and challenging quizzes
2. **Implementing LLM-powered features** for advanced quiz generation capabilities

## Current State Analysis

### Existing Components
- **Models**: Well-defined Pydantic models for Questions, QuizSessions, Answers, and statistics
- **Frontend**: Basic quiz component with question display and answer submission
- **Backend**: Placeholder routes for quiz functionality
- **LLM Infrastructure**: Factory pattern with Gemini and Ollama client support

### Current Limitations
- Quiz generation is not implemented (placeholder routes)
- No algorithm for question selection or diversity
- No adaptive difficulty or spaced repetition
- Limited question types and interaction modes

## 1. Algorithm Improvements for Diverse and Challenging Quizzes

### Core Principles
- **Diversity**: Ensure questions cover different topics, difficulty levels, and question types
- **Challenge**: Adapt to user performance and maintain engagement
- **Coverage**: Ensure comprehensive testing of workspace content
- **Efficiency**: Minimize redundant questions while maximizing learning value

### Question Selection Algorithm

#### Content Analysis Phase
```python
class ContentAnalyzer:
    def analyze_file_content(self, file_content: str) -> Dict[str, Any]:
        """
        Extract key concepts, topics, and difficulty indicators from file content
        Returns: {
            'topics': List[str],
            'complexity_score': float,
            'key_concepts': List[str],
            'question_candidates': List[Dict]
        }
        """
```

#### Question Pool Generation
```python
class QuestionPoolGenerator:
    def generate_pool(self, workspace_files: List[File]) -> List[Question]:
        """
        Generate diverse question pool from workspace content
        - Extract key concepts and relationships
        - Generate multiple question types per concept
        - Balance difficulty distribution
        - Ensure topic coverage
        """
```

#### Selection Criteria
- **Topic Distribution**: Ensure questions cover all major topics proportionally
- **Difficulty Balance**: Mix easy (30%), medium (50%), hard (20%) questions
- **Question Type Mix**: Multiple choice (40%), true/false (30%), short answer (20%), fill-in-blank (10%)
- **Freshness**: Prioritize recently modified content and avoid recently asked questions

### Adaptive Difficulty Algorithm

#### Performance Tracking
```python
class PerformanceTracker:
    def update_performance(self, question_id: int, correct: bool, time_taken: int):
        """
        Track question performance metrics:
        - Success rate
        - Average response time
        - Difficulty perception
        - Topic mastery level
        """
```

#### Difficulty Adjustment
```python
class AdaptiveDifficultyEngine:
    def adjust_difficulty(self, user_performance: Dict) -> DifficultyLevel:
        """
        Adjust question difficulty based on:
        - Recent performance (last 10 questions)
        - Topic mastery levels
        - Session goals (learning vs. testing)
        - User preferences
        """
```

### Diversity Metrics
- **Topic Entropy**: Measure distribution across different subjects
- **Question Type Variance**: Ensure mix of cognitive skills tested
- **Difficulty Spread**: Avoid clustering at single difficulty level
- **Temporal Distribution**: Balance questions from different time periods

## 2. LLM-Powered Advanced Features

### Dynamic Q&A Generation

#### LLM Integration Architecture
```python
class LLMQuestionGenerator:
    def __init__(self, llm_client: LLMClient):
        self.client = llm_client

    def generate_questions(self, content: str, count: int = 5) -> List[Question]:
        """
        Use LLM to generate contextually relevant questions
        - Analyze content structure and key concepts
        - Generate varied question types
        - Ensure factual accuracy
        - Provide explanations
        """
```

#### Prompt Engineering
```
Generate {count} diverse quiz questions from the following content.
Requirements:
- Mix of question types: multiple choice, true/false, short answer
- Cover different aspects: facts, concepts, applications
- Include explanations for correct answers
- Vary difficulty levels appropriately

Content: {file_content}

Output format: JSON array of question objects
```

### Spaced Repetition System

#### Algorithm Implementation
```python
class SpacedRepetitionEngine:
    def __init__(self):
        self.algorithm = "sm2"  # SuperMemo 2 algorithm

    def calculate_next_review(self, question: Question, performance: Answer) -> datetime:
        """
        Calculate optimal review interval based on:
        - Current ease factor
        - Performance quality (0-5 scale)
        - Number of successful reviews
        - Time since last review
        """
```

#### Review Scheduling
- **Initial Review**: Immediate feedback
- **First Repetition**: 1 day later
- **Subsequent Reviews**: 3, 7, 14, 30 days (adjusting based on performance)
- **Failed Items**: Reset to 1-day interval

### Weak Area Analysis

#### Performance Analytics
```python
class WeakAreaAnalyzer:
    def identify_weak_areas(self, user_answers: List[Answer]) -> Dict[str, float]:
        """
        Analyze performance patterns to identify:
        - Topics with low success rates
        - Question types causing difficulty
        - Time-based performance trends
        - Concept dependencies
        """
```

#### Targeted Review Generation
```python
class TargetedReviewGenerator:
    def generate_review_session(self, weak_areas: Dict) -> QuizSession:
        """
        Create focused review sessions:
        - Prioritize weak topics (70% of questions)
        - Include related concepts for reinforcement
        - Mix in stronger areas for confidence building
        - Adaptive difficulty based on mastery levels
        """
```

### Voice and Flashcard Modes

#### Voice Mode Implementation
```python
class VoiceQuizEngine:
    def __init__(self, tts_engine):
        self.tts = tts_engine

    def speak_question(self, question: Question):
        """
        Convert question text to speech
        - Use natural voice synthesis
        - Support different speeds
        - Handle special characters/technical terms
        """

    def process_voice_answer(self, audio_input) -> str:
        """
        Convert speech to text for answer processing
        - Handle various accents and speech patterns
        - Provide confidence scores
        - Support retry mechanisms
        """
```

#### Flashcard Mode
```python
class FlashcardEngine:
    def create_flashcard_deck(self, questions: List[Question]) -> List[Flashcard]:
        """
        Transform questions into flashcard format:
        - Question on front, answer on back
        - Include hints and explanations
        - Group by topic and difficulty
        """

    def adaptive_sequence(self, deck: List[Flashcard], performance: Dict) -> List[Flashcard]:
        """
        Order flashcards for optimal learning:
        - Prioritize difficult items
        - Space repetitions appropriately
        - Balance topic coverage
        """
```

## Implementation Roadmap

### Phase 1: Core Algorithm Improvements (Leveraging Knowledge Graph)
1. Implement content analysis for question generation, integrating with Knowledge Graph for concept extraction and relationship inference.
2. Add question pool management with diversity metrics, guided by Knowledge Graph concepts and relationships.
3. Integrate adaptive difficulty engine, informed by Knowledge Graph concept mastery levels.
4. Update quiz routes with new algorithms.

### Phase 2: LLM Integration
1. Integrate LLM clients for dynamic question generation.
2. Implement prompt templates for different question types.
3. Add LLM-generated question validation.
4. Update models to support LLM-generated content.

### Phase 3: Advanced Features (Leveraging Knowledge Graph)
1. Implement spaced repetition algorithm, prioritizing questions based on Knowledge Graph concept review schedules.
2. Add weak area analysis and targeted reviews, directly linking to Knowledge Graph concepts.
3. Integrate voice synthesis and recognition.
4. Develop flashcard mode interface.

### Phase 4: Analytics and Optimization
1. Add comprehensive performance tracking, including concept-level mastery from Knowledge Graph.
2. Implement A/B testing for algorithm improvements.
3. Add user feedback mechanisms.
4. Optimize for performance and scalability.

## Integration with Knowledge Graph

The Knowledge Graph (KG) will serve as a foundational component for enhancing quiz generation, providing structured insights into user workspace content.

### Backend Integration Points
The Quiz Generation Backend will interact with the Knowledge Graph Service via its API endpoints:
*   `POST /api/workspaces/{workspace_id}/analyze`: To trigger content analysis and update the KG for a workspace, which in turn enriches the data available for quiz generation.
*   `GET /api/workspaces/{workspace_id}/knowledge-graph`: To retrieve the graph for understanding concept relationships, aiding in question diversity and difficulty assessment.
*   `GET /api/workspaces/{workspace_id}/suggested-topics`: To get a prioritized list of topics for quiz generation, especially for targeted reviews and ensuring comprehensive coverage.
*   `GET /api/concepts/{concept_id}/files`: To retrieve relevant file snippets for question generation based on specific concepts identified by the KG.

### Enhanced Models (Leveraging Knowledge Graph)
```python
class LLMQuestion(Question):
    generated_by_llm: bool = True
    generation_prompt: Optional[str]
    confidence_score: float
    # Link to Knowledge Graph concept(s)
    kg_concept_ids: List[str] = []

class SpacedRepetitionData(BaseModel):
    ease_factor: float = 2.5
    interval_days: int = 1
    review_count: int = 0
    next_review: datetime
    # Link to Knowledge Graph concept(s)
    kg_concept_id: Optional[str]
```

## API Design

### New Endpoints
```
POST /api/quiz/generate-adaptive
- Generate quiz with adaptive difficulty, potentially informed by Knowledge Graph concept mastery.

POST /api/quiz/generate-llm
- Generate questions using LLM, with input potentially guided by Knowledge Graph concepts.

GET /api/quiz/spaced-repetition
- Get questions due for review, prioritized by Spaced Repetition and Knowledge Graph concept mastery.

POST /api/quiz/voice-answer
- Submit voice-based answer.

GET /api/quiz/weak-areas
- Get analysis of weak performance areas, directly linked to Knowledge Graph concepts.
```

## Frontend Enhancements

### New Components
- **AdaptiveQuiz**: Handles difficulty adjustment, potentially visualizing progress against Knowledge Graph concepts.
- **VoiceQuiz**: Integrates speech synthesis/recognition.
- **FlashcardMode**: Card-based learning interface.
- **ProgressAnalytics**: Visualizes weak areas and progress, potentially highlighting struggling concepts within a Knowledge Graph visualization.

### UI Improvements
- Progress indicators for spaced repetition, potentially showing progress on specific Knowledge Graph concepts.
- Voice controls and feedback.
- Flashcard flip animations.
- Performance heatmaps for topic analysis, potentially mapping to Knowledge Graph concepts.

## Testing Strategy

### Unit Tests
- Algorithm correctness (diversity metrics, difficulty adjustment, KG integration).
- LLM integration and prompt effectiveness.
- Spaced repetition calculations.
- Knowledge Graph API interactions.

### Integration Tests
- End-to-end quiz generation workflows, including KG data flow.
- Voice processing accuracy.
- Performance tracking accuracy.
- KG-informed targeted review generation.

### User Testing
- A/B testing of algorithm improvements.
- Usability testing for new modes.
- Performance impact assessment.

## Metrics and Monitoring

### Key Metrics
- Question diversity scores (informed by KG concept coverage).
- User engagement (session completion rates).
- Learning effectiveness (performance improvement over time, concept mastery from KG).
- System performance (generation speed, accuracy).

### Monitoring
- LLM usage and costs.
- Question quality ratings.
- User satisfaction surveys.
- Error rates and failure modes.
- Knowledge Graph service health and data consistency.

## Conclusion

These improvements will transform the quiz system from a basic question generator into an intelligent, adaptive learning platform. The combination of algorithmic refinements, LLM-powered features, and deep integration with the Knowledge Graph will provide users with personalized, effective learning experiences that adapt to their needs and maximize knowledge retention by understanding their knowledge landscape.


================================================================================
FILE: wiki/design/frontend-design.md
================================================================================

# Frontend Design Document

## Overview
The Recall frontend is a React-based single-page application built with TypeScript that provides the user interface for the study application. It features a tabbed interface for managing workspaces, exploring files, taking quizzes, and tracking progress.

## Architecture

### Core Framework
- **React 18+**: Component-based UI framework
- **TypeScript**: Type-safe JavaScript for better development experience
- **Vite**: Fast build tool and development server

### Application Structure

#### Main Application (`src/App.tsx`)
- **State Management**: Local state for current tab, selected workspace, and modal visibility
- **Event Handling**: Custom events for tab switching and workspace selection
- **Menu Integration**: Electron menu event listeners for navigation
- **Tab Rendering**: Conditional rendering based on current tab state

#### Component Organization
```
frontend/
├── src/
│   ├── App.tsx                 # Main application component
│   └── index.tsx              # Application entry point
├── components/
│   ├── workspaces/            # Workspace management
│   ├── file-explorer/         # File browsing interface
│   ├── quiz/                  # Quiz taking interface
│   └── progress/              # Progress tracking
├── core/
│   ├── api.ts                 # API client functions
│   └── types.ts               # TypeScript type definitions
└── shared/
    ├── utils.ts               # Shared utility functions
    └── html-loader.ts         # HTML component loading
```

### Key Components

#### 1. Workspaces Component
- **Purpose**: Manage study workspaces (folders containing study materials)
- **Features**:
  - List existing workspaces
  - Create new workspaces from folders
  - Workspace statistics and metadata
  - Modal dialogs for creation/editing

#### 2. File Explorer Component
- **Purpose**: Browse and view files within selected workspace
- **Features**:
  - Tree view of folder structure
  - File content preview
  - File type filtering (text-based files)
  - Search within workspace files

#### 3. Quiz Component
- **Purpose**: Generate and take quizzes based on workspace content
- **Features**:
  - Quiz generation from LLM
  - Question types (multiple choice, etc.)
  - Answer submission and scoring
  - Session tracking

#### 4. Progress Component
- **Purpose**: Track study progress and achievements
- **Features**:
  - Study session history
  - Quiz performance metrics
  - Achievement system
  - Progress visualization

### State Management
- **Local State**: React useState hooks for component-level state
- **Event System**: Custom DOM events for cross-component communication
- **No Global State**: Simple architecture without Redux/Zustand

### API Integration (`core/api.ts`)
- **REST Client**: Functions for backend API calls
- **Error Handling**: Consistent error handling for API responses
- **Type Safety**: TypeScript interfaces for API responses

### Type Definitions (`core/types.ts`)
- **API Types**: Mirrors backend Pydantic models
- **Component Props**: Interface definitions for component properties
- **Event Types**: Custom event type definitions

### Electron Integration
- **Preload Script**: Type-safe IPC communication
- **Menu Events**: Integration with application menu
- **File System Access**: IPC handlers for file operations
- **Custom Protocol**: `app://` protocol for packaged app

### Styling
- **CSS Modules**: Scoped styling with `style.css`
- **Theme Support**: Dark/light mode toggle
- **Responsive Design**: Adapts to window resizing

### Build and Development
- **Vite Configuration**: Custom build setup in `vite.config.ts`
- **TypeScript Config**: Separate configs for Electron and web
- **Development Server**: Hot reload during development
- **Production Build**: Optimized bundle for Electron packaging

### Key Features

#### Tab-Based Navigation
- **Workspaces Tab**: Workspace management and creation
- **Files Tab**: File browsing and content viewing
- **Quiz Tab**: Interactive quiz taking
- **Progress Tab**: Study analytics and achievements

#### Workspace Integration
- **Folder Selection**: Native OS folder picker via Electron
- **Auto-Switching**: Automatic tab switching after workspace selection
- **Context Awareness**: Components adapt based on selected workspace

#### File Operations
- **Tree View**: Hierarchical file browser
- **Content Loading**: Async file content retrieval
- **Type Filtering**: Only text-based files displayed

#### Quiz System
- **LLM Generation**: AI-powered question creation
- **Session Management**: Quiz attempt tracking
- **Scoring**: Automatic answer evaluation

#### Progress Tracking
- **Session History**: Study session logging
- **Statistics**: Performance metrics and trends
- **Gamification**: Achievement system

### Dependencies
- **React/React-DOM**: UI framework
- **TypeScript**: Type checking
- **Vite**: Build tool
- **Electron Types**: Type definitions for Electron APIs

### Development Workflow
- **Component Development**: Modular, reusable components
- **Type Safety**: Full TypeScript coverage
- **Hot Reload**: Fast development iteration
- **Electron Integration**: Seamless desktop app experience


================================================================================
FILE: wiki/index.md
================================================================================

# Recall Wiki

Welcome to the Recall project documentation.

This wiki contains information about building, packaging, and designing the Recall application.

## Sections

- [BUILD](BUILD.md) - Instructions for building the application
- [PACKAGING](PACKAGING.md) - Instructions for packaging the application
- [Design](design/) - Design documents for various components

## Features

- Workspace Management
- File Analysis
- Quiz Generation
- Progress Tracking


